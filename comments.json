[
 {
  "id": 1930533855,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/44",
  "title": "Bad debt accumulation index is reset on partial liquidation and is not reset on CDP increase, allowing for phantom bad debt creation",
  "created_by": "dmitriia",
  "created_at": "10/6/2023",
  "body": "**Context:** [LiquidationLibrary.sol#L446](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.5/packages/contracts/contracts/LiquidationLibrary.sol#L446), [CdpManager.sol#L913-L916](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.5/packages/contracts/contracts/CdpManager.sol#L913-L916)\r\n\r\n**Description:** Partial liquidation incorrectly resets `debtRedistributionIndex` of the CDP, while CDP update functionality should reset it when CDP's collateral was increased, but doesn't do it. This can create debt that doesn't correspond to any eBTC minted.\r\n\r\nPending bad debt accumulator is subject to rounding error, i.e. `pendingEBTCDebtReward` can routinely be zero for small CDPs:\r\n\r\n```solidity\r\nfunction _getPendingRedistributedDebt(\r\n    bytes32 _cdpId\r\n) internal view returns (uint256 pendingEBTCDebtReward) {\r\n    Cdp storage cdp = Cdps[_cdpId];\r\n\r\n    if (cdp.status != Status.active) {\r\n        return 0;\r\n    }\r\n\r\n    uint256 rewardPerUnitStaked = systemDebtRedistributionIndex -\r\n        debtRedistributionIndex[_cdpId];\r\n\r\n    if (rewardPerUnitStaked > 0) {\r\n        // See the line below\r\n        pendingEBTCDebtReward = (cdp.stake * rewardPerUnitStaked) / DECIMAL_PRECISION;\r\n    }\r\n}\r\n```\r\n\r\n`_updateRedistributedDebtSnapshot()`, that updates the bad debt index, is now called by `_syncAccounting()` only when pending bad debt is positive, i.e. when accumulation exceeds this rounding error:\r\n\r\n```solidity\r\nfunction _syncAccounting(bytes32 _cdpId) internal {\r\n    // See the line below\r\n    (, uint _newDebt, , uint _pendingDebt) = _applyAccumulatedFeeSplit(_cdpId);\r\n\r\n    // Update pending debts\r\n    if (_pendingDebt > 0) { // See this line\r\n        Cdp storage _cdp = Cdps[_cdpId];\r\n        uint256 prevDebt = _cdp.debt;\r\n        uint256 prevColl = _cdp.coll;\r\n\r\n        // Apply pending rewards to cdp's state\r\n        _cdp.debt = _newDebt;\r\n        // See the line below\r\n        _updateRedistributedDebtSnapshot(_cdpId);\r\n        // ...\r\n```\r\n\r\nI.e. when there is a rounding to zero the implemented approach allows accumulation to happen until pending part becomes positive to correct for that rounding error over time. This can take long enough when CDP is small.\r\n\r\nBut the same update is called in `_partiallyReduceCdpDebt()` in isolation and unconditionally:\r\n\r\n```solidity\r\nfunction _partiallyReduceCdpDebt(\r\n    bytes32 _cdpId,\r\n    uint256 _partialDebt,\r\n    uint256 _partialColl\r\n) internal {\r\n    Cdp storage _cdp = Cdps[_cdpId];\r\n\r\n    uint256 _coll = _cdp.coll;\r\n    uint256 _debt = _cdp.debt;\r\n\r\n    _cdp.coll = _coll - _partialColl;\r\n    _cdp.debt = _debt - _partialDebt;\r\n    _updateStakeAndTotalStakes(_cdpId);\r\n    // See the line below\r\n    _updateRedistributedDebtSnapshot(_cdpId);\r\n}\r\n```\r\n\r\nNotice that there was a `_syncAccounting()` state update at the beginning of the `partiallyLiquidate` call:\r\n\r\n```solidity\r\n// Single CDP liquidation function (partially).\r\nfunction partiallyLiquidate(\r\n    // ...\r\n) external nonReentrantSelfAndBOps {\r\n    _liquidateIndividualCdpSetup(_cdpId, _partialAmount, _upperPartialHint, _lowerPartialHint);\r\n}\r\n\r\n// Single CDP liquidation function.\r\nfunction _liquidateIndividualCdpSetup(\r\n    // ...\r\n) internal {\r\n    _requireCdpIsActive(_cdpId);\r\n    // See the line below\r\n    _syncAccounting(_cdpId);\r\n```\r\n\r\nOverall there can be 3 cases, it was either:\r\n1. `_pendingDebt > 0` and `_updateRedistributedDebtSnapshot(_cdpId)` in `_partiallyReduceCdpDebt()` does nothing as it was called already.\r\n2. Or `_pendingDebt == 0` and `debtRedistributionIndex[_cdpId] == systemDebtRedistributionIndex` and `_updateRedistributedDebtSnapshot(_cdpId)` also does nothing.\r\n3. Or `_pendingDebt == 0` and `debtRedistributionIndex[_cdpId] < systemDebtRedistributionIndex`, i.e. there were a rounding of the pending part to zero. Since CDP stake can only fall as a result of partial liquidation, the rounding thereafter can only become worse.\r\n\r\nI.e. in order to reduce the total rounding error the correct take here is to keep old `debtRedistributionIndex[_cdpId]`, so it be updated later on when pending be accrued (slower than before as stake was reduced) to some positive value.\r\n\r\nNotice also that in the similar situation of stake reduction due to partial redemption there is no `debtRedistributionIndex` reset, which looks correct this way:\r\n\r\n```solidity\r\nfunction _redeemCollateralFromCdp(\r\n    SingleRedemptionInputs memory _redeemColFromCdp\r\n) internal returns (SingleRedemptionValues memory singleRedemption) {\r\n    // ...\r\n\r\n    if (newDebt == 0) {\r\n        // No debt remains, close CDP\r\n        // ...\r\n    } else {\r\n        // Debt remains, reinsert CDP\r\n        uint256 newNICR = LiquityMath._computeNominalCR(newColl, newDebt);\r\n\r\n        // ...\r\n\r\n        Cdps[_redeemColFromCdp.cdpId].debt = newDebt;\r\n        Cdps[_redeemColFromCdp.cdpId].coll = newColl;\r\n        // See the line below\r\n        _updateStakeAndTotalStakes(_redeemColFromCdp.cdpId);\r\n        // ...\r\n```\r\n\r\nOn the other side, when CDP stake is increased, such debt index reset should take place as otherwise the accumulated `systemDebtRedistributionIndex - debtRedistributionIndex[_cdpId]` difference will be applied to the whole new stake next time, which can result in a massive new phantom bad debt creation when small CDP became much bigger as a result of CDP update.\r\n\r\n```solidity\r\nfunction updateCdp(\r\n    // ...\r\n) external {\r\n    _requireCallerIsBorrowerOperations();\r\n\r\n    _setCdpCollShares(_cdpId, _newColl);\r\n    _setCdpDebt(_cdpId, _newDebt);\r\n\r\n    uint256 stake = _updateStakeAndTotalStakes(_cdpId);\r\n\r\n    emit CdpUpdated(\r\n    // ...\r\n```\r\n\r\nI.e. suppose CDP's `debtRedistributionIndex` wasn't updated due to rounding to zero for a long time, then this CDP was increased by $10^5$ times by an update via `adjustCdpWithColl()` $\\rightarrow$ `_adjustCdpInternal()`, while `debtRedistributionIndex` was kept intact as `cdpManager.syncAccounting(_cdpId)` was called before increase, while after increase no debt accruals updates are being made, as `_setCdpDebt` only rewrites current CDP debt figure.\r\n\r\nImpact: bad debt accumulation is written off within rounding error for a partially liquidated CDP, while new non-existent bad debt can be added on a substantial CDP size increase. The latter deteriorates the health of the CDP and creates eBTC debt that was never minted. In order for that to be material, the growth in CDP size should be massive, which on the one hand is a part of regular workflow, on the another doesn't frequently happen, so the probability here can be estimated as medium. In the same time this effect, being systematic, will accumulate over time across different CDPs.\r\n\r\nThe effect from one CDPs is as follows: if realistic increase can be seen at $10^5x$, as there is a minimal CDP size constraint, a maximum increase can be, as an example, from having minimal collateral to `200k ETH` or about `USD 330 mln` at current rates. The impact will be about the same number in eBTC terms, as `0.99999 * 1e5` (i.e. `0.99999` was rounded to `0` before the increase) or `99999 * 27600 / 1e18 = 3 / 10^9 USD`.\r\n\r\nWhile this alone isn't material, there also considerations of this new debt not being representing any eBTC minted, so along with such new debt creation grows a chance of DOS from eBTC burn rejection, i.e. in absense of manual additional minting the last CDP might not be able to close (i.e. it sent its eBTC to the market so others can purchase and close, while it can't close as there is not enough eBTC in circulation). By itself this looks manageable.\r\n\r\nBoth parts in total have high likelihood and low impact, so setting overall severity to be medium.\r\n\r\n**Recommendation:** Consider removing `_updateRedistributedDebtSnapshot()` call in `_partiallyReduceCdpDebt()`:\r\n\r\n```diff\r\n  function _partiallyReduceCdpDebt(\r\n      // ...\r\n  ) internal {\r\n      // ...\r\n\r\n      _cdp.coll = _coll - _partialColl;\r\n      _cdp.debt = _debt - _partialDebt;\r\n      _updateStakeAndTotalStakes(_cdpId);\r\n\r\n-     _updateRedistributedDebtSnapshot(_cdpId);\r\n  }\r\n```\r\n\r\nCalling `_updateRedistributedDebtSnapshot()` in `updateCdp()` on CDP increase in the same time can be advised (the situation doesn't look to be symmetrical, nothing offsets this growth, so it need to be controlled at the price of forcing some debt rounding), consider adding:\r\n\r\n```diff\r\n  function updateCdp(\r\n      // ...\r\n  ) external {\r\n      _requireCallerIsBorrowerOperations();\r\n\r\n      _setCdpCollShares(_cdpId, _newColl);\r\n      _setCdpDebt(_cdpId, _newDebt);\r\n\r\n      uint256 stake = _updateStakeAndTotalStakes(_cdpId);\r\n\r\n+     if (_newColl > _coll) {\r\n+         _updateRedistributedDebtSnapshot(_cdpId);\r\n+     }\r\n\r\n      emit CdpUpdated(\r\n          _cdpId,\r\n          _borrower,\r\n          _debt,\r\n          _coll,\r\n          _newDebt,\r\n          _newColl,\r\n          stake,\r\n          CdpOperation.adjustCdp\r\n      );\r\n  }\r\n```\r\n\r\n**BadgerDAO:** The related code change was introduced via advised fix in an [earlier audit](https://github.com/spearbit-audits/review-badgerdao/issues/72) to apply update on `debtRedistributionIndex[_cdpId]` **only if** calculated `pendingDebt` is positive instead of original Liquity code behavior, i.e., [direct `debtRedistributionIndex[_cdpId]` comparison against `systemDebtRedistributionIndex`]( https://github.com/liquity/dev/blob/main/packages/contracts/contracts/TroveManager.sol#L1060). \r\n\r\nIntend to agree with the finding on:\r\n- The \"phantom debt increase\" due to this update skip of `debtRedistributionIndex[_cdpId]`,\r\n- And unconditional update of `debtRedistributionIndex[_cdpId]` in partial liquidation could make it worse when the `pendingDebt` is rounding to zero.\r\n\r\n**Cantina:** Yes, [the issue from the past audit](https://github.com/spearbit-audits/review-badgerdao/issues/72) had these implications we didn’t reflected at that moment.\r\n\r\nAn alternative to the suggested mitigation here is to roll back that change, resetting the index all the time even if nothing was added to the accumulator, forfeiting bad debt accumulation for small CDPs. I.e. it might be the case that some part of bad debt distribution will be void for all the small ones due to the rounding if updates be frequent enough. Something like `F({frequency of updates}, {share of min collateral CDPs in the system})` $\\rightarrow$ `{total share of bad debt being written off}` can be modelled to understand whether that’s material.\r\n\r\nPartial liquidation suggestion will still stand as no additional reset be needed in this case too.\r\n\r\n**BadgerDAO:** The suggested fix is in [PR 694](https://github.com/Badger-Finance/ebtc/pull/694). Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1751585574",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/44#issuecomment-1751585574",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/44",
    "id": 1751585574,
    "node_id": "IC_kwDOKBuOEs5oZxMm",
    "user": {
     "login": "rayeaster",
     "id": 1487283,
     "node_id": "MDQ6VXNlcjE0ODcyODM=",
     "avatar_url": "https://avatars.githubusercontent.com/u/1487283?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/rayeaster",
     "html_url": "https://github.com/rayeaster",
     "followers_url": "https://api.github.com/users/rayeaster/followers",
     "following_url": "https://api.github.com/users/rayeaster/following{/other_user}",
     "gists_url": "https://api.github.com/users/rayeaster/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/rayeaster/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/rayeaster/subscriptions",
     "organizations_url": "https://api.github.com/users/rayeaster/orgs",
     "repos_url": "https://api.github.com/users/rayeaster/repos",
     "events_url": "https://api.github.com/users/rayeaster/events{/privacy}",
     "received_events_url": "https://api.github.com/users/rayeaster/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/7/2023",
    "updated_at": "2023-10-07T03:54:51Z",
    "author_association": "COLLABORATOR",
    "body": "The related code change was introduced via advised fix in [earlier audit](https://github.com/spearbit-audits/review-badgerdao/issues/72) to apply update on `debtRedistributionIndex[_cdpId]` **only if** calculated `pendingDebt` is positive instead of original Liquity code behavior, i.e., [direct `debtRedistributionIndex[_cdpId]` comparison against `systemDebtRedistributionIndex`]( https://github.com/liquity/dev/blob/main/packages/contracts/contracts/TroveManager.sol#L1060). \r\n\r\nIntend to agree with @dmitriia finding on \r\n\r\n- the \"phantom debt increase\" due to this update skip of `debtRedistributionIndex[_cdpId]` & \r\n- unconditional update of `debtRedistributionIndex[_cdpId]` in partial liquidation could make it worse when the `pendingDebt` is rounding to zero",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1751585574/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1751718447",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/44#issuecomment-1751718447",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/44",
    "id": 1751718447,
    "node_id": "IC_kwDOKBuOEs5oaRov",
    "user": {
     "login": "dmitriia",
     "id": 6178977,
     "node_id": "MDQ6VXNlcjYxNzg5Nzc=",
     "avatar_url": "https://avatars.githubusercontent.com/u/6178977?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/dmitriia",
     "html_url": "https://github.com/dmitriia",
     "followers_url": "https://api.github.com/users/dmitriia/followers",
     "following_url": "https://api.github.com/users/dmitriia/following{/other_user}",
     "gists_url": "https://api.github.com/users/dmitriia/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/dmitriia/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/dmitriia/subscriptions",
     "organizations_url": "https://api.github.com/users/dmitriia/orgs",
     "repos_url": "https://api.github.com/users/dmitriia/repos",
     "events_url": "https://api.github.com/users/dmitriia/events{/privacy}",
     "received_events_url": "https://api.github.com/users/dmitriia/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/7/2023",
    "updated_at": "2023-10-07T13:51:58Z",
    "author_association": "COLLABORATOR",
    "body": "Yes, [#72](https://github.com/spearbit-audits/review-badgerdao/issues/72) had these implications we didn’t reflected at that moment.\r\n\r\nAn alternative to the suggested mitigation here is to roll back that change, resetting the index all the time even if nothing was added to the accumulator, forfeiting bad debt accumulation for small CDPs. I.e. it might be the case that some part of bad debt distribution will be void for all the small ones due to the rounding if updates be frequent enough. Something like `F({frequency of updates}, {share of min collateral CDPs in the system}) -> {total share of bad debt being written off}` can be modelled to understand whether that’s material.\r\n\r\nPartial liquidation suggestion will still stand as no additional reset be needed in this case too.",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1751718447/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1761016114",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/44#issuecomment-1761016114",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/44",
    "id": 1761016114,
    "node_id": "IC_kwDOKBuOEs5o9vky",
    "user": {
     "login": "rayeaster",
     "id": 1487283,
     "node_id": "MDQ6VXNlcjE0ODcyODM=",
     "avatar_url": "https://avatars.githubusercontent.com/u/1487283?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/rayeaster",
     "html_url": "https://github.com/rayeaster",
     "followers_url": "https://api.github.com/users/rayeaster/followers",
     "following_url": "https://api.github.com/users/rayeaster/following{/other_user}",
     "gists_url": "https://api.github.com/users/rayeaster/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/rayeaster/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/rayeaster/subscriptions",
     "organizations_url": "https://api.github.com/users/rayeaster/orgs",
     "repos_url": "https://api.github.com/users/rayeaster/repos",
     "events_url": "https://api.github.com/users/rayeaster/events{/privacy}",
     "received_events_url": "https://api.github.com/users/rayeaster/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/13/2023",
    "updated_at": "2023-10-13T07:08:41Z",
    "author_association": "COLLABORATOR",
    "body": "@dmitriia Hello ser, would you please take a look here for the fix as you suggested? Really appreciate\r\nhttps://github.com/Badger-Finance/ebtc/pull/694",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1761016114/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/44/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#44"
 },
 {
  "id": 1928470407,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/43",
  "title": "Partial liquidation and leaving bad debt undistributed can be optimal for liquidators to maximize incentives received from other CDPs",
  "created_by": "dmitriia",
  "created_at": "10/5/2023",
  "body": "**Context:** [LiquidationLibrary.sol#L539-L554](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.5/packages/contracts/contracts/LiquidationLibrary.sol#L539-L554)\r\n\r\n**Description:** Liquidators have incentives to avoid fully liquidating the bad CDPs until the very end of their liquidation sequence. This way they leave bad debt undistributed and maximize ICRs of the best liquidable CDPs, receiving more liquidation incentives, which linearly depend on the ICR when `MCR > ICR > LICR`.\r\n\r\nOn the same grounds as the issue [\"Liquidator can receive outsized incentives by aiming the best liquidable CDPs first\"](https://github.com/cantinasec/review-badgerdao/issues/42), it is also profitable for a liquidator to perform only partial liquidation of the worst CDP containing bad debt to receive `3%` of the maximal debt that can be burned partially, leaving only minimal collateral and the full bad debt part:\r\n\r\n```solidity\r\nfunction _calculateSurplusAndCap(\r\n    // ...\r\n)\r\n    private\r\n    view\r\n    returns (uint256 cappedColPortion, uint256 collSurplus, uint256 debtToRedistribute)\r\n{\r\n    // Calculate liquidation incentive for liquidator:\r\n    // If ICR is less than 103%: give away 103% worth of collateral to liquidator, i.e., repaidDebt * 103% / price\r\n    // If ICR is more than 103%: give away min(ICR, 110%) worth of collateral to liquidator, i.e., repaidDebt * min(ICR, 110%) / price\r\n    uint256 _incentiveColl;\r\n    if (_ICR > LICR) {\r\n        _incentiveColl = (_totalDebtToBurn * (_ICR > MCR ? MCR : _ICR)) / _price;\r\n    } else {\r\n        if (_fullLiquidation) {\r\n            // for full liquidation, there would be some bad debt to redistribute\r\n            _incentiveColl = collateral.getPooledEthByShares(_totalColToSend);\r\n            uint256 _debtToRepay = (_incentiveColl * _price) / LICR;\r\n            debtToRedistribute = _debtToRepay < _totalDebtToBurn\r\n                ? _totalDebtToBurn - _debtToRepay\r\n                : 0;\r\n        } else {\r\n            // for partial liquidation, new ICR would deteriorate\r\n            // since we give more incentive (103%) than current _ICR allowed\r\n            // See the line below\r\n            _incentiveColl = (_totalDebtToBurn * LICR) / _price;\r\n        }\r\n    }\r\n    cappedColPortion = collateral.getSharesByPooledEth(_incentiveColl);\r\n    cappedColPortion = cappedColPortion < _totalColToSend ? cappedColPortion : _totalColToSend;\r\n    collSurplus = (cappedColPortion == _totalColToSend) ? 0 : _totalColToSend - cappedColPortion;\r\n}\r\n```\r\n\r\nThere is a minimal debt/collatertal requirement in `partiallyLiquidate()`, that forms a boundary condition for the strategy, i.e. one has to leave enough debt at CDP to satisfy `MIN_NET_COLL` based condition:\r\n\r\n```solidity\r\nfunction _requirePartialLiqDebtSize(\r\n    uint256 _partialDebt,\r\n    uint256 _entireDebt,\r\n    uint256 _price\r\n) internal view {\r\n    require(\r\n        // See the line below\r\n        (_partialDebt + _convertDebtDenominationToBtc(MIN_NET_COLL, _price)) <= _entireDebt,\r\n        \"LiquidationLibrary: Partial debt liquidated must be less than total debt\"\r\n    );\r\n}\r\n```\r\n\r\nThe correspondence between liquidator reward obtainable on full liquidation and the profit from keeping bad debt undistributed and ICRs being higher depends on CDP sizes and given big enough CDPs liquidator reward can not matter that much and be forfeited until the end. I.e. risk of losing it if someone else performs full liquidation, if liquidations are performed non-atomically, can be small compared to indirect profit obtainable from keeping bad debt intact.\r\n\r\nImpact: similarly liquidation incentives will be maximized in excess of protocol logic and actual pool state, not only due to good ones being liquidated first, but also due to bad ones being liquidated only partially.\r\n\r\nPer medium likelihood and impact setting the severity to be medium.\r\n\r\n**Recommendation:** It looks like requiring that CDP being liquidated has to be the worst one is needed, as otherwise there be a hidden bad debt part remaining.\r\n\r\n**BadgerDAO:** Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1749081968",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/43#issuecomment-1749081968",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/43",
    "id": 1749081968,
    "node_id": "IC_kwDOKBuOEs5oQN9w",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/5/2023",
    "updated_at": "2023-10-05T14:58:46Z",
    "author_association": "COLLABORATOR",
    "body": "Has been a while but I remember modelling Partial Liquidations / 3% fixed premium bad debt\r\n\r\nhttps://github.com/GalloDaSballo/Cdp-Demo/blob/main/scripts/simple_debt_reabsorption.py\r\n\r\nhttps://github.com/GalloDaSballo/Cdp-Demo/blob/main/scripts/insolvency_cascade.py",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1749081968/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1749161068",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/43#issuecomment-1749161068",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/43",
    "id": 1749161068,
    "node_id": "IC_kwDOKBuOEs5oQhRs",
    "user": {
     "login": "rayeaster",
     "id": 1487283,
     "node_id": "MDQ6VXNlcjE0ODcyODM=",
     "avatar_url": "https://avatars.githubusercontent.com/u/1487283?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/rayeaster",
     "html_url": "https://github.com/rayeaster",
     "followers_url": "https://api.github.com/users/rayeaster/followers",
     "following_url": "https://api.github.com/users/rayeaster/following{/other_user}",
     "gists_url": "https://api.github.com/users/rayeaster/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/rayeaster/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/rayeaster/subscriptions",
     "organizations_url": "https://api.github.com/users/rayeaster/orgs",
     "repos_url": "https://api.github.com/users/rayeaster/repos",
     "events_url": "https://api.github.com/users/rayeaster/events{/privacy}",
     "received_events_url": "https://api.github.com/users/rayeaster/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/5/2023",
    "updated_at": "2023-10-06T05:47:27Z",
    "author_association": "COLLABORATOR",
    "body": "IMO partial liquidation is designed to target \"BIG\" CDP. \r\n\r\nConsidering the liquidation itself is highly competitive in DeFi, if the CDP is big enough then it means the incentive should be also quite attractive for potential liquidators: from MCR(`110%`) all the way down to LICR(`103%`). It could be a really hard choice for reasonable liquidators to just wait until last minute to bear the risk losing incentive all (others might liquidate first).\r\n\r\nIf the ICR already goes down below LICR(`103%`), it doesn't matter now if it is a full liquidation or partial liquidation, the incentive is always 3%. Unless the liquidator could guarantee it will win the competition of liquidation on other CDPs, otherwise the best strategy might be trying to extract the most incentive it could with current liquidation, i.e., full liquidation is a better choice than partial liquidation in terms of total incentive size. \"Seize the day(CDP)\"\r\n\r\nFor the suggestion of \"CDP being liquidated has to be the worst one is needed\", my two cents is here https://github.com/cantinasec/review-badgerdao/issues/42#issuecomment-1750010805 ",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1749161068/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752111663",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/43#issuecomment-1752111663",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/43",
    "id": 1752111663,
    "node_id": "IC_kwDOKBuOEs5obxov",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/8/2023",
    "updated_at": "2023-10-08T17:27:00Z",
    "author_association": "COLLABORATOR",
    "body": "I don't believe that bad debt can be influnced by whether you perform a partial or a full liquidation, barring some rounding\r\n\r\nBased on the CR of the CDP, and a 3% premium\r\n\r\nColl and Debt will be burned at 3% discount until all Coll is expired\r\n\r\nMeaning the bad debt should be (formula for sure wrong due to compounding)\r\nThe 3% of the collRedeemed + the remaining debt that had no coll left\r\n\r\n",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752111663/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752116324",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/43#issuecomment-1752116324",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/43",
    "id": 1752116324,
    "node_id": "IC_kwDOKBuOEs5obyxk",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/8/2023",
    "updated_at": "2023-10-08T17:49:53Z",
    "author_association": "COLLABORATOR",
    "body": "```python\r\nSimulate Total Liquidation with Bad debt\r\nColl is always 100\r\nNo price means 1 coll = 1 debt for price\r\n\r\n\r\n\r\nDEBT 100.0\r\ncr 100.0\r\nDEBT 100.0\r\nCOLL 100\r\nDEBT 2.9126213592233086\r\n\r\n\r\n\r\nDEBT 111.11111111111111\r\ncr 90.0\r\nDEBT 111.11111111111111\r\nCOLL 100\r\nDEBT 14.023732470334423\r\n\r\n\r\n\r\nDEBT 125.0\r\ncr 80.0\r\nDEBT 125.0\r\nCOLL 100\r\nDEBT 27.91262135922331\r\n\r\n\r\n\r\nDEBT 142.85714285714286\r\ncr 70.0\r\nDEBT 142.85714285714286\r\nCOLL 100\r\nDEBT 45.76976421636617\r\n```",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752116324/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752116384",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/43#issuecomment-1752116384",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/43",
    "id": 1752116384,
    "node_id": "IC_kwDOKBuOEs5obyyg",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/8/2023",
    "updated_at": "2023-10-08T17:50:13Z",
    "author_association": "COLLABORATOR",
    "body": "```python \r\nSimulate Partial Liquidation with Bad debt\r\nColl is always 100\r\nNo price means 1 coll = 1 debt for price\r\n\r\n\r\n\r\nDEBT 100.0\r\ncr 100.0\r\nDEBT 100.0\r\nCOLL 100\r\nDEBT 90.29126213592232\r\nCOLL 90.0\r\nDEBT 81.55339805825243\r\nCOLL 81.0\r\nDEBT 73.68932038834951\r\nCOLL 72.9\r\nDEBT 66.6116504854369\r\nCOLL 65.61\r\nDEBT 60.24174757281554\r\nCOLL 59.049\r\nDEBT 54.508834951456315\r\nCOLL 53.1441\r\nDEBT 49.34921359223301\r\nCOLL 47.82969\r\nDEBT 44.70555436893204\r\nCOLL 43.046721\r\nDEBT 40.526261067961165\r\nCOLL 38.7420489\r\nDEBT 36.76489709708738\r\nCOLL 34.86784401\r\nDEBT 33.37966952330097\r\nCOLL 31.381059608999998\r\nDEBT 30.3329647068932\r\nCOLL 28.2429536481\r\nDEBT 27.59093037212621\r\nCOLL 25.41865828329\r\nDEBT 25.123099470835918\r\nCOLL 22.876792454961\r\nDEBT 22.902051659674655\r\nCOLL 20.589113209464898\r\nDEBT 20.903108629629518\r\nCOLL 18.53020188851841\r\nDEBT 19.104059902588897\r\nCOLL 16.67718169966657\r\nDEBT 17.484916048252337\r\nCOLL 15.009463529699913\r\nDEBT 16.027686579349435\r\nCOLL 13.50851717672992\r\nDEBT 14.716180057336821\r\nCOLL 12.157665459056929\r\nDEBT 13.535824187525469\r\nCOLL 10.941898913151237\r\nDEBT 12.473503904695251\r\nCOLL 9.847709021836113\r\nDEBT 11.517415650148056\r\nCOLL 8.862938119652503\r\nDEBT 10.65693622105558\r\nCOLL 7.976644307687252\r\nDEBT 9.88250473487235\r\nCOLL 7.178979876918527\r\nDEBT 9.185516397307445\r\nCOLL 6.461081889226675\r\nDEBT 8.55822689349903\r\nCOLL 5.814973700304007\r\nDEBT 7.993666340071457\r\nCOLL 5.233476330273606\r\nDEBT 7.485561841986641\r\nCOLL 4.710128697246246\r\nDEBT 7.028267793710307\r\nCOLL 4.239115827521621\r\nDEBT 6.616703150261606\r\nCOLL 3.815204244769459\r\nDEBT 6.246294971157775\r\nCOLL 3.4336838202925133\r\nDEBT 5.912927609964328\r\nCOLL 3.090315438263262\r\nDEBT 5.612896984890225\r\nCOLL 2.781283894436936\r\nDEBT 5.342869422323532\r\nCOLL 2.5031555049932424\r\nDEBT 5.099844616013509\r\nCOLL 2.2528399544939184\r\nDEBT 4.8811222903344875\r\nCOLL 2.0275559590445265\r\nDEBT 4.684272197223368\r\n\r\n\r\n\r\nDEBT 111.11111111111111\r\ncr 90.0\r\nDEBT 111.11111111111111\r\nCOLL 100\r\nDEBT 101.40237324703344\r\nCOLL 90.0\r\nDEBT 92.66450916936354\r\nCOLL 81.0\r\nDEBT 84.80043149946063\r\nCOLL 72.9\r\nDEBT 77.72276159654801\r\nCOLL 65.61\r\nDEBT 71.35285868392666\r\nCOLL 59.049\r\nDEBT 65.61994606256744\r\nCOLL 53.1441\r\nDEBT 60.460324703344135\r\nCOLL 47.82969\r\nDEBT 55.81666548004316\r\nCOLL 43.046721\r\nDEBT 51.63737217907229\r\nCOLL 38.7420489\r\nDEBT 47.8760082081985\r\nCOLL 34.86784401\r\nDEBT 44.49078063441209\r\nCOLL 31.381059608999998\r\nDEBT 41.44407581800432\r\nCOLL 28.2429536481\r\nDEBT 38.70204148323733\r\nCOLL 25.41865828329\r\nDEBT 36.23421058194704\r\nCOLL 22.876792454961\r\nDEBT 34.013162770785776\r\nCOLL 20.589113209464898\r\nDEBT 32.01421974074064\r\nCOLL 18.53020188851841\r\nDEBT 30.215171013700022\r\nCOLL 16.67718169966657\r\nDEBT 28.596027159363462\r\nCOLL 15.009463529699913\r\nDEBT 27.138797690460557\r\nCOLL 13.50851717672992\r\nDEBT 25.827291168447942\r\nCOLL 12.157665459056929\r\nDEBT 24.646935298636592\r\nCOLL 10.941898913151237\r\nDEBT 23.584615015806374\r\nCOLL 9.847709021836113\r\nDEBT 22.628526761259177\r\nCOLL 8.862938119652503\r\nDEBT 21.768047332166702\r\nCOLL 7.976644307687252\r\nDEBT 20.993615845983474\r\nCOLL 7.178979876918527\r\nDEBT 20.296627508418567\r\nCOLL 6.461081889226675\r\nDEBT 19.66933800461015\r\nCOLL 5.814973700304007\r\nDEBT 19.104777451182578\r\nCOLL 5.233476330273606\r\nDEBT 18.596672953097762\r\nCOLL 4.710128697246246\r\nDEBT 18.139378904821427\r\nCOLL 4.239115827521621\r\nDEBT 17.727814261372725\r\nCOLL 3.815204244769459\r\nDEBT 17.357406082268895\r\nCOLL 3.4336838202925133\r\nDEBT 17.024038721075446\r\nCOLL 3.090315438263262\r\nDEBT 16.72400809600134\r\nCOLL 2.781283894436936\r\nDEBT 16.45398053343465\r\nCOLL 2.5031555049932424\r\nDEBT 16.210955727124624\r\nCOLL 2.2528399544939184\r\nDEBT 15.992233401445603\r\nCOLL 2.0275559590445265\r\nDEBT 15.795383308334484\r\n\r\n\r\n\r\nDEBT 125.0\r\ncr 80.0\r\nDEBT 125.0\r\nCOLL 100\r\nDEBT 115.29126213592232\r\nCOLL 90.0\r\nDEBT 106.55339805825243\r\nCOLL 81.0\r\nDEBT 98.68932038834951\r\nCOLL 72.9\r\nDEBT 91.6116504854369\r\nCOLL 65.61\r\nDEBT 85.24174757281554\r\nCOLL 59.049\r\nDEBT 79.50883495145632\r\nCOLL 53.1441\r\nDEBT 74.34921359223301\r\nCOLL 47.82969\r\nDEBT 69.70555436893204\r\nCOLL 43.046721\r\nDEBT 65.52626106796117\r\nCOLL 38.7420489\r\nDEBT 61.764897097087385\r\nCOLL 34.86784401\r\nDEBT 58.379669523300976\r\nCOLL 31.381059608999998\r\nDEBT 55.33296470689321\r\nCOLL 28.2429536481\r\nDEBT 52.590930372126216\r\nCOLL 25.41865828329\r\nDEBT 50.123099470835925\r\nCOLL 22.876792454961\r\nDEBT 47.90205165967466\r\nCOLL 20.589113209464898\r\nDEBT 45.90310862962953\r\nCOLL 18.53020188851841\r\nDEBT 44.10405990258891\r\nCOLL 16.67718169966657\r\nDEBT 42.484916048252344\r\nCOLL 15.009463529699913\r\nDEBT 41.02768657934944\r\nCOLL 13.50851717672992\r\nDEBT 39.71618005733683\r\nCOLL 12.157665459056929\r\nDEBT 38.53582418752548\r\nCOLL 10.941898913151237\r\nDEBT 37.473503904695264\r\nCOLL 9.847709021836113\r\nDEBT 36.51741565014807\r\nCOLL 8.862938119652503\r\nDEBT 35.65693622105559\r\nCOLL 7.976644307687252\r\nDEBT 34.88250473487236\r\nCOLL 7.178979876918527\r\nDEBT 34.18551639730746\r\nCOLL 6.461081889226675\r\nDEBT 33.55822689349905\r\nCOLL 5.814973700304007\r\nDEBT 32.99366634007147\r\nCOLL 5.233476330273606\r\nDEBT 32.48556184198665\r\nCOLL 4.710128697246246\r\nDEBT 32.02826779371032\r\nCOLL 4.239115827521621\r\nDEBT 31.616703150261618\r\nCOLL 3.815204244769459\r\nDEBT 31.246294971157788\r\nCOLL 3.4336838202925133\r\nDEBT 30.91292760996434\r\nCOLL 3.090315438263262\r\nDEBT 30.612896984890234\r\nCOLL 2.781283894436936\r\nDEBT 30.342869422323542\r\nCOLL 2.5031555049932424\r\nDEBT 30.099844616013517\r\nCOLL 2.2528399544939184\r\nDEBT 29.881122290334496\r\nCOLL 2.0275559590445265\r\nDEBT 29.684272197223375\r\n\r\n\r\n\r\nDEBT 142.85714285714286\r\ncr 70.0\r\nDEBT 142.85714285714286\r\nCOLL 100\r\nDEBT 133.14840499306518\r\nCOLL 90.0\r\nDEBT 124.41054091539529\r\nCOLL 81.0\r\nDEBT 116.54646324549238\r\nCOLL 72.9\r\nDEBT 109.46879334257976\r\nCOLL 65.61\r\nDEBT 103.0988904299584\r\nCOLL 59.049\r\nDEBT 97.36597780859918\r\nCOLL 53.1441\r\nDEBT 92.20635644937587\r\nCOLL 47.82969\r\nDEBT 87.5626972260749\r\nCOLL 43.046721\r\nDEBT 83.38340392510403\r\nCOLL 38.7420489\r\nDEBT 79.62203995423025\r\nCOLL 34.86784401\r\nDEBT 76.23681238044384\r\nCOLL 31.381059608999998\r\nDEBT 73.19010756403607\r\nCOLL 28.2429536481\r\nDEBT 70.44807322926908\r\nCOLL 25.41865828329\r\nDEBT 67.9802423279788\r\nCOLL 22.876792454961\r\nDEBT 65.75919451681754\r\nCOLL 20.589113209464898\r\nDEBT 63.76025148677241\r\nCOLL 18.53020188851841\r\nDEBT 61.96120275973179\r\nCOLL 16.67718169966657\r\nDEBT 60.342058905395234\r\nCOLL 15.009463529699913\r\nDEBT 58.88482943649233\r\nCOLL 13.50851717672992\r\nDEBT 57.57332291447972\r\nCOLL 12.157665459056929\r\nDEBT 56.39296704466837\r\nCOLL 10.941898913151237\r\nDEBT 55.33064676183815\r\nCOLL 9.847709021836113\r\nDEBT 54.374558507290956\r\nCOLL 8.862938119652503\r\nDEBT 53.51407907819848\r\nCOLL 7.976644307687252\r\nDEBT 52.73964759201525\r\nCOLL 7.178979876918527\r\nDEBT 52.04265925445035\r\nCOLL 6.461081889226675\r\nDEBT 51.415369750641936\r\nCOLL 5.814973700304007\r\nDEBT 50.85080919721436\r\nCOLL 5.233476330273606\r\nDEBT 50.34270469912954\r\nCOLL 4.710128697246246\r\nDEBT 49.88541065085321\r\nCOLL 4.239115827521621\r\nDEBT 49.47384600740451\r\nCOLL 3.815204244769459\r\nDEBT 49.10343782830068\r\nCOLL 3.4336838202925133\r\nDEBT 48.77007046710723\r\nCOLL 3.090315438263262\r\nDEBT 48.47003984203313\r\nCOLL 2.781283894436936\r\nDEBT 48.200012279466435\r\nCOLL 2.5031555049932424\r\nDEBT 47.95698747315641\r\nCOLL 2.2528399544939184\r\nDEBT 47.738265147477385\r\nCOLL 2.0275559590445265\r\nDEBT 47.54141505436627\r\n```",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752116384/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752116672",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/43#issuecomment-1752116672",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/43",
    "id": 1752116672,
    "node_id": "IC_kwDOKBuOEs5oby3A",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/8/2023",
    "updated_at": "2023-10-08T17:51:31Z",
    "author_association": "COLLABORATOR",
    "body": "Source \r\n\r\n```python\r\n\r\nMAX_BPS = 10_000\r\n\r\ndef cr(debt, coll):\r\n    return coll / debt * 100\r\n\r\ndef getDebtByCr(coll, cr_bps):\r\n   return coll / cr_bps * MAX_BPS\r\n\r\nLICR = 103_00\r\n\r\n\r\ndef max(a, b):\r\n   if(a > b):\r\n      return a\r\n   return b\r\n\r\ndef min(a, b):\r\n   if(a > b):\r\n      return b\r\n   return a\r\n\r\ndef full_liq(COLL):\r\n  ## burn all\r\n  return [COLL, COLL / LICR * MAX_BPS]\r\n\r\ndef partial_liq(COLL, percent):\r\n   return [COLL * percent / 100, COLL * percent / 100 / LICR * MAX_BPS]\r\n\r\ndef loop_full(cr_bps):\r\n  COLL = 100\r\n  DEBT = getDebtByCr(COLL, cr_bps)\r\n  print(\"DEBT\", DEBT)\r\n  print(\"cr\", cr(DEBT, COLL))\r\n\r\n  ## Liquidate Partially based on premium\r\n  while(COLL > 2):\r\n     [sub_coll, sub_debt] = partial_liq(COLL, 10)\r\n    #  [sub_coll, sub_debt] = full_liq(COLL)\r\n     print(\"DEBT\", DEBT)\r\n     print(\"COLL\", COLL)\r\n     DEBT -= sub_debt\r\n     COLL -= sub_coll\r\n  \r\n  print(\"DEBT\", DEBT)\r\n     \r\n\r\n\r\n\r\nCRS = [\r\n   100_00,\r\n   90_00,\r\n   80_00,\r\n   70_00\r\n]\r\n\r\ndef main():\r\n   print(\"Simulate Total Liquidation with Bad debt\")\r\n   print(\"Coll is always 100\")\r\n   print(\"No price means 1 coll = 1 debt for price\")\r\n   for cr in CRS:\r\n    print(\"\")\r\n    print(\"\")\r\n    print(\"\")\r\n    loop_full(cr)\r\n  \r\n\r\n   \r\n\r\n\r\n\r\nmain()\r\n\r\n```",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752116672/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752438375",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/43#issuecomment-1752438375",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/43",
    "id": 1752438375,
    "node_id": "IC_kwDOKBuOEs5odBZn",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/9/2023",
    "updated_at": "2023-10-09T06:56:55Z",
    "author_association": "COLLABORATOR",
    "body": "This adapted script shows that there is no tangible difference for Partial Liquidations and Full Liquidations:\r\n```python\r\n\r\nMAX_BPS = 10_000\r\n\r\ndef cr(debt, coll):\r\n    return coll / debt * 100\r\n\r\ndef getDebtByCr(coll, cr_bps):\r\n   return coll / cr_bps * MAX_BPS\r\n\r\nLICR = 103_00\r\n\r\n\r\ndef max(a, b):\r\n   if(a > b):\r\n      return a\r\n   return b\r\n\r\ndef min(a, b):\r\n   if(a > b):\r\n      return b\r\n   return a\r\n\r\ndef full_liq(COLL):\r\n  ## burn all\r\n  return [COLL, COLL / LICR * MAX_BPS]\r\n\r\ndef partial_liq(COLL, percent):\r\n   return [COLL * percent / 100, COLL * percent / 100 / LICR * MAX_BPS]\r\n\r\ndef loop_full(cr_bps):\r\n  COLL = 100\r\n  DEBT = getDebtByCr(COLL, cr_bps)\r\n\r\n  ## Liquidate Partially based on premium\r\n  while(COLL > 2):\r\n      print(\"DEBT\", DEBT)\r\n      print(\"COLL\", COLL)\r\n      # [sub_coll, sub_debt] = partial_liq(COLL, 10)\r\n      [sub_coll, sub_debt] = full_liq(COLL)\r\n      print(\"DEBT\", DEBT)\r\n      print(\"COLL\", COLL)\r\n      DEBT -= sub_debt\r\n      COLL -= sub_coll\r\n\r\n      if(COLL > 0):\r\n         [sub_coll, sub_debt] = full_liq(COLL)\r\n      \r\n         DEBT -= sub_debt\r\n         COLL -= sub_coll\r\n  print(\"DEBT\", DEBT)\r\n     \r\n\r\n\r\n\r\nCRS = [\r\n   100_00,\r\n   90_00,\r\n   80_00,\r\n   70_00\r\n]\r\n\r\ndef main():\r\n   print(\"Simulate Total Liquidation with Bad debt\")\r\n   print(\"Coll is always 100\")\r\n   print(\"No price means 1 coll = 1 debt for price\")\r\n   for cr in CRS:\r\n    print(\"\")\r\n    print(\"\")\r\n    print(\"\")\r\n    loop_full(cr)\r\n  \r\n\r\n   \r\n\r\n\r\n\r\nmain()\r\n\r\n```\r\n\r\nThe finding is valid in saying that `not triggering a redistribution` is profitable to the liquidator, basically a strategy to apply #44 \r\n\r\nStill looking into that one\r\n",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752438375/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/43/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#43"
 },
 {
  "id": 1928260320,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/42",
  "title": "Liquidator can receive outsized incentives by aiming the best liquidable CDPs first",
  "created_by": "dmitriia",
  "created_at": "10/5/2023",
  "body": "**Context:** [LiquidationLibrary.sol#L505-L507](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.5/packages/contracts/contracts/LiquidationLibrary.sol#L505-L507)\r\n\r\n**Description:** While the issue not being limited to batch processing and is related to the overall protocol design, we first illustrate the batch liquidations case by showing that there stale ICRs can be used which enables the extraction of additional collateral incentives. LiquidationLibrary's `batchLiquidateCdps()` runs `_getTotalFromBatchLiquidate_RecoveryMode()` and `_getTotalsFromBatchLiquidate_NormalMode()` that process CDPs in an order supplied by liquidator. Those CDPs are synchronized with the current accrued fee split and bad debt values, while bad debt originated from the batch liquidations themself is not accounted for, i.e. after a liquidation resulted in creation of some bad debt, having `singleLiquidation.debtToRedistribute > 0`, all the ICR calculated for the subsequent CDPs using old accrual values become stale, i.e. somewhat oversized.\r\n\r\nWhile TCR is tracked by updating `totalDebtToOffset`, `totalCollToSendToLiquidator`, `totalCollSurplus`, assuming that bad debt to be redistributed and so shouldn't be accounted for, the ICR of each CDP doesn't account for the fact that there is bad debt queued to be added to this CDP's debt. This is not equivalent to sequential liquidation of the same ids and allows for extracting of the additional collateral compensation by a liquidator as bigger ICR allows for bigger incentives portion than they can be provided with according to the protocol rules and given the actual state of the pool.\r\n\r\nI.e. bad debt accounting happens after all the liquidations, so late CDPs are appear healthier than they are and provide liquidator more reward than they should, making the total liquidator reward bigger than it's due per protocol logic as part of the debt is hidden when reward is being calculated. In other words liquidation of many CDPs with bad debt artificially ignores the bad debt from within the batch, allowing for earning extra incentives compared to the sequential liquidation of the same ids that updates the state fully between each step.\r\n\r\nBad debt created is accumulated during subsequent liquidations in the totals structure:\r\n\r\n```solidity\r\nfunction _getLiquidationValuesRecoveryMode(\r\n    // ...\r\n) internal {\r\n    LiquidationRecoveryModeLocals memory _recState = LiquidationRecoveryModeLocals(\r\n        // ...\r\n    );\r\n\r\n    LiquidationRecoveryModeLocals\r\n        memory _outputState = _liquidateIndividualCdpSetupCDPInRecoveryMode(_recState);\r\n\r\n    singleLiquidation.entireCdpDebt = _outputState.totalDebtToBurn;\r\n    singleLiquidation.debtToOffset = _outputState.totalDebtToBurn;\r\n    singleLiquidation.totalCollToSendToLiquidator = _outputState.totalColToSend;\r\n    singleLiquidation.collSurplus = _outputState.totalColSurplus;\r\n    // See the line below\r\n    singleLiquidation.debtToRedistribute = _outputState.totalDebtToRedistribute;\r\n    singleLiquidation.collReward = _outputState.totalColReward;\r\n}\r\n```\r\n\r\n```solidity\r\nfunction _addLiquidationValuesToTotals(\r\n    LiquidationTotals memory oldTotals,\r\n    LiquidationValues memory singleLiquidation\r\n) internal pure returns (LiquidationTotals memory newTotals) {\r\n    // Tally all the values with their respective running totals\r\n    newTotals.totalDebtInSequence =\r\n        oldTotals.totalDebtInSequence +\r\n        singleLiquidation.entireCdpDebt;\r\n    newTotals.totalDebtToOffset = oldTotals.totalDebtToOffset + singleLiquidation.debtToOffset;\r\n    newTotals.totalCollToSendToLiquidator =\r\n        oldTotals.totalCollToSendToLiquidator +\r\n        singleLiquidation.totalCollToSendToLiquidator;\r\n    // See the line below\r\n    newTotals.totalDebtToRedistribute =\r\n        oldTotals.totalDebtToRedistribute +\r\n        singleLiquidation.debtToRedistribute;\r\n    // ...\r\n```\r\n\r\n```solidity\r\n// Add liquidation values to their respective running totals\r\ntotals = _addLiquidationValuesToTotals(totals, singleLiquidation);\r\n```\r\n\r\nBut it is applied to the pool state only after all the liquidations come through, in `_finalizeLiquidation()`:\r\n\r\n```solidity\r\nfunction _finalizeLiquidation(\r\n    // ...\r\n) internal {\r\n    // update the staking and collateral snapshots\r\n    _updateSystemSnapshotsExcludeCollRemainder(totalColToSend);\r\n\r\n    emit Liquidation(totalDebtToBurn, totalColToSend, totalColReward);\r\n\r\n    _syncGracePeriodForGivenValues(\r\n        systemInitialCollShares - totalColToSend - totalColSurplus,\r\n        systemInitialDebt - totalDebtToBurn,\r\n        price\r\n    );\r\n\r\n    // redistribute debt if any\r\n    if (totalDebtToRedistribute > 0) {\r\n        // See the line below\r\n        _redistributeDebt(totalDebtToRedistribute);\r\n    }\r\n    // ...\r\n```\r\n\r\nSo liquidator incentive collateral can be overstated, being dependent linearly on stale ICR in the `_ICR > LICR` case, which appears bigger than it is as there is already generated, but still undistributed bad debt:\r\n\r\n```solidity\r\nfunction _calculateSurplusAndCap(\r\n    uint256 _ICR,\r\n    uint256 _price,\r\n    uint256 _totalDebtToBurn,\r\n    uint256 _totalColToSend,\r\n    bool _fullLiquidation\r\n)\r\n    private\r\n    view\r\n    returns (uint256 cappedColPortion, uint256 collSurplus, uint256 debtToRedistribute)\r\n{\r\n    // Calculate liquidation incentive for liquidator:\r\n    // If ICR is less than 103%: give away 103% worth of collateral to liquidator, i.e., repaidDebt * 103% / price\r\n    // If ICR is more than 103%: give away min(ICR, 110%) worth of collateral to liquidator, i.e., repaidDebt * min(ICR, 110%) / price\r\n    uint256 _incentiveColl;\r\n    if (_ICR > LICR) {\r\n        // See the line below\r\n        _incentiveColl = (_totalDebtToBurn * (_ICR > MCR ? MCR : _ICR)) / _price;  // @audit _ICR is actually lower and that much incentive can't be given away\r\n    } else {\r\n        if (_fullLiquidation) {\r\n            // for full liquidation, there would be some bad debt to redistribute\r\n            _incentiveColl = collateral.getPooledEthByShares(_totalColToSend);\r\n            uint256 _debtToRepay = (_incentiveColl * _price) / LICR;\r\n            debtToRedistribute = _debtToRepay < _totalDebtToBurn\r\n                ? _totalDebtToBurn - _debtToRepay\r\n                : 0;\r\n        } else {\r\n            // for partial liquidation, new ICR would deteriorate\r\n            // since we give more incentive (103%) than current _ICR allowed\r\n            _incentiveColl = (_totalDebtToBurn * LICR) / _price;\r\n        }\r\n    }\r\n    cappedColPortion = collateral.getSharesByPooledEth(_incentiveColl);\r\n    cappedColPortion = cappedColPortion < _totalColToSend ? cappedColPortion : _totalColToSend;\r\n    collSurplus = (cappedColPortion == _totalColToSend) ? 0 : _totalColToSend - cappedColPortion;\r\n}\r\n```\r\n\r\nImpact: liquidators can obtain extra collateral incentives with regard to the actual state of the pool and the stated `max(103%, min(ICR, 110%))` formula. In order for this to happen there should be CDPs with `ICR < LICR`, so bad debt can be generated, and also CDPs with `LICR < ICR < MCR`, so there is a collateral incentive obtainable linearly to the ICR of the CDP liquidated. Grace period introduction somewhat increases the odds of reaching this situation as during it some CDPs with `MCR < ICR < TCR` can become ones with `ICR < MCR`, as market quickly drops, for example, and it will generally be more CDPs available for liquidation during shorter period.\r\n\r\nPer high total likelihood and low to medium impact setting the severity to be medium.\r\n\r\n**Recommendation:** First, consider redistributing debt after each liquidation, e.g.:\r\n\r\n```diff\r\n  function _getTotalFromBatchLiquidate_RecoveryMode(\r\n        // ...\r\n  ) internal returns (LiquidationTotals memory totals) {\r\n        // ...\r\n      for (vars.i = _start; ; ) {\r\n          vars.cdpId = _cdpArray[vars.i];\r\n          // only for active cdps\r\n          if (vars.cdpId != bytes32(0) && Cdps[vars.cdpId].status == Status.active) {\r\n              vars.ICR = getICR(vars.cdpId, _price);\r\n\r\n              if (\r\n                  !vars.backToNormalMode &&\r\n                  (vars.ICR < MCR || canLiquidateRecoveryMode(vars.ICR, _TCR))\r\n              ) {\r\n                  vars.price = _price;\r\n                  _syncAccounting(vars.cdpId);\r\n                  _getLiquidationValuesRecoveryMode(\r\n                      _price,\r\n                      vars.entireSystemDebt,\r\n                      vars.entireSystemColl,\r\n                      vars,\r\n                      singleLiquidation,\r\n                      sequenceLiq\r\n                  );\r\n+                 if (singleLiquidation.debtToRedistribute > 0) {\r\n+                     _redistributeDebt(singleLiquidation.debtToRedistribute);\r\n+                 }\r\n                  // Update aggregate trackers\r\n                  // ...\r\n                  vars.backToNormalMode = _TCR < CCR ? false : true;\r\n                  _liqFlags[vars.i] = true;\r\n                  _liqCnt += 1;\r\n              } else if (vars.backToNormalMode && vars.ICR < MCR) {\r\n                  _syncAccounting(vars.cdpId);\r\n                  _getLiquidationValuesNormalMode(\r\n                      _price,\r\n                      _TCR,\r\n                      vars,\r\n                      singleLiquidation,\r\n                      sequenceLiq\r\n                  );\r\n+                 if (singleLiquidation.debtToRedistribute > 0) {\r\n+                     _redistributeDebt(singleLiquidation.debtToRedistribute);\r\n+                 }\r\n                  // Add liquidation values to their respective running totals\r\n                  totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\r\n                  _liqFlags[vars.i] = true;\r\n                  _liqCnt += 1;\r\n              }\r\n              // ...\r\n```\r\n\r\n```diff\r\n  function _getTotalsFromBatchLiquidate_NormalMode(\r\n      // ...\r\n  ) internal returns (LiquidationTotals memory totals) {\r\n      // ...\r\n      for (vars.i = _start; ; ) {\r\n          vars.cdpId = _cdpArray[vars.i];\r\n          // only for active cdps\r\n          if (vars.cdpId != bytes32(0) && Cdps[vars.cdpId].status == Status.active) {\r\n              vars.ICR = getICR(vars.cdpId, _price);\r\n\r\n              if (vars.ICR < MCR) {\r\n                  _syncAccounting(vars.cdpId);\r\n                  _getLiquidationValuesNormalMode(\r\n                      _price,\r\n                      _TCR,\r\n                      vars,\r\n                      singleLiquidation,\r\n                      sequenceLiq\r\n                  );\r\n+                 if (singleLiquidation.debtToRedistribute > 0) {\r\n+                     _redistributeDebt(singleLiquidation.debtToRedistribute);\r\n+                 }\r\n                  // Add liquidation values to their respective running totals\r\n                  totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\r\n                  _liqCnt += 1;\r\n              }\r\n          }\r\n          // ...\r\n```\r\n\r\n```diff\r\n  function _finalizeLiquidation(\r\n      // ...\r\n  ) internal {\r\n      // update the staking and collateral snapshots\r\n      _updateSystemSnapshotsExcludeCollRemainder(totalColToSend);\r\n\r\n      emit Liquidation(totalDebtToBurn, totalColToSend, totalColReward);\r\n\r\n      _syncGracePeriodForGivenValues(\r\n          systemInitialCollShares - totalColToSend - totalColSurplus,\r\n          systemInitialDebt - totalDebtToBurn,\r\n          price\r\n      );\r\n\r\n-     // redistribute debt if any\r\n-     if (totalDebtToRedistribute > 0) {\r\n-         _redistributeDebt(totalDebtToRedistribute);\r\n-     }\r\n      // ...\r\n```\r\n\r\nIt doesn't seem to be enough as a liquidator can simply arrange ids in `_cdpArray` argument of `batchLiquidateCdps()` so that all the good ones come first and all the bad ones come last, so ICRs of good ones not being reduced by bad debt redistribution coming from the bad ones.\r\n\r\nThis can be controlled by introducing a rolling ICR metric and demanding that liquidator supply `_cdpArray` with increasing ICRs, e.g. (for _getTotalFromBatchLiquidate_RecoveryMode it's the same):\r\n\r\n```diff\r\n  function _getTotalsFromBatchLiquidate_NormalMode(\r\n        // ...\r\n  ) internal returns (LiquidationTotals memory totals) {\r\n        // ...\r\n+     uint256 lastICR;\r\n      for (vars.i = _start; ; ) {\r\n          vars.cdpId = _cdpArray[vars.i];\r\n          // only for active cdps\r\n          if (vars.cdpId != bytes32(0) && Cdps[vars.cdpId].status == Status.active) {\r\n              vars.ICR = getICR(vars.cdpId, _price);\r\n+             require(vars.ICR >= lastICR, \"LiquidationLibrary: ascending ICR order is required for CPDs\");\r\n+             lastICR = vars.ICR;\r\n              if (vars.ICR < MCR) {\r\n                   // ...\r\n              }\r\n          }\r\n          // ...\r\n```\r\n\r\nThis will not close the surface fully as a liquidator can still run a series of individual liquidations atomically in the same good first, bad last manner.\r\n\r\nAs a more complete approach in order to align design with incentives consider requiring that CDP being liquidated has to be the worst one, i.e. that `sortedCdps.getNext(liquidatedID) == sortedCdps.nonExistId()`. This will properly redistribute all the bad debt due and ensure that ICRs used for liquidator incentive calculations are not overstated.\r\n\r\n**BadgerDAO:** Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1748985426",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/42#issuecomment-1748985426",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/42",
    "id": 1748985426,
    "node_id": "IC_kwDOKBuOEs5oP2ZS",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/5/2023",
    "updated_at": "2023-10-05T14:11:48Z",
    "author_association": "COLLABORATOR",
    "body": "Let's model this further before writing a fix, also worth discussing with Liquity",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1748985426/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1749081207",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/42#issuecomment-1749081207",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/42",
    "id": 1749081207,
    "node_id": "IC_kwDOKBuOEs5oQNx3",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/5/2023",
    "updated_at": "2023-10-05T14:58:20Z",
    "author_association": "COLLABORATOR",
    "body": "Overall this is equivalent to saying that Current Liquidations are not Subject to Pending Bad Debt redistribution\r\n\r\nI believe the most egregious case is how Bad Debt Redistribution could be avoided via front-running and closing / reducing stake, this is a further example of such a case which favours the Liquidator and unfavours Stakers\r\n\r\nIn terms of the size and impact of the redistribution that is dependent on a few factors which we should further model:\r\n- Stake of Liquidatable CDPs (Stake % determine % of Bad Debt to receive)\r\n- Ratio of Bad Debt\r\n",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1749081207/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1750010805",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/42#issuecomment-1750010805",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/42",
    "id": 1750010805,
    "node_id": "IC_kwDOKBuOEs5oTwu1",
    "user": {
     "login": "rayeaster",
     "id": 1487283,
     "node_id": "MDQ6VXNlcjE0ODcyODM=",
     "avatar_url": "https://avatars.githubusercontent.com/u/1487283?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/rayeaster",
     "html_url": "https://github.com/rayeaster",
     "followers_url": "https://api.github.com/users/rayeaster/followers",
     "following_url": "https://api.github.com/users/rayeaster/following{/other_user}",
     "gists_url": "https://api.github.com/users/rayeaster/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/rayeaster/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/rayeaster/subscriptions",
     "organizations_url": "https://api.github.com/users/rayeaster/orgs",
     "repos_url": "https://api.github.com/users/rayeaster/repos",
     "events_url": "https://api.github.com/users/rayeaster/events{/privacy}",
     "received_events_url": "https://api.github.com/users/rayeaster/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/6/2023",
    "updated_at": "2023-10-06T05:36:20Z",
    "author_association": "COLLABORATOR",
    "body": "This looks like a liquidation ordering issue: \"Good\" (debt redistribution free) first, \"Bad\" (generate debt redistribution) later. \r\n\r\nEvery coin got two sides.\r\n\r\nIf we apply the suggestion of \"CDP being liquidated has to be the worst one\", it will remove the freedom for liquidators to choose CDPs, i.e., no flexibility and diversity in liquidation competition anymore. For example, if the \"worst\" one is a gigantic CDP, even with partial liquidation, it will still block the liquidations of other smaller risky CDPs. In a way, it might delay the recovery of the entire system to normal mode.\r\n\r\nI intend to agree with @dmitriia opinion that adding a ICR ordering check for batch liquidation and apply debt redistribution inside the loop for each \"bad\" liquidated CDP could be a valid mitigation.\r\n\r\n\"run a series of individual liquidations\" could cost liquidator more and increase uncertainty obviously \r\n\r\n\r\n",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1750010805/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1750185608",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/42#issuecomment-1750185608",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/42",
    "id": 1750185608,
    "node_id": "IC_kwDOKBuOEs5oUbaI",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/6/2023",
    "updated_at": "2023-10-06T08:24:57Z",
    "author_association": "COLLABORATOR",
    "body": "Let's model this first via the following:\r\n\r\n-> System at X% CR - (worst case IMO is 120% CR already insanely levered)\r\n-> Bad Debt % (e.g. 109% vs 100% vs 95% vs 80% CR on Underwater CDPs)\r\n-> Use Partial Liquidations with 3% premium, without redistribution\r\n-> Compute total bad debt\r\n-> Check Stake (since the bad debt is redistributed via stake)\r\n-> See impact on those liquidations\r\n\r\nAlso note that since we have 3% fixed premium, the marginal additional bad debt is already guaranteed to the rest of stakers, so this must be modelled further\r\n\r\nYou can fork some of my scripts here to get started:\r\nhttps://github.com/GalloDaSballo/Cdp-Demo/tree/main/scripts\r\n\r\nWill send something next week",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1750185608/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752112927",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/42#issuecomment-1752112927",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/42",
    "id": 1752112927,
    "node_id": "IC_kwDOKBuOEs5obx8f",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/8/2023",
    "updated_at": "2023-10-08T17:32:28Z",
    "author_association": "COLLABORATOR",
    "body": "Note on targeting CDPs, unless we enforce the sorting via the LL, then the recommendation above can be sidestepped by passing in one CDP at a time or a segment of the list that has lower risk",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752112927/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752475356",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/42#issuecomment-1752475356",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/42",
    "id": 1752475356,
    "node_id": "IC_kwDOKBuOEs5odKbc",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/9/2023",
    "updated_at": "2023-10-09T07:29:49Z",
    "author_association": "COLLABORATOR",
    "body": "Consideration 1:\r\nThe above doesn't apply to undercollateralized CDPs\r\nFor Undercollateralized CDPs, the Premium is fixed to 3%\r\n\r\nIf we simplify the system to Coll and Debt having the same price\r\n\r\nThen a underwater CDP has \r\nColl = 100\r\nDebt > 100\r\n\r\nFor these CDPs, a 3% premium is\r\nColl / 103 = Debt Repaid\r\nColl withdrawn = 100%\r\n\r\nIf we were to add more Bad Debt to such Cdps, the Bad Debt wouldn't attack profitability of the Liquidator, that Bad Debt is already going to be redistributed\r\n\r\nIn other words: The Marginal increase in Bad Debt for Underwater CDPs is already going to be socialized\r\n\r\nThis excludes the worst case scenario\r\n\r\nThinking through non-underwater CDPs and premium for them",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752475356/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752479063",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/42#issuecomment-1752479063",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/42",
    "id": 1752479063,
    "node_id": "IC_kwDOKBuOEs5odLVX",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/9/2023",
    "updated_at": "2023-10-09T07:32:47Z",
    "author_association": "COLLABORATOR",
    "body": "From discussion in 43 we know that partial liquidations are basically equivalent, this means I used full liquidations to model the math\r\n\r\nI think for maximum precision you'd need to do an integral for the proper math (liquidate CDP 1 -> Redistribute to Rest), but the below is a linear approximation in the excess\r\n\r\n\r\nLOGS: CRS (100, 80, 50) Deeply underwater\r\nSystem CR at 120\r\n\r\n```python\r\nBAD CR 100\r\n\r\n\r\ntotal_coll 300\r\ntotal_debt 250.0\r\nunderwater_coll 200\r\nunderwater_debt 200.0\r\n\r\nsub_coll 200\r\nsub_debt 194.1747572815534\r\n\r\nbad_debt_to_redistribute 5.825242718446589\r\nAs % of debt to liquidate 2.9126213592232943\r\nSkipped Debt 133.33333333333331\r\nSkipped Debt as % of debt to redistribute 22.88888888888894\r\nunderwater_debt 200.0\r\nunderwater_coll 200\r\ntotal_coll 300\r\nAs % coll 66.66666666666666\r\nAfter all\r\nnew_total_coll 100\r\nnew_total_debt 55.82524271844659\r\ncr of sys after 179.13043478260872\r\n\r\n\r\nBAD CR 80\r\n\r\n\r\ntotal_coll 180\r\ntotal_debt 150.0\r\nunderwater_coll 80\r\nunderwater_debt 100.0\r\n\r\nsub_coll 80\r\nsub_debt 77.66990291262135\r\n\r\nbad_debt_to_redistribute 22.330097087378647\r\nAs % of debt to liquidate 22.330097087378647\r\nSkipped Debt 44.44444444444444\r\nSkipped Debt as % of debt to redistribute 1.990338164251207\r\nunderwater_debt 100.0\r\nunderwater_coll 80\r\ntotal_coll 180\r\nAs % coll 44.44444444444444\r\nAfter all\r\nnew_total_coll 100\r\nnew_total_debt 72.33009708737865\r\ncr of sys after 138.25503355704697\r\n\r\n\r\nBAD CR 50\r\n\r\n\r\ntotal_coll 129\r\ntotal_debt 108.0\r\nunderwater_coll 29\r\nunderwater_debt 57.99999999999999\r\n\r\nsub_coll 29\r\nsub_debt 28.155339805825243\r\n\r\nbad_debt_to_redistribute 29.84466019417475\r\nAs % of debt to liquidate 51.45631067961165\r\nSkipped Debt 13.038759689922479\r\nSkipped Debt as % of debt to redistribute 0.43688752376773443\r\nunderwater_debt 57.99999999999999\r\nunderwater_coll 29\r\ntotal_coll 129\r\nAs % coll 22.48062015503876\r\nAfter all\r\nnew_total_coll 100\r\nnew_total_debt 79.84466019417476\r\ncr of sys after 125.2431906614786\r\n```\r\n\r\n\r\nCode\r\n\r\n```python\r\n## Bad Debt per Liquidation\r\n\r\n## Each subsequent would have a stake %\r\n\r\n## The Stake % is used to calculate the Debt Skipped by the Liquidator\r\n\r\n\r\n\r\ndef get_debt(coll, cr):\r\n    return coll / cr * 100\r\n\r\ndef get_cr(coll, debt):\r\n    return coll / debt * 100\r\n\r\n\r\n## Figure out the cost of the swap\r\nCOST_SWAP = 30 ## Either Pool, or Mint Fee\r\n\r\n\r\nSAFE_COLL = 100\r\nSAFE_CR = 200\r\nSAFE_DEBT = get_debt(SAFE_COLL, SAFE_CR)\r\n\r\nSIM_CR = 120 ## 120 CR of the whole system\r\n\r\n\r\ndef generate_debt_and_coll_scenario(underwater_cr, target_system_cr, safe_coll, safe_debt):\r\n    underwater_coll = 0\r\n    underwater_debt = 0\r\n\r\n    total_coll = safe_coll + underwater_coll\r\n    total_debt = safe_debt + underwater_debt\r\n\r\n    ## All of these are undercollateralized\r\n    while get_cr(total_coll, total_debt) > target_system_cr:\r\n        underwater_coll += 1\r\n        underwater_debt = get_debt(underwater_coll, underwater_cr)\r\n\r\n        total_coll = safe_coll + underwater_coll\r\n        total_debt = safe_debt + underwater_debt\r\n\r\n    return [\r\n        underwater_coll,\r\n        underwater_debt,\r\n        total_coll,\r\n        total_debt\r\n    ]\r\n\r\n    ## While the reality of chunking is slightly different\r\n    ## A theoretical chunking is 100% of Liquidatable Debt / Stake of the total debt (give by CR)\r\n    ## This is the absolute worst case, which is good to model worst impact\r\n\r\nLICR = 103\r\n\r\ndef full_liq(COLL):\r\n  ## burn all coll since we're capped on debt and not on coll\r\n  return [COLL, COLL / LICR * 100]\r\n\r\ndef loop(underwater_cr):\r\n\r\n  assert underwater_cr < 103 ## It's actually underwater\r\n\r\n  [\r\n        underwater_coll,\r\n        underwater_debt,\r\n        total_coll,\r\n        total_debt\r\n  ] = generate_debt_and_coll_scenario(underwater_cr, SIM_CR, SAFE_COLL, SAFE_DEBT)\r\n\r\n  print(\"\")\r\n  print(\"\")\r\n  print(\"total_coll\", total_coll)\r\n  print(\"total_debt\", total_debt)\r\n  print(\"underwater_coll\", underwater_coll)\r\n  print(\"underwater_debt\", underwater_debt)\r\n\r\n  [sub_coll, sub_debt] = full_liq(underwater_coll)\r\n\r\n  print(\"\")\r\n  print(\"sub_coll\", sub_coll)\r\n  print(\"sub_debt\", sub_debt)\r\n  print(\"\")\r\n\r\n  ## Now we check the bad debt\r\n  bad_debt_to_redistribute = underwater_debt - sub_debt\r\n  print(\"bad_debt_to_redistribute\", bad_debt_to_redistribute)\r\n  ## To Redistribute is the % of debt over all underwater\r\n  print(\"As % of debt to liquidate\", bad_debt_to_redistribute / underwater_debt * 100)\r\n\r\n  ## Skipped is the debt \r\n  skipped_stake_ratio = (underwater_coll / total_coll)\r\n  skipped_debt = underwater_debt * skipped_stake_ratio\r\n\r\n  ## How much did we skip?\r\n  print(\"Skipped Debt\", skipped_debt)\r\n  print(\"Skipped Debt as % of debt to redistribute\", skipped_debt / bad_debt_to_redistribute)\r\n\r\n  print(\"underwater_debt\", underwater_debt)\r\n  print(\"underwater_coll\", underwater_coll)\r\n  print(\"total_coll\", total_coll)\r\n  print(\"As % coll\", underwater_coll / total_coll * 100)\r\n\r\n  print(\"After all\")\r\n\r\n  new_total_coll = total_coll - sub_coll\r\n  new_total_debt = total_debt - sub_debt\r\n\r\n  print(\"new_total_coll\", new_total_coll)\r\n  print(\"new_total_debt\", new_total_debt)\r\n\r\n  print(\"cr of sys after\", get_cr(new_total_coll, new_total_debt))\r\n\r\n\r\n\r\nCRS = [\r\n   100,\r\n   80,\r\n   50\r\n]\r\ndef main():\r\n  for bad_cr in CRS:\r\n   print(\"\")\r\n   print(\"\")\r\n   print(\"BAD CR\", bad_cr)\r\n   loop(bad_cr)\r\n  \r\nmain()\r\n```",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752479063/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752504542",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/42#issuecomment-1752504542",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/42",
    "id": 1752504542,
    "node_id": "IC_kwDOKBuOEs5odRje",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/9/2023",
    "updated_at": "2023-10-09T07:53:02Z",
    "author_association": "COLLABORATOR",
    "body": "After thinking about it\r\n\r\nThis is just another way of saying: Liquidators will liquidate Underwater CDPs last\r\n\r\nSince those offer the lowest premium\r\n\r\nThis is factually true and has been modelled in conjunction with Risk DAO\r\n\r\nThe entirety of the discussion falls under the fact that Liquidators will liquidate riskiest CDPs last\r\nAnd that’s a consequence of trying to minimise bad debt\r\nWe have modelled this in conjunction with risk Dao, to determine the proper balance\r\nAnd 3% is the sweet spot from their simulations\r\n\r\n\r\n——\r\n\r\nQuick note on profitability:\r\nFrom a tool I built: https://github.com/GalloDaSballo/pool-math\r\n\r\nWe can derive that both Curve and Balancer, with default settings, are able to swap at least the amount of a reserve before losing the 3%\r\n\r\nThis is further modelled through simulations in this report:\r\nhttps://github.com/Risk-DAO/Reports/blob/main/eBTC.pdf\r\n\r\n\r\n——\r\n\r\nOne way to further discuss the impact would be this idea of a simulation:\r\n\r\nBad Debt CDP with\r\n1 Coll\r\nInsane DEBT CDP -> highest debt possible\r\n\r\nRedistribution Victim (skip)\r\n120 CDP That drags the TCR down to 124.999 (max stake) -> highest Coll possible\r\n\r\n\r\nRest at 200 (safe users)\r\n\r\n\r\n——\r\n\r\nThe above could help show the maximum impact\r\n\r\nHowever, unless I missed something this should be cause for downgrading the odds as well as the severity of the issues as the redistribution being this way is a guarantee from any rational actor\r\n\r\n",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752504542/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1761532760",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/42#issuecomment-1761532760",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/42",
    "id": 1761532760,
    "node_id": "IC_kwDOKBuOEs5o_ttY",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/13/2023",
    "updated_at": "2023-10-13T13:35:51Z",
    "author_association": "COLLABORATOR",
    "body": "I would classify this as the same as the risk of stakers of having to take on bad debt\r\n\r\nWhich is something we accept from using the liquity model\r\n\r\nWould ask to reconsider severity given the explanation above, the impact and the risk profile the system already accepts",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1761532760/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1761610521",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/42#issuecomment-1761610521",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/42",
    "id": 1761610521,
    "node_id": "IC_kwDOKBuOEs5pAAsZ",
    "user": {
     "login": "dmitriia",
     "id": 6178977,
     "node_id": "MDQ6VXNlcjYxNzg5Nzc=",
     "avatar_url": "https://avatars.githubusercontent.com/u/6178977?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/dmitriia",
     "html_url": "https://github.com/dmitriia",
     "followers_url": "https://api.github.com/users/dmitriia/followers",
     "following_url": "https://api.github.com/users/dmitriia/following{/other_user}",
     "gists_url": "https://api.github.com/users/dmitriia/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/dmitriia/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/dmitriia/subscriptions",
     "organizations_url": "https://api.github.com/users/dmitriia/orgs",
     "repos_url": "https://api.github.com/users/dmitriia/repos",
     "events_url": "https://api.github.com/users/dmitriia/events{/privacy}",
     "received_events_url": "https://api.github.com/users/dmitriia/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/13/2023",
    "updated_at": "2023-10-13T14:28:41Z",
    "author_association": "COLLABORATOR",
    "body": "I tend to think that probability of the behavior described is high as it’s profitable and has zero cost for a liquidator.\r\n\r\nIt might be argued that the impact is low instead of medium, but it really depends on the state of the system. It can be correct to say that it’s low most of the times and can be medium when pool has substantial amount of bad debt.\r\n\r\nSo I updated the impact to `low to medium` and severity to `medium` this way. I do not think that the implementation should be left as it is though.\r\n\r\nSimulation of the typical/most probable/going concern scenarios is generally not a proper measure of the associated risk. Corner cases can happen and should be accounted for.\r\n\r\nLiquidation incentives in eBTC are higher than in Liquity, so it can’t be said that this phenomenon is the same and is just inherited.",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1761610521/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/42/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#42"
 },
 {
  "id": 1926825660,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/41",
  "title": "BorrowerOperations and CdpManager function names and error messages don't fully reflect the logic with regard to ordering required",
  "created_by": "dmitriia",
  "created_at": "10/4/2023",
  "body": "**Context:** [BorrowerOperations.sol#L880](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.5/packages/contracts/contracts/BorrowerOperations.sol#L880), [BorrowerOperations.sol#L786](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.5/packages/contracts/contracts/BorrowerOperations.sol#L786), [BorrowerOperations.sol#L848](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.5/packages/contracts/contracts/BorrowerOperations.sol#L848), [BorrowerOperations.sol#L855](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.5/packages/contracts/contracts/BorrowerOperations.sol#L855), [BorrowerOperations.sol#L859](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.5/packages/contracts/contracts/BorrowerOperations.sol#L859), [BorrowerOperations.sol#L866](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.5/packages/contracts/contracts/BorrowerOperations.sol#L866), [CdpManager.sol#L747](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.5/packages/contracts/contracts/CdpManager.sol#L747)\r\n\r\n**Description:** Function names and error messages do not strictly correspond to the logic, per list below.\r\n\r\n**Recommendation:** BorrowerOperations.sol:\r\n\r\nError messages can be updated, e.g.:\r\n\r\n```diff\r\n  function _requireAtLeastMinNetStEthBalance(uint256 _coll) internal pure {\r\n      require(\r\n          _coll >= MIN_NET_COLL,\r\n-         \"BorrowerOperations: Cdp's net coll must be greater than minimum\"\r\n+         \"BorrowerOperations: Cdp's net coll must not fall below minimum\"\r\n      );\r\n  }\r\n```\r\n\r\nand\r\n\r\n```diff\r\n  function _requireNoStEthBalanceDecrease(uint256 _stEthBalanceDecrease) internal pure {\r\n      require(\r\n          _stEthBalanceDecrease == 0,\r\n-         \"BorrowerOperations: Collateral withdrawal not permitted Recovery Mode\"\r\n+         \"BorrowerOperations: Collateral withdrawal not permitted during Recovery Mode\"\r\n      );\r\n  }\r\n```\r\n\r\nFunction names:\r\n\r\n`_requireICRisAboveMCR()` can be renamed to `_requireICRisNotBelowMCR`:\r\n\r\n```solidity\r\nfunction _requireICRisAboveMCR(uint256 _newICR) internal pure {\r\n    require(\r\n        _newICR >= MCR,\r\n        \"BorrowerOperations: An operation that would result in ICR < MCR is not permitted\"\r\n    );\r\n}\r\n```\r\n\r\n`_requireICRisAboveCCR()` can be renamed to `_requireICRisNotBelowCCR`:\r\n\r\n```solidity\r\nfunction _requireICRisAboveCCR(uint256 _newICR) internal pure {\r\n    require(_newICR >= CCR, \"BorrowerOperations: Operation must leave cdp with ICR >= CCR\");\r\n}\r\n```\r\n\r\n`_requireNewICRisAboveOldICR()` can be renamed to `_requireNoDecreaseOfICR()`:\r\n\r\n```solidity\r\nfunction _requireNewICRisAboveOldICR(uint256 _newICR, uint256 _oldICR) internal pure {\r\n    require(\r\n        _newICR >= _oldICR,\r\n        \"BorrowerOperations: Cannot decrease your Cdp's ICR in Recovery Mode\"\r\n    );\r\n}\r\n```\r\n\r\n`_requireNewTCRisAboveCCR()` can be renamed to `_requireNewTCRisNotBelowCCR()`:\r\n\r\n```solidity\r\nfunction _requireNewTCRisAboveCCR(uint256 _newTCR) internal pure {\r\n    require(\r\n        _newTCR >= CCR,\r\n        \"BorrowerOperations: An operation that would result in TCR < CCR is not permitted\"\r\n    );\r\n}\r\n```\r\n\r\n`CdpManager.sol`:\r\n\r\n`_requireTCRoverMCR()` can be renamed to `_requireTCRisNotBelowMCR()`:\r\n\r\n```solidity\r\nfunction _requireTCRoverMCR(uint256 _price, uint256 _TCR) internal view {\r\n    require(_TCR >= MCR, \"CdpManager: Cannot redeem when TCR < MCR\");\r\n}\r\n```\r\n\r\n**BadgerDAO:** Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/41/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#41"
 },
 {
  "id": 1926796304,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/40",
  "title": "Grace period reset can be avoided by redeeming when switch to normal mode occurs due to market conditions and there are no or few CDPs between MCR and TCR",
  "created_by": "dmitriia",
  "created_at": "10/4/2023",
  "body": "**Context:** [CdpManager.sol#L327-L354](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.5/packages/contracts/contracts/CdpManager.sol#L327-L354)\r\n\r\n**Description:** CdpManager's `redeemCollateral()` allows redeeming any `cdpID` as long as `MCR < TCR && getICR(sortedCdps.getNext(cdpID), _price) < MCR && getICR(cdpID, _price) >= MCR`. In a rare situation when such CDP has `ICR > TCR`, its redemption can lower TCR below CCR, and this will happen without triggering of the grace period, as the only `_syncGracePeriodForGivenValues()` call happens with the resulting state.\r\n\r\nIn other words, redemption logic allows starting with `TCR > CCR` state and ending with `TCR < CCR`, while grace period will be updated with the output `TCR < CCR` state only. When the system was in the RM state and normal mode state have been reached due to the external market conditions, and not yet being accounted in the system, `redeemCollateral()` can be used to silently drive the system back to RM without starting the corresponding grace period.\r\n\r\nImpact: when recovery to normal mode transition takes place due to market conditions and not yet accounted in the system, while there are no or few CDPs with ICR between MCR and TCR, it can be possible to drive the system back to RM without starting new grace period. Technically it allows for liquidation of CDPs with `MCR <= ICR < TCR`, but immediately this set will be empty as all such CDPs will have to be redeemed. However, with further market movements, which can happen quickly enough, some CDPs might satisfy this condition. They will be immediately liquidable as grace period be deemed expired.\r\n\r\nPer low likelihood and medium impact setting the severity to be low.\r\n\r\n**Recommendation:** Since `redeemCollateral()` is unique in the regard that it allows its impact to be RM initiating, as a simplest approach consider adding initial state synchronization there, e.g.:\r\n\r\n- [CdpManager.sol#L327-L354](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.5/packages/contracts/contracts/CdpManager.sol#L327-L354)\r\n\r\n```diff\r\n  function redeemCollateral(\r\n      // ...\r\n  ) external override nonReentrantSelfAndBOps {\r\n      RedemptionTotals memory totals;\r\n\r\n      _requireValidMaxFeePercentage(_maxFeePercentage);\r\n\r\n      _syncGlobalAccounting(); // Apply state, we will syncGracePeriod at end of function\r\n\r\n      totals.price = priceFeed.fetchPrice();\r\n      {\r\n          (\r\n              uint256 tcrAtStart,\r\n              uint256 totalCollSharesAtStart,\r\n              uint256 totalEBTCSupplyAtStart\r\n          ) = _getTCRWithSystemDebtAndCollShares(totals.price);\r\n          totals.tcrAtStart = tcrAtStart;\r\n          totals.totalCollSharesAtStart = totalCollSharesAtStart;\r\n          totals.totalEBTCSupplyAtStart = totalEBTCSupplyAtStart;\r\n      }\r\n\r\n+     // Notify current mode\r\n+     if (totals.tcrAtStart < CCR) {\r\n+         _startGracePeriod(totals.tcrAtStart);\r\n+     } else {\r\n+         _endGracePeriod(totals.tcrAtStart);\r\n+     }\r\n\r\n      _requireTCRoverMCR(totals.price, totals.tcrAtStart);\r\n  // ...\r\n```\r\n\r\n**BadgerDao:** I may be missing something but synching is done at [CdpManager.sol#L463C9-L463C39](https://github.com/Badger-Finance/ebtc/blob/9f7556e654e7fa3ecac471de92a55a4115c6edb8/packages/contracts/contracts/CdpManager.sol#L463C9-L463C39).\r\n\r\n**Cantina:** The issue is that there is only one sync, while the operation can make the system enter RM as redemption logic allows starting with `TCR > CCR` state and ending with `TCR < CCR`. So the grace period end trigger can be skipped as the `_syncGracePeriodForGivenValues()` sync in the end will see `TCR < CCR`. This way the [second] grace period can be avoided, and liquidations can happen shortly.\r\n\r\n**BadgerDAO:** Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752108525",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/40#issuecomment-1752108525",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/40",
    "id": 1752108525,
    "node_id": "IC_kwDOKBuOEs5obw3t",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/8/2023",
    "updated_at": "2023-10-08T17:13:41Z",
    "author_association": "COLLABORATOR",
    "body": "I may be missing something but synching is done here: https://github.com/Badger-Finance/ebtc/blob/9f7556e654e7fa3ecac471de92a55a4115c6edb8/packages/contracts/contracts/CdpManager.sol#L463C9-L463C39",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752108525/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752128114",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/40#issuecomment-1752128114",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/40",
    "id": 1752128114,
    "node_id": "IC_kwDOKBuOEs5ob1py",
    "user": {
     "login": "dmitriia",
     "id": 6178977,
     "node_id": "MDQ6VXNlcjYxNzg5Nzc=",
     "avatar_url": "https://avatars.githubusercontent.com/u/6178977?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/dmitriia",
     "html_url": "https://github.com/dmitriia",
     "followers_url": "https://api.github.com/users/dmitriia/followers",
     "following_url": "https://api.github.com/users/dmitriia/following{/other_user}",
     "gists_url": "https://api.github.com/users/dmitriia/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/dmitriia/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/dmitriia/subscriptions",
     "organizations_url": "https://api.github.com/users/dmitriia/orgs",
     "repos_url": "https://api.github.com/users/dmitriia/repos",
     "events_url": "https://api.github.com/users/dmitriia/events{/privacy}",
     "received_events_url": "https://api.github.com/users/dmitriia/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/8/2023",
    "updated_at": "2023-10-08T18:46:02Z",
    "author_association": "COLLABORATOR",
    "body": "The issue is that there is only one sync, while the operation can make the system enter RM as\r\n> redemption logic allows starting with `TCR > CCR` state and ending with `TCR < CCR`.\r\n\r\nSo the grace period end trigger can be skipped as the `_syncGracePeriodForGivenValues()` sync in the end will see `TCR < CCR`. This way the [second] grace period can be avoided, and liquidations can happen shortly.",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1752128114/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/40/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#40"
 },
 {
  "id": 1916527145,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/39",
  "title": "There is no way to invalidate issued permits for eBTC and position managers",
  "created_by": "dmitriia",
  "created_at": "9/28/2023",
  "body": "**Context:** [EBTCToken.sol#L181-L203](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/EBTCToken.sol#L181-L203), [BorrowerOperations.sol#L637-L671](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/BorrowerOperations.sol#L637-L671)\r\n\r\n**Description:** It's now impossible to invalidate previously issued permits other than use them for both eBTC token and position manager approvals. There is a deadline argument control, but it doesn't always provide enough flexibility. Both permits are material, for example position manager can close a CDP, obtaining all the collateral.\r\n\r\nAs an example vector, a permit issued with any long dated `_deadline` can render revoking the approval void:\r\n\r\n```solidity\r\n/// @notice Revoke a position manager from taking further actions on your Cdps\r\n/// @notice Similar to approving tokens, approving a position manager allows _stealing of all positions_ if given to a malicious account.\r\nfunction revokePositionManagerApproval(address _positionManager) external override {\r\n    _setPositionManagerApproval(msg.sender, _positionManager, PositionManagerApproval.None);\r\n}\r\n```\r\n\r\nI.e. if there is a permit it does not matter if approval was revoked, as it can be restored, for example front or back-running funds movements. \r\n\r\n**Recommendation:** Consider adding a nonce increasing function as a way to quickly invalidate current permits, e.g.:\r\n\r\n```solidity\r\n/// @notice Clears outstanding permits for the current nonce\r\nfunction increaseNonce() external returns (uint256) {\r\n    return ++_nonces[msg.sender];\r\n}\r\n```\r\n\r\n**BadgerDao:** Agree with fixing this + adding to UI as a way to Revoke any delegation. Fixed as suggested in [PR 672](https://github.com/ebtc-protocol/ebtc/pull/672).\r\n\r\n**Cantina:** Fix looks ok, `increasePermitNonce()` is added via `PermitNonce` parent.\r\n\r\n**BadgerDAO:** Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1742933414",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/39#issuecomment-1742933414",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/39",
    "id": 1742933414,
    "node_id": "IC_kwDOKBuOEs5n4w2m",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/2/2023",
    "updated_at": "2023-10-02T12:34:14Z",
    "author_association": "COLLABORATOR",
    "body": "Agree with fixing this + adding to UI as a way to Revoke any delegation",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1742933414/reactions",
     "total_count": 2,
     "+1": 2,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1744519273",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/39#issuecomment-1744519273",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/39",
    "id": 1744519273,
    "node_id": "IC_kwDOKBuOEs5n-0Bp",
    "user": {
     "login": "rayeaster",
     "id": 1487283,
     "node_id": "MDQ6VXNlcjE0ODcyODM=",
     "avatar_url": "https://avatars.githubusercontent.com/u/1487283?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/rayeaster",
     "html_url": "https://github.com/rayeaster",
     "followers_url": "https://api.github.com/users/rayeaster/followers",
     "following_url": "https://api.github.com/users/rayeaster/following{/other_user}",
     "gists_url": "https://api.github.com/users/rayeaster/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/rayeaster/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/rayeaster/subscriptions",
     "organizations_url": "https://api.github.com/users/rayeaster/orgs",
     "repos_url": "https://api.github.com/users/rayeaster/repos",
     "events_url": "https://api.github.com/users/rayeaster/events{/privacy}",
     "received_events_url": "https://api.github.com/users/rayeaster/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/3/2023",
    "updated_at": "2023-10-03T08:53:28Z",
    "author_association": "COLLABORATOR",
    "body": "fixed as suggested in PR https://github.com/Badger-Finance/ebtc/pull/672",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1744519273/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1745009420",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/39#issuecomment-1745009420",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/39",
    "id": 1745009420,
    "node_id": "IC_kwDOKBuOEs5oArsM",
    "user": {
     "login": "dmitriia",
     "id": 6178977,
     "node_id": "MDQ6VXNlcjYxNzg5Nzc=",
     "avatar_url": "https://avatars.githubusercontent.com/u/6178977?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/dmitriia",
     "html_url": "https://github.com/dmitriia",
     "followers_url": "https://api.github.com/users/dmitriia/followers",
     "following_url": "https://api.github.com/users/dmitriia/following{/other_user}",
     "gists_url": "https://api.github.com/users/dmitriia/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/dmitriia/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/dmitriia/subscriptions",
     "organizations_url": "https://api.github.com/users/dmitriia/orgs",
     "repos_url": "https://api.github.com/users/dmitriia/repos",
     "events_url": "https://api.github.com/users/dmitriia/events{/privacy}",
     "received_events_url": "https://api.github.com/users/dmitriia/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/3/2023",
    "updated_at": "2023-10-03T13:43:55Z",
    "author_association": "COLLABORATOR",
    "body": "> fixed as suggested in PR [Badger-Finance/ebtc#672](https://github.com/Badger-Finance/ebtc/pull/672)\r\n\r\nFix looks ok, `increasePermitNonce()` is added via `PermitNonce` parent.",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1745009420/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/39/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#39"
 },
 {
  "id": 1915796858,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/38",
  "title": "Some event parameters can be declared as `indexed` to better monitor those events with monitoring tools",
  "created_by": "StErMi",
  "created_at": "9/27/2023",
  "body": "**Context:** [ICdpManagerData.sol#L47](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/Interfaces/ICdpManagerData.sol#L47), [ICdpManagerData.sol#L56C3-L56C3](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/Interfaces/ICdpManagerData.sol#L56C3-L56C3), [ICdpManagerData.sol#L16](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/Interfaces/ICdpManagerData.sol#L16), [ICdpManagerData.sol#L29](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/Interfaces/ICdpManagerData.sol#L29), [ICollSurplusPool.sol#L9](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/Interfaces/ICollSurplusPool.sol#L9), [IERC3156FlashLender.sol#L8](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/Interfaces/IERC3156FlashLender.sol#L8), [IERC3156FlashLender.sol#L9](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/Interfaces/IERC3156FlashLender.sol#L9), [IERC3156FlashLender.sol#L10](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/Interfaces/IERC3156FlashLender.sol#L10), [IFeeRecipient.sol#L8](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/Interfaces/IFeeRecipient.sol#L8), [IPool.sol#L11](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/Interfaces/IPool.sol#L11), [IPositionManagers.sol#L13-L14](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/Interfaces/IPositionManagers.sol#L13-L14), [IBorrowerOperations.sol#L10](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/Interfaces/IBorrowerOperations.sol#L10), [IBorrowerOperations.sol#L11](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/Interfaces/IBorrowerOperations.sol#L11), [IPriceFeed.sol#L9](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/Interfaces/IPriceFeed.sol#L9), [IPriceFeed.sol#L10](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/Interfaces/IPriceFeed.sol#L10)\r\n\r\n**Description:** Some events contain parameters that could be declared as `indexed`. By doing that, Badger can later use those parameters to filters those events by those parameters value via dApps and monitoring system:\r\n\r\n- `ICdpManagerData` `event` `CdpLiquidated` can declare the `_liquidator` parameter as `indexed`.\r\n- `ICdpManagerData` event `CdpPartiallyLiquidated` can declare the `_liquidator` parameter as `indexed.\r\n- `ICdpManagerData` event `FeeRecipientAddressChanged` can declare the `_feeRecipientAddress` input as `indexed`.\r\n- `ICollSurplusPool` event `CollSharesTransferred` can declare the `_to` parameter as `indexed`.\r\n- `IERC3156FlashLender` event `FlashFeeSet` can declare the `_setter` parameter as `indexed`.\r\n- `IERC3156FlashLender` event `MaxFlashFeeSet` can declare the `_setter` parameter as `indexed`.\r\n- `IERC3156FlashLender` event `FlashLoansPaused` can declare the `_setter` parameter as `indexed`.\r\n- `IFeeRecipient` event `CollSharesTransferred` can declare the `_account` parameter as `indexed`.\r\n- `IPool` event `CollSharesTransferred` can declare the `_to` parameter as `indexed`.\r\n- `IPositionManagers` event `PositionManagerApprovalSet` can declare the `_borrower` and `_positionManager` parameters as `indexed`.\r\n- `IBorrowerOperations` event `FeeRecipientAddressChanged` can declare the `_feeRecipientAddress` input as `indexed`.\r\n- `IBorrowerOperations` event `FlashLoanSuccess` can declare the `_receiver` and `_token` inputs as `indexed.\r\n- `ICdpManagerData` event `Redemption` can declare the `_redeemer` input as `indexed`.\r\n- `IPriceFeed` event `FallbackCallerChanged` can declare the `_oldFallbackCaller` and `_newFallbackCaller` inputs as `indexed`.\r\n- `IPriceFeed` event `UnhealthyFallbackCaller` can declare the `_fallbackCaller` input as `indexed`.\r\n\r\n**Recommendation:** Badger should consider renaming the event's parameters listed in the description as `indexed`.\r\n\r\n**BadgerDAO:** Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1742940430",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/38#issuecomment-1742940430",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/38",
    "id": 1742940430,
    "node_id": "IC_kwDOKBuOEs5n4ykO",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/2/2023",
    "updated_at": "2023-10-02T12:39:19Z",
    "author_association": "COLLABORATOR",
    "body": "@dapp-whisperer let's ask Basado as well",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1742940430/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/38/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#38"
 },
 {
  "id": 1914781297,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/37",
  "title": "`CRLens` contract considerations and improvements",
  "created_by": "StErMi",
  "created_at": "9/27/2023",
  "body": "**Context:** [CRLens.sol](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/CRLens.sol)\r\n\r\n**Description/Recommendation:**\r\n\r\nThe `CRLens` contract is a utility contract that allows external entities to query the CDP Manager. \r\n\r\n1) Create a `ICRLens` interface that will be inherited by `CRLens` and that can be used by external integrators to build on top or query `CRLens`.\r\n2) Add full natspec support to `CRLens` (or the `ICRLens` interface). Many functions have only a partial natspec support.\r\n3) Consider renaming the function by replacing \"real\" with \"synched\". The `CdpManager` have already adopted this term to identify those functions that synch the system and CDP indexes, apply fee split and update the CDP state.\r\n4) Delete the `price` variable inside `getRealNICR` because is never used.\r\n5) Consider returning a `bool` instead of a `uint256` in `quoteCheckRecoveryMode`. The recovery mode is a `true/false` value, and it could be confusing for the integrators to receive a `uint256` value that can only assume `0/1`. The function could be refactored like this:\r\n\r\n```diff\r\n- function quoteCheckRecoveryMode() external returns (uint256) {\r\n+ function quoteCheckRecoveryMode() external returns (bool) {\r\n      try this.getCheckRecoveryMode(true) {} catch (bytes memory reason) {\r\n-          return parseRevertReason(reason);\r\n+          return parseRevertReason(reason) == 1;\r\n      }\r\n  }\r\n```\r\n6) Consider removing the `_priceFeed` dependency from the `CRLens.constructor`. The Price Feed in the `CdpManager` is an immutable variable and can be directly retrieved from it by executing `cdpManager.priceFeed()`. Here's an example of a possible refactoring:\r\n\r\n```diff\r\n- constructor(address _cdpManager, address _priceFeed) {\r\n+ constructor(address _cdpManager) {\r\n      cdpManager = ICdpManager(_cdpManager);\r\n-     priceFeed = IPriceFeed(_priceFeed);\r\n+     priceFeed = cdpManager.priceFeed();\r\n  }\r\n```\r\n7) Consider further documenting the usage of `CRLens`. While it's true that this contract will probably be used only by integrators or advanced users, the documentation about the proper usage (and the revert mechanism) could be further improved and better explained.\r\n\r\n**BadgerDao:** Not fixing as the `CRLens` is mostly a tool to debug.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1742935781",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/37#issuecomment-1742935781",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/37",
    "id": 1742935781,
    "node_id": "IC_kwDOKBuOEs5n4xbl",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/2/2023",
    "updated_at": "2023-10-02T12:35:53Z",
    "author_association": "COLLABORATOR",
    "body": "Nofixing as the CRLens is mostly a tool to debug",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1742935781/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1744270260",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/37#issuecomment-1744270260",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/37",
    "id": 1744270260,
    "node_id": "IC_kwDOKBuOEs5n93O0",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/3/2023",
    "updated_at": "2023-10-03T06:09:15Z",
    "author_association": "COLLABORATOR",
    "body": "Ack",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1744270260/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/37/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#37"
 },
 {
  "id": 1913853675,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/36",
  "title": "Consider refactoring `SortedCdps._getCdpsOf` to simply the code and save gas",
  "created_by": "StErMi",
  "created_at": "9/26/2023",
  "body": "**Context:** [SortedCdps.sol#L247-L249](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/SortedCdps.sol#L247-L249), [SortedCdps.sol#L274-L282](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/SortedCdps.sol#L274-L282)\r\n\r\n**Description:**\r\n\r\nThe `_getCdpsOf(address owner, bytes32 startNodeId, uint maxNodes, uint maxArraySize)` internal function can only be called by `getCdpsOf(address owner)` and `function getCdpsOf(address owner, bytes32 startNodeId, uint maxNodes)` that have the following code:\r\n\r\n```solidity\r\nfunction getCdpsOf(address owner) external view override returns (bytes32[] memory) {\r\n    uint _ownedCount = _cdpCountOf(owner, dummyId, 0);\r\n    return _getCdpsOf(owner, dummyId, 0, _ownedCount);\r\n}\r\n\r\nfunction getCdpsOf(\r\n    address owner,\r\n    bytes32 startNodeId,\r\n    uint maxNodes\r\n) external view override returns (bytes32[] memory) {\r\n    uint _ownedCount = _cdpCountOf(owner, startNodeId, maxNodes);\r\n    return _getCdpsOf(owner, startNodeId, maxNodes, _ownedCount);\r\n}\r\n```\r\n\r\nThe `owner`, `startNodeId` and `maxNodes` parameters value are the same passed to both the `_cdpCountOf` and `_getCdpsOf` functions:\r\n\r\n- `owner` is the owner of the CDPs.\r\n- `startNodeId` is the CDP ID from which it needs to start iterating from (in a pagination logic it can be seen as the `offset` concept).\r\n- `maxNodes` is the max number of iterations that the logic should do on the list (in a pagination logic it can be seen as the `limit` concept).\r\n\r\nThe `_cdpCountOf` function iterates over the list starting from `startNodeId` and iterates at max `maxNodes` times. It will return the number of CDPs owned by the `onwer` parameter.\r\n\r\nBecause the parameters passed to those functions are the same and because they iterate over the same \"slice\" of the list and for the same max number of iterations: \r\n\r\n- `maxArraySize` will always be `<= maxNodes` (you cannot find more matches than the number of iterations). This will always be true when `maxNodes > 0`.\r\n- `_cdpRetrieved` will always be equal to `maxArraySize`.\r\n\r\nBecause of this, the `_getCdpsOf` logic can be simplified as following:\r\n\r\n```diff\r\n  function _getCdpsOf(\r\n      address owner,\r\n      bytes32 startNodeId,\r\n      uint maxNodes,\r\n      uint maxArraySize\r\n  ) internal view returns (bytes32[] memory) {\r\n      if (maxArraySize == 0) {\r\n          return new bytes32[](0);\r\n      }\r\n\r\n      // Two-pass strategy, halving the amount of Cdps we can process before relying on pagination or off-chain methods\r\n-     bytes32[] memory userCdps = new bytes32[](\r\n-        (maxNodes > 0 && maxNodes < maxArraySize) ? maxNodes : maxArraySize\r\n-     );\r\n+     bytes32[] memory userCdps = new bytes32[](maxArraySize);\r\n\r\n      uint i = 0;\r\n      uint _cdpRetrieved;\r\n\r\n      // walk the list, until we get to the index\r\n      // start at the given node or from the tail of list\r\n      bytes32 _currentCdpId = (startNodeId == dummyId ? data.tail : startNodeId);\r\n\r\n      while (_currentCdpId != dummyId) {\r\n          // if the current Cdp is owned by specified owner\r\n          if (getOwnerAddress(_currentCdpId) == owner) {\r\n              userCdps[_cdpRetrieved] = _currentCdpId;\r\n              ++_cdpRetrieved;\r\n          }\r\n          ++i;\r\n\r\n          // move to the next Cdp in the list\r\n          _currentCdpId = data.nodes[_currentCdpId].prevId;\r\n\r\n          // cut the run if we exceed expected iterations through the loop\r\n          if (maxNodes > 0 && i >= maxNodes) {\r\n              break;\r\n          }\r\n      }\r\n\r\n      // if CDP number retrieved not equal to expected then we make a new copy\r\n-     if (_cdpRetrieved > 0 && _cdpRetrieved != userCdps.length) {\r\n-         bytes32[] memory _copyUserCdps = new bytes32[](_cdpRetrieved);\r\n-         for (uint i = 0; i < _cdpRetrieved; ++i) {\r\n-             require(userCdps[i] != dummyId, \"SortedCdps: invalid CDP retrieved by getCdpsOf()\");\r\n-             _copyUserCdps[i] = userCdps[i];\r\n-         }\r\n-         userCdps = _copyUserCdps;\r\n-     }\r\n\r\n      return userCdps;\r\n  }\r\n```\r\n\r\nNote that `_cdpRetrieved` can't be equal to `0` because for that to be true it would mean that `maxArraySize` have to be equal to zero. This case is already handled in the very first check performed by `_getCdpsOf`.\r\n\r\n**Recommendation:** Badger should consider:\r\n- Reviewing and simplifying the code of the `SortedCdps_getCdpsOf` function.\r\n- Adding more test and fuzzing tests to validate the proposed refactoring and possible edge cases.\r\n- replacing all the `uint` types with the `uint256` to adhere to the Solidity Style guide.\r\n\r\n**BadgerDao:** Fixed as suggested in [PR 658](https://github.com/Badger-Finance/ebtc/pull/658).\r\n\r\n**Cantina:** The recommendations have been implemented in [PR 658](https://github.com/Badger-Finance/ebtc/pull/658).\r\n\r\n**BadgerDAO:** Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1736810767",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/36#issuecomment-1736810767",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/36",
    "id": 1736810767,
    "node_id": "IC_kwDOKBuOEs5nhaEP",
    "user": {
     "login": "rayeaster",
     "id": 1487283,
     "node_id": "MDQ6VXNlcjE0ODcyODM=",
     "avatar_url": "https://avatars.githubusercontent.com/u/1487283?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/rayeaster",
     "html_url": "https://github.com/rayeaster",
     "followers_url": "https://api.github.com/users/rayeaster/followers",
     "following_url": "https://api.github.com/users/rayeaster/following{/other_user}",
     "gists_url": "https://api.github.com/users/rayeaster/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/rayeaster/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/rayeaster/subscriptions",
     "organizations_url": "https://api.github.com/users/rayeaster/orgs",
     "repos_url": "https://api.github.com/users/rayeaster/repos",
     "events_url": "https://api.github.com/users/rayeaster/events{/privacy}",
     "received_events_url": "https://api.github.com/users/rayeaster/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/27/2023",
    "updated_at": "2023-09-27T06:55:27Z",
    "author_association": "COLLABORATOR",
    "body": "fixed as suggested in PR https://github.com/Badger-Finance/ebtc/pull/658",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1736810767/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1736847499",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/36#issuecomment-1736847499",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/36",
    "id": 1736847499,
    "node_id": "IC_kwDOKBuOEs5nhjCL",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/27/2023",
    "updated_at": "2023-09-27T07:24:45Z",
    "author_association": "COLLABORATOR",
    "body": "The recommendations have been implemented in the PR https://github.com/Badger-Finance/ebtc/pull/658",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1736847499/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1787768264",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/36#issuecomment-1787768264",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/36",
    "id": 1787768264,
    "node_id": "IC_kwDOKBuOEs5qjy3I",
    "user": {
     "login": "luksgrin",
     "id": 49839840,
     "node_id": "MDQ6VXNlcjQ5ODM5ODQw",
     "avatar_url": "https://avatars.githubusercontent.com/u/49839840?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/luksgrin",
     "html_url": "https://github.com/luksgrin",
     "followers_url": "https://api.github.com/users/luksgrin/followers",
     "following_url": "https://api.github.com/users/luksgrin/following{/other_user}",
     "gists_url": "https://api.github.com/users/luksgrin/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/luksgrin/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/luksgrin/subscriptions",
     "organizations_url": "https://api.github.com/users/luksgrin/orgs",
     "repos_url": "https://api.github.com/users/luksgrin/repos",
     "events_url": "https://api.github.com/users/luksgrin/events{/privacy}",
     "received_events_url": "https://api.github.com/users/luksgrin/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/31/2023",
    "updated_at": "2023-10-31T18:32:19Z",
    "author_association": "NONE",
    "body": "For the report, will mark as gas optimisation and remove the informational tag",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1787768264/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/36/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#36"
 },
 {
  "id": 1913533074,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/35",
  "title": "`SortedCdps` view functions `getCdpsOf`, `cdpCountOf`, `cdpOfOwnerByIndex` and `cdpOfOwnerByIdx` could return more information useful for the next pagination",
  "created_by": "StErMi",
  "created_at": "9/26/2023",
  "body": "**Context:** [SortedCdps.sol#L114-L171](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/SortedCdps.sol#L114-L171), [SortedCdps.sol#L173-L214](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/SortedCdps.sol#L173-L214), [SortedCdps.sol#L216-L285](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/SortedCdps.sol#L216-L285)\r\n\r\n**Description:**\r\n\r\nThe `cdpOfOwnerByIndex`, `cdpOfOwnerByIdx`, `_cdpOfOwnerByIndex`, `cdpCountOf`, `_cdpCountOf`, `getCdpsOf` and `_getCdpsOf` functions (with the different overloaded versions) have been added to the `SortedCdps` contract as a replaced for the removal of the state variables that were containing such information.\r\n\r\nThese functions are meant to be used off-chain or on-chain, but by \"lens\" contracts and not directly by the core eBTC code.\r\nBecause of the nature of the sorted linked list and the high probability to revert because of Out Of Gas exception, those functions support a \"paginated\" logic.\r\n\r\nThe current version of the functions are not returning some information that could help the caller to prepare the needed parameters for the next iteration of the \"paginated\" query.\r\n\r\n- Let's say that the sorted list contains 10k records and an integrator wants to know the number of CDPs owned by Alice.\r\n- Given the high number of records, the integrator cannot specify `maxNodes = 0` otherwise the transaction will revert.\r\n- Given that the integrator doesn't know the information about the first ID owned by Alice (the first CDP owned by Alice with the lower ICR of her CDPs) it needs to specify `startNodeId`.\r\n- Note that the integrator must iterate the whole list because it does not know the number of CDPs owned by Alice (the information it's trying to retrieve) and in the worst-case scenario, the last of her CDPs could be the one positioned in the `head` (the one with higher ICR).\r\n\r\nAt this point, the integrator will call `cdpCountOf(alice, dummyId, bigNumberOfIterationThatWillNotRevert)`. Let's say that it returns `X`. At this point, the integrator has to query for the next page of the iteration, but he does not know which `startNodeId` to pass as the off-set of the page.\r\n\r\nNote that `_cdpOfOwnerByIndex` should not revert when the `maxNodes` has been exceeded to correctly handle the paginated result information.\r\n\r\n**Recommendation:** Badger should consider improving the returned values of the `cdpOfOwnerByIndex`, `cdpOfOwnerByIdx`, `_cdpOfOwnerByIndex`, `cdpCountOf`, `_cdpCountOf`, `getCdpsOf` and `_getCdpsOf` functions to allow the integrators to properly query the Sorted CDPs list in a paginated manner.\r\n\r\n**BadgerDAO:** Fixed as suggested in [PR 671](https://github.com/Badger-Finance/ebtc/pull/671). Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1744419044",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/35#issuecomment-1744419044",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/35",
    "id": 1744419044,
    "node_id": "IC_kwDOKBuOEs5n-bjk",
    "user": {
     "login": "rayeaster",
     "id": 1487283,
     "node_id": "MDQ6VXNlcjE0ODcyODM=",
     "avatar_url": "https://avatars.githubusercontent.com/u/1487283?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/rayeaster",
     "html_url": "https://github.com/rayeaster",
     "followers_url": "https://api.github.com/users/rayeaster/followers",
     "following_url": "https://api.github.com/users/rayeaster/following{/other_user}",
     "gists_url": "https://api.github.com/users/rayeaster/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/rayeaster/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/rayeaster/subscriptions",
     "organizations_url": "https://api.github.com/users/rayeaster/orgs",
     "repos_url": "https://api.github.com/users/rayeaster/repos",
     "events_url": "https://api.github.com/users/rayeaster/events{/privacy}",
     "received_events_url": "https://api.github.com/users/rayeaster/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/3/2023",
    "updated_at": "2023-10-03T08:05:10Z",
    "author_association": "COLLABORATOR",
    "body": "fixed as suggested in PR https://github.com/Badger-Finance/ebtc/pull/671",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1744419044/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/35/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#35"
 },
 {
  "id": 1912728002,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/34",
  "title": "Refactor `LiquidationSequencer` to save gas and be more readable",
  "created_by": "StErMi",
  "created_at": "9/26/2023",
  "body": "**Context:** [LiquidationSequencer.sol](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/LiquidationSequencer.sol)\r\n\r\n**Description:**\r\n\r\nThe `LiquidationSequencer` contract can be refactored to save gas and be more readable.  Before the refactoring (or at least keep them in mind), Badger should first solve the issues that have been already reported:\r\n- [\"The liquidation logic is not always using the same requirement when the system is in RM\"](https://github.com/cantinasec/review-badgerdao/issues/32).\r\n- [\"`LiquidationSequencer` is not synchronizing the platform when calculating the list of CDP\"](https://github.com/cantinasec/review-badgerdao/issues/27).\r\n\r\n1) Avoid re-calculatin the `TCR`.\r\n\r\nThe `TCR` of the system is already calculated inside `sequenceLiqToBatchLiqWithPrice` but it's also later re-calculated by `_sequenceLiqToBatchLiq` (that is only called by `sequenceLiqToBatchLiqWithPrice`).\r\n\r\nThe value returned by `_getTCRWithSystemDebtAndCollShares` and `cdpManager.getTCR(_price)` is the same, given that `getTCR` will internally call `_getTCRWithSystemDebtAndCollShares`.\r\n\r\nIt would make sense to re-calculate each time the `TCR` if the contract was simulating the consequence (and the increase of TCR) of a liquidation, but that's not the case.\r\n\r\n2) Refactor the two for-loops of `_sequenceLiqToBatchLiq`.\r\n\r\n90% of the code inside those two for loops is the same, and such logic could be moved to common functions that will be called by the loops. Such a refactor would make the code much more readable.\r\n\r\n3) Consider breaking early in the first for-loop of `_sequenceLiqToBatchLiq` if a CDP is not liquidable because of its ICR or because of RM and Grace Period.\r\n\r\nIf a CDP cannot be liquidated because of its `ICR` and the sorted list is correctly sorted, it means that the \"getPrev()\" (with higher `ICR`) won't be liquidable too, and the next \"getPrev()\" CDP won't be and so on. Badger should consider breaking the loop early instead of keeping iterating until the reach `i < _n && _cdpId != _first` condition.\r\n\r\n4) Consider removing the `_cdpStatus == 1` check.\r\n\r\nTheoretically, the `sortedCdps` list should only include **active** CDPs, if a non-active CDP is in that list it means that something is wrong in the overall implementation of the protocol. Badger should consider verifying such statement and remove the check.\r\n\r\n5) Consider refactoring the whole second for-loop in `_sequenceLiqToBatchLiq`.\r\n\r\nIf the `sortedCdps` list is correctly sorted, and it does not contain any non-active CDP (like it should), the second for-loop of the function should only iterate to add the CDPs to the `_array` array.\r\n\r\n6) Consider refactoring the `constructor` to only receive the `_cdpManagerAddress` address and retrieve all the other addresses (`activePool`, `priceFeed`, `collateralAddress`, `sortedCdps`) by querying directly the `cdpManager`.\r\n\r\n**Recommendation:** Badger should consider applying the suggestions provided in the Description part of the issue.\r\n\r\n**Important Note:** Many of those suggestions rely on the strong hypothesis that the `sortedCdps` list is correctly sorted and does not contain non-active CDPs.\r\n\r\n**BadgerDao:** Please check [PR 653](https://github.com/ebtc-protocol/ebtc/pull/653) for this optimization as suggested.\r\n\r\n**Cantina:** The code seems good (from the logic prospective) but I can make the following notes:\r\n\r\n1) `_canLiquidateInCurrentMode` function can be removed, and the code integrated directly into `_checkCdpLiquidability`. The logic is tiny and easy to read and is only called by `_checkCdpLiquidability`. I think that calling functions (because of the jump and so on) introduces gas overhead.\r\n2) `_recoveryMode` can be pre-computed directly in `_sequenceLiqToBatchLiq`. That value (given that you do not influence TCR by actually liquidating the CDP) won't change, and you can avoid to re-calculate it each time.\r\n3) I would say that you can further simplify the logic by doing:\r\n\t- First loop check which is the higher ICR CDP to be liquidated, and you return the iterations done. After that CDP, all the other CDPs can't be liquidated (for the current state of the protocol).\r\n\t- The second loop just iterates CDPs from zero for X iterations (where X is the value returned by the first loop).\r\n4) Suggestion: does it make sense to have a different flavor of the function where you specify both the `_n` parameter and the `cdpStartIdx` from where you want to start liquidating? For example: I would like to liquidate 10 CDPs starting from (included) the CDP with id XYZ.\r\n\r\n**Important Note:** As I mentioned previously, all of this logic only works **if and only if** the `sortedCdps` contains **correctly sorted** CDPs and **active** CDPs (something that should be true for a correct functioning of the protocol).\r\n\r\n**BadgerDAO:**\r\n- `LeverageMacro*` and `SimplifiedDiamondLike` will be handled by the related [PR 654](https://github.com/Badger-Finance/ebtc/pull/654).\r\n- Discussion [`stETH` share historical value](https://github.com/cantinasec/review-badgerdao/discussions/2) is fixed as suggested.\r\n- `BorrowerOperations` is fixed as suggested by setting the iteration upper bound of the second iteration as the returned value from the first iteration.\r\n- `CdpManager` might be a interesting feature and I suggest to address it in a dedicated separate task if necessary.\r\n\r\nAcknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1735388946",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/34#issuecomment-1735388946",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/34",
    "id": 1735388946,
    "node_id": "IC_kwDOKBuOEs5nb-8S",
    "user": {
     "login": "rayeaster",
     "id": 1487283,
     "node_id": "MDQ6VXNlcjE0ODcyODM=",
     "avatar_url": "https://avatars.githubusercontent.com/u/1487283?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/rayeaster",
     "html_url": "https://github.com/rayeaster",
     "followers_url": "https://api.github.com/users/rayeaster/followers",
     "following_url": "https://api.github.com/users/rayeaster/following{/other_user}",
     "gists_url": "https://api.github.com/users/rayeaster/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/rayeaster/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/rayeaster/subscriptions",
     "organizations_url": "https://api.github.com/users/rayeaster/orgs",
     "repos_url": "https://api.github.com/users/rayeaster/repos",
     "events_url": "https://api.github.com/users/rayeaster/events{/privacy}",
     "received_events_url": "https://api.github.com/users/rayeaster/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/26/2023",
    "updated_at": "2023-09-26T11:57:40Z",
    "author_association": "COLLABORATOR",
    "body": "please check following PR for this optimization as suggested \r\n\r\nhttps://github.com/Badger-Finance/ebtc/pull/653",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1735388946/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1735482993",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/34#issuecomment-1735482993",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/34",
    "id": 1735482993,
    "node_id": "IC_kwDOKBuOEs5ncV5x",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/26/2023",
    "updated_at": "2023-09-26T12:59:53Z",
    "author_association": "COLLABORATOR",
    "body": "The code seems good (from the logic prospective) but I can make the following notes:\r\n\r\n1) `_canLiquidateInCurrentMode` function can be removed, and the code integrated directly into `_checkCdpLiquidability`. The logic is tiny and easy to read and is only called by `_checkCdpLiquidability`. I think that calling functions (because of the jump and so on) introduces gas overhead.\r\n2) `_recoveryMode` can be pre-computed directly in `_sequenceLiqToBatchLiq`. That value (given that you do not influence TCR by actually liquidating the CDP) won't change, and you can avoid to re-calculate it each time\r\n3) I would say that you can further simplify the logic by doing\r\n\t- First loop check which is the higher ICR CDP to be liquidated, and you return the iterations done. After that CDP, all the other CDPs can't be liquidated (for the current state of the protocol)\r\n\t- The second loop just iterates CDPs from zero for X iterations (where X is the value returned by the first loop)\r\n4) Suggestion: does it make sense to have a different flavor of the function where you specify both the `_n` parameter and the `cdpStartIdx` from where you want to start liquidating? For example: I would like to liquidate 10 CDPs starting from (included) the CDP with id XYZ\r\n\r\n⚠️ As I mentioned previously, all of this logic only works **if and only if** the `sortedCdps` contains **correctly sorted** CDPs and **active** CDPs (something that should be true for a correct functioning of the protocol)\r\n\r\n\r\n",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1735482993/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1736674019",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/34#issuecomment-1736674019",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/34",
    "id": 1736674019,
    "node_id": "IC_kwDOKBuOEs5ng4rj",
    "user": {
     "login": "rayeaster",
     "id": 1487283,
     "node_id": "MDQ6VXNlcjE0ODcyODM=",
     "avatar_url": "https://avatars.githubusercontent.com/u/1487283?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/rayeaster",
     "html_url": "https://github.com/rayeaster",
     "followers_url": "https://api.github.com/users/rayeaster/followers",
     "following_url": "https://api.github.com/users/rayeaster/following{/other_user}",
     "gists_url": "https://api.github.com/users/rayeaster/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/rayeaster/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/rayeaster/subscriptions",
     "organizations_url": "https://api.github.com/users/rayeaster/orgs",
     "repos_url": "https://api.github.com/users/rayeaster/repos",
     "events_url": "https://api.github.com/users/rayeaster/events{/privacy}",
     "received_events_url": "https://api.github.com/users/rayeaster/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/27/2023",
    "updated_at": "2023-09-27T04:44:01Z",
    "author_association": "COLLABORATOR",
    "body": "@StErMi PR is updated with respect to your notes. \r\n\r\nNote #1 will be handled by another related PR https://github.com/Badger-Finance/ebtc/pull/654/files#diff-307f35bf6928957226c09fdb313749bb5c94edea6f623f9860b92a83c211322b\r\nNote #2 is fixed as suggested\r\nNote #3 is fixed as suggested by setting the iteration upper bound of the second iteration as the returned value from the first iteration\r\nNote #4 might be a interesting feature and I suggest to address it in a dedicated separate task if necessary",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1736674019/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1736734147",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/34#issuecomment-1736734147",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/34",
    "id": 1736734147,
    "node_id": "IC_kwDOKBuOEs5nhHXD",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/27/2023",
    "updated_at": "2023-09-27T05:38:12Z",
    "author_association": "COLLABORATOR",
    "body": "I'll wait for the final merge to review the whole code",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1736734147/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1736862722",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/34#issuecomment-1736862722",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/34",
    "id": 1736862722,
    "node_id": "IC_kwDOKBuOEs5nhmwC",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/27/2023",
    "updated_at": "2023-09-27T07:35:55Z",
    "author_association": "COLLABORATOR",
    "body": "@rayeaster I have added another point to the issue (see point 6) where I suggest a refactor of the `constructor`. All the addresses that you are passing to the constructor can be retrieved by querying directly the `cdpManager`. \r\n\r\n",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1736862722/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1738257256",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/34#issuecomment-1738257256",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/34",
    "id": 1738257256,
    "node_id": "IC_kwDOKBuOEs5nm7No",
    "user": {
     "login": "dmitriia",
     "id": 6178977,
     "node_id": "MDQ6VXNlcjYxNzg5Nzc=",
     "avatar_url": "https://avatars.githubusercontent.com/u/6178977?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/dmitriia",
     "html_url": "https://github.com/dmitriia",
     "followers_url": "https://api.github.com/users/dmitriia/followers",
     "following_url": "https://api.github.com/users/dmitriia/following{/other_user}",
     "gists_url": "https://api.github.com/users/dmitriia/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/dmitriia/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/dmitriia/subscriptions",
     "organizations_url": "https://api.github.com/users/dmitriia/orgs",
     "repos_url": "https://api.github.com/users/dmitriia/repos",
     "events_url": "https://api.github.com/users/dmitriia/events{/privacy}",
     "received_events_url": "https://api.github.com/users/dmitriia/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/28/2023",
    "updated_at": "2023-09-27T23:59:33Z",
    "author_association": "COLLABORATOR",
    "body": "There are optimization possibilities for `_sequenceLiqToBatchLiq` [outlined in the previous review](https://github.com/spearbit-audits/review-badgerdao/pull/4/files#r1259014036), they are still relevant as far as I see.",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1738257256/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1738352865",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/34#issuecomment-1738352865",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/34",
    "id": 1738352865,
    "node_id": "IC_kwDOKBuOEs5nnSjh",
    "user": {
     "login": "rayeaster",
     "id": 1487283,
     "node_id": "MDQ6VXNlcjE0ODcyODM=",
     "avatar_url": "https://avatars.githubusercontent.com/u/1487283?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/rayeaster",
     "html_url": "https://github.com/rayeaster",
     "followers_url": "https://api.github.com/users/rayeaster/followers",
     "following_url": "https://api.github.com/users/rayeaster/following{/other_user}",
     "gists_url": "https://api.github.com/users/rayeaster/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/rayeaster/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/rayeaster/subscriptions",
     "organizations_url": "https://api.github.com/users/rayeaster/orgs",
     "repos_url": "https://api.github.com/users/rayeaster/repos",
     "events_url": "https://api.github.com/users/rayeaster/events{/privacy}",
     "received_events_url": "https://api.github.com/users/rayeaster/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/28/2023",
    "updated_at": "2023-09-28T03:22:59Z",
    "author_association": "COLLABORATOR",
    "body": "> @rayeaster I have added another point to the issue (see point 6) where I suggest a refactor of the `constructor`. All the addresses that you are passing to the constructor can be retrieved by querying directly the `cdpManager`.\r\n\r\n@dapp-whisperer what is your opinion on this topic? Thought current constructor implementation with all related dependent addresses passed in as separate arguments is a consistent match with what we use for other contracts using `EBTCDeployer`.",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1738352865/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1787771914",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/34#issuecomment-1787771914",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/34",
    "id": 1787771914,
    "node_id": "IC_kwDOKBuOEs5qjzwK",
    "user": {
     "login": "luksgrin",
     "id": 49839840,
     "node_id": "MDQ6VXNlcjQ5ODM5ODQw",
     "avatar_url": "https://avatars.githubusercontent.com/u/49839840?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/luksgrin",
     "html_url": "https://github.com/luksgrin",
     "followers_url": "https://api.github.com/users/luksgrin/followers",
     "following_url": "https://api.github.com/users/luksgrin/following{/other_user}",
     "gists_url": "https://api.github.com/users/luksgrin/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/luksgrin/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/luksgrin/subscriptions",
     "organizations_url": "https://api.github.com/users/luksgrin/orgs",
     "repos_url": "https://api.github.com/users/luksgrin/repos",
     "events_url": "https://api.github.com/users/luksgrin/events{/privacy}",
     "received_events_url": "https://api.github.com/users/luksgrin/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/31/2023",
    "updated_at": "2023-10-31T18:33:54Z",
    "author_association": "NONE",
    "body": "Will be marked as gas optimization only, for the report",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1787771914/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/34/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#34"
 },
 {
  "id": 1910120830,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/33",
  "title": "Bulk Informational Issues relative to Release 0.4 PR",
  "created_by": "StErMi",
  "created_at": "9/24/2023",
  "body": "**Context:** Global scope\r\n\r\n**Description:** This issue includes a list of informational issues found and noted while reviewing the PR that would merge the [Release 0.4 PR](https://github.com/Badger-Finance/ebtc/pull/620) into the main branch.\r\n\r\nThe issues are not sorted by type or files.\r\n\r\n1) Inside `CdpManagerStorage.getICR`  `currentETH` are not ETH but SHARES.\r\n2) Inside `CdpManagerStorage.getNominalICR`  `currentETH` are not ETH but SHARES.\r\n3) `LiquityMath` `_computeNominalCR` and `_computeCR` should specify if `_coll` is `stETH` or shares.\r\n4) In general, there are other places where the term `collateral`/`coll` is used in a mixed way. Sometimes it's about `stETH` shares, sometimes it's about `stETH`. I think that the best thing to do is to:\r\n\t1) Not use anymore the term `coll`/`collateral` and always use `stETH` or `stETHShares`.\r\n\t2) Decide which is the collateral and use the other as the secondary term. So, for example, you define that `stETH` is the collateral and so by default when you see the term `coll` you know you are referring to `stETH` and everything else that is not `coll` or `stETH` should be explicitly defined as `stETHShares`.\r\n5) missing full-natspec for functions like `_calcSyncedAccounting`, `_getSyncedCdpDebtAndRedistribution` and so on (I assume there are more where the natspec miss or is incomplete). Try to fully cover the functions with `@notice`, `@dev`, `@param` and `@return` when needed.\r\n6) `syncGlobalAccounting` `@dev` comment is unfinished.\r\n7) if a grace period starts, it won't be bound to the current value of `recoveryModeGracePeriod`. The caller could call `setGracePeriod` and change the grace period that has already started by making it smaller or bigger. See issue [\"Governance can to end or extend the grace period even when a grace period is already ongoing\"](https://github.com/cantinasec/review-badgerdao/issues/30).\r\n8) Consider changing `recoveryModeGracePeriod` to `recoveryModeGracePeriodDuration`.\r\n9) Refactor `CdpManagerStorage` to have constants, storage layouts and so on as the first thing and function after (with a proper order). Please follow the [Solidity Style guide](https://docs.soliditylang.org/en/latest/style-guide.html).\r\n11) In `CdpManagerStorage` `stEthFeePerUnitIndex` was more meaningful before (`stFeePerUnitcdp`). Now it has lost the information that it's about CDP. Consider changing the name to be a reference to the single CDP index.\r\n12) Same thing for `debtRedistributionIndex` in `CdpManagerStorage`(not that before was more meaningful). Consider renaming to something that is related to the CDP.\r\n13) In `CdpManagerStorage` `lastEBTCDebtErrorRedistribution` has \"lost\" the `_` in the name, but `lastETHError_Redistribution` still has it. Use the same naming standard.\r\n14) In `CdpManagerStorage` there are multiple occurrences of the variable `CdpIdsArrayLength` that is declared with the first letter uppercase. Follow the Solidity style guide and declare it with the first letter lowercase.\r\n15) In `CdpManagerStorage` use the same order for the input parameters (both `stETH` index) for `_syncStEthIndex` and `_calcSyncedGlobalAccounting`. In those function, the order is inverted and could cause confusion. Try to always stick with the same order.\r\n16) `CdpManagerStorage` `getSyncedICR` and `getSyncedTCR` can be declared `external` because are not used by any contract.\r\n17) `CdpManagerStorage` `getNominalICR` and `getICR` uses the variable `currentETH` but inside that variable you don't have `ETH` or `stETH` but `stETHShares` returned by `getDebtAndCollShares`. Change the name of the variable accordingly.\r\n18) In general, it seems that the name `EBTC` has been replaced in many places with the general term \"Debt\". For example, `getPendingEBTCDebtReward` has been renamed `getPendingRedistributedDebt`. There are still many instances in the whole codebase where variables and functions refer to `eBTC` instead of `debt` (same for `stETH`/`ETH` for `coll` or `collateral`). Badger should define a very strict standard for the naming convention and apply broadly to the whole codebase. Having a mixture of both creates confusion and could lead to errors.\r\n19) In `CdpManagerStorage` `_getPendingRedistributedDebt` explicitly return set or return a value for `pendingEBTCDebtReward` because right now the `else` case is not handled and could lead to error/create confusion.\r\n20) `IEBTCToken` `EBTCTokenBalanceUpdated` event can be removed because it's not used anywhere in the codebase.\r\n21) In `HintHelpers` `_calculateCdpStateAfterPartialRedemption` the variable names should be updated to clarify when they store `stETH` or `shares`. \r\n22) In `LiquidationLibrary` use the same style to declare the revert message. Sometimes they start with \"LiquidationLibrary: \", sometimes with \"CdpManager:\" and sometimes like in `_reInsertPartialLiquidation` they do not have the reference to the source at all.\r\n23) Avoid using \"magic number\" `1e18` in `LiquidationLibrary._liquidateIndividualCdpSetupCDPInNormalMode`. Use `BaseMath.DECIMAL_PRECISION`.\r\n24) Avoid using \"magic number\" `1e18` in `LiquidationLibrary._liquidateIndividualCdpSetupCDPInRecoveryMode`. Use `BaseMath.DECIMAL_PRECISION`.\r\n25) In `LiquidationLibrary` the function is passing `stETH shares` and not `stETH` to the event `CdpLiquidated` for the parameter `_coll`. Please verify that it is implemented as intended.\r\n26) In `LiquidationLibrary` to the event `CdpLiquidated` `_premiumToLiquidator` is defined as `_cappedColl > _debtToColl ? (_cappedColl - _debtToColl) : 0` where `_cappedColl` is calculated as `collateral.getPooledEthByShares(_cappedColPortion + _liquidatorReward)`.\r\n\r\nThe `_liquidatorReward` (the reward given to the liquidator as the gas stipend) should be outside the calculation of the `_cappedColl` and should be always added to the final value passed to the `_premiumToLiquidator` parameter. Here's an example:\r\n\r\n```solidity\r\nuint _cappedColl = collateral.getPooledEthByShares(_cappedColPortion);\r\nuint256 premium = _cappedColl > _debtToColl ? (_cappedColl - _debtToColl) : 0\r\nemit CdpLiquidated(\r\n    _recoveryState.cdpId,\r\n    _borrower,\r\n    _totalDebtToBurn,\r\n    _cappedColPortion,\r\n    CdpOperation.liquidateInRecoveryMode,\r\n    msg.sender,\r\n    premium + collateral.getPooledEthByShares(_liquidatorReward)\r\n);\r\n```\r\n\r\n27) `LiquidationSequencer` does not check if the grace period has passed (if we are in RM). See issue [\"The liquidation logic is not always using the same requirement when the system is in RM\"](https://github.com/cantinasec/review-badgerdao/issues/32).\r\n28) `LiquidationSequencer` does not perform the same check done in `LiquidationLibrary` when we are in `RM`. Over there `_liquidateIndividualCdpSetup` require that `_ICR <= _TCR` instead in the helper `_canLiquidateInCurrentMode` check that `_icr < _TCR`. See issue [\"The liquidation logic is not always using the same requirement when the system is in RM\"](https://github.com/cantinasec/review-badgerdao/issues/32).\r\n29) Update the revert message in `LiquidationSequencer` because now they say \"LiquidationLibrary:\".\r\n30) Improvement: create a common library for the checks done by `LiquidationSequencer` and `LiquidationLibrary` to be sure to implement both of them correctly.\r\n31) In `LiquidationLibrary` avoid using the direct value of the Cdp Status, use the Enum instead (example `_cdpStatus == 1`).\r\n32) Remove `public` visibility from the `MultiCdpGetter` constructor (it's ignored by solidity).\r\n33) In `ICdpManagerData` rename the `debtToOffset` attribute of the struct `LiquidationValues` to `debtToBurn`. The current name used is a concept related to `Liquity` and could create confusion in `eBTC`.\r\n34) In `ICdpManagerData` rename the `totalDebtToOffset` attribute of the struct `LiquidationTotals` to `debtToBurn`. The current name used is a concept related to `Liquity` and could create confusion in `eBTC`.\r\n35) In `CdpManager.redeemCollateral` the `require(redemptionsPaused == false, ...)` check can be moved at the very beginning of the function to save gas if the redemption process has been paused.\r\n36) In `redeemCollateral()` `totals.totalETHDrawn` and `totals.ETHToSendToRedeemer` are in stETH **shares** and to be named accordingly.\r\n\r\n**Recommendation:** Badger should consider solving the issues listed in the description section. The main suggestion would be to:\r\n- Consolidate the renaming migration they have started to remove any possible confusion around the term collateral, `stETH` and `shares`.\r\n- Remove references and nomenclatures that were relevant in the Liquity project but are not inside the eBTC context.\r\n- Cover all the variables, functions and interfaces with full natspec support.\r\n\r\n**BadgerDAO:** Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1737528464",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/33#issuecomment-1737528464",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/33",
    "id": 1737528464,
    "node_id": "IC_kwDOKBuOEs5nkJSQ",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/27/2023",
    "updated_at": "2023-09-27T14:35:15Z",
    "author_association": "COLLABORATOR",
    "body": "Updated the listed issues with a couple of more points and modified some of them. I'll probably end up creating separate issues to regroup some of them.",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1737528464/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1737592967",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/33#issuecomment-1737592967",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/33",
    "id": 1737592967,
    "node_id": "IC_kwDOKBuOEs5nkZCH",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/27/2023",
    "updated_at": "2023-09-27T15:08:17Z",
    "author_association": "COLLABORATOR",
    "body": "Moved some specific points to the issue https://github.com/cantinasec/review-badgerdao/issues/38",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1737592967/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1747494862",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/33#issuecomment-1747494862",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/33",
    "id": 1747494862,
    "node_id": "IC_kwDOKBuOEs5oKKfO",
    "user": {
     "login": "dmitriia",
     "id": 6178977,
     "node_id": "MDQ6VXNlcjYxNzg5Nzc=",
     "avatar_url": "https://avatars.githubusercontent.com/u/6178977?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/dmitriia",
     "html_url": "https://github.com/dmitriia",
     "followers_url": "https://api.github.com/users/dmitriia/followers",
     "following_url": "https://api.github.com/users/dmitriia/following{/other_user}",
     "gists_url": "https://api.github.com/users/dmitriia/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/dmitriia/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/dmitriia/subscriptions",
     "organizations_url": "https://api.github.com/users/dmitriia/orgs",
     "repos_url": "https://api.github.com/users/dmitriia/repos",
     "events_url": "https://api.github.com/users/dmitriia/events{/privacy}",
     "received_events_url": "https://api.github.com/users/dmitriia/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/4/2023",
    "updated_at": "2023-10-04T19:18:24Z",
    "author_association": "COLLABORATOR",
    "body": "36. In `redeemCollateral()` `totals.totalETHDrawn` and `totals.ETHToSendToRedeemer` are in stETH **shares** and to be named accordingly.",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1747494862/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1748154243",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/33#issuecomment-1748154243",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/33",
    "id": 1748154243,
    "node_id": "IC_kwDOKBuOEs5oMreD",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/5/2023",
    "updated_at": "2023-10-05T06:12:51Z",
    "author_association": "COLLABORATOR",
    "body": "> 36. In `redeemCollateral()` `totals.totalETHDrawn` and `totals.ETHToSendToRedeemer` are in stETH **shares** and to be named accordingly.\r\n\r\nI have added it to the list, @dmitriia feel free to edit my issue when you need it ;)",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1748154243/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/33/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#33"
 },
 {
  "id": 1910117510,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/32",
  "title": "The liquidation logic is not always using the same requirement when the system is in RM",
  "created_by": "StErMi",
  "created_at": "9/24/2023",
  "body": "**Context:** [LiquidationLibrary.sol#L72-L75](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/LiquidationLibrary.sol#L72-L75), [LiquidationLibrary.sol#L719-L722](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/LiquidationLibrary.sol#L719-L722), [CdpManagerStorage.sol#L812-L820](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/CdpManagerStorage.sol#L812-L820), [LiquidationSequencer.sol#L89-L97](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/LiquidationSequencer.sol#L89-L97)\r\n\r\n**Description:**\r\n\r\nThe liquidation process is handled by the `LiquidationLibrary` that can execute the liquidation from three different functions:\r\n\r\n- `liquidate(...)` to liquidate fully a single CDP.\r\n- `partiallyLiquidate(...)` to liquidate partially a single CDP.\r\n- `batchLiquidateCdps(...)` to liquidate an array of CDP in bulk.\r\n\r\nThese functions are called via `delegatecall` by the `CdpManager` contract. The \"single CDP liquidation\" functions will allow the liquidation of a CDP when the system is in Recovery Mode **if and only if**:\r\n\r\n- `TCR < CCR`.\r\n- `_ICR <= _TCR`.\r\n- `cachedLastGracePeriodStartTimestamp != UNSET_TIMESTAMP && block.timestamp > cachedLastGracePeriodStartTimestamp + recoveryModeGracePeriod`.\r\n\r\nIf we look at the logic of `batchLiquidateCdps` when the system is in Recovery Mode it will execute `_getTotalFromBatchLiquidate_RecoveryMode` that is allowing the liquidation of a CDP (when we are in recovery mode) **if and only if** `ICR < MCR || canLiquidateRecoveryMode(vars.ICR, _TCR) == true`.\r\n\r\nIf we look at `CdpManagerStorage.canLiquidateRecoveryMode`  we see that the logic is different compared to the one we have found in the single liquidation:\r\n\r\n```solidity\r\nfunction canLiquidateRecoveryMode(uint256 icr, uint256 tcr) public view returns (bool) {\r\n    // ICR < TCR and we have waited enough\r\n    uint128 cachedLastGracePeriodStartTimestamp = lastGracePeriodStartTimestamp;\r\n    return\r\n        icr < tcr &&\r\n        cachedLastGracePeriodStartTimestamp != UNSET_TIMESTAMP &&\r\n        block.timestamp > cachedLastGracePeriodStartTimestamp + recoveryModeGracePeriod;\r\n}\r\n```\r\n\r\nIn this case, the check is stricter compared to the single liquidation that allows the liquidation even when `ICR == TCR`.\r\n\r\n**`LiquidationSequencer`**\r\n\r\nThis contract allows an external user to generate the list of liquidable CDP to be passed later to the `CdpManager.batchLiquidateCdps(...)` function as a parameter.\r\nIn this case, a CDP is added to the list of liquidable CDP only if `status == 1` (the CDP is open and active) and `_canLiquidateInCurrentMode(_recoveryModeAtStart, _icr, _TCR) == true`.\r\n\r\nThe logic of `_canLiquidateInCurrentMode` is also different compared to the one used by the batch liquidation and single liquidation we have seen before:\r\n\r\n```solidity\r\nfunction _canLiquidateInCurrentMode(\r\n    bool _recovery,\r\n    uint256 _icr,\r\n    uint256 _TCR\r\n) internal view returns (bool) {\r\n    bool _liquidatable = _recovery ? (_icr < MCR || _icr < _TCR) : _icr < MCR;\r\n\r\n    return _liquidatable;\r\n}\r\n```\r\n\r\nIf we are in Recover Mode, the CDP is liquidable if `ICR < MCR || ICR < TCR`. In this case, the logic does not check at all the Grace Period.\r\n\r\nThis means that if we are in Recover Mode, it could happen that some of the CDP that are selected by the `LiquidationSequencer` won't be liquidated when `CdpManager.batchLiquidateCdps(...)` is executed.\r\n\r\n**Recommendation:**\r\n\r\nBadger should enforce that the same check for the liquidation is executed in both the single (full and partial) and bulk liquidation. Badger should also update the logic of `LiquidationSequencer` to only select CDP that can be liquidated by the `CdpManager`.\r\n\r\n**BadgerDao:** Fixed in [PR 654](https://github.com/Badger-Finance/ebtc/pull/654). A related PR for `LiquidationSequencer` is [PR 653](https://github.com/Badger-Finance/ebtc/pull/653).\r\n\r\n**Cantina:** I don't understand why you don't want to include the check about the grace period inside the `LiquidationSequencer`. What's the reason? Could you elaborate? By not doing that, you are including in the array some CDP that should not be liquidated.\r\n\r\nAlso, right now the `LiquidationSequencer` is \"wasting\" gas because it's calculating every time the RM flag that is static for the whole loop. The same \"waste\" is done by re-calculating each time the `TCR` that is already calculated in `sequenceLiqToBatchLiqWithPrice`.\r\n\r\nProbably the best thing to do (to offer to the integrator) would be to \"simulate\" the liquidation of those CDPs and include only which are the \"correct\" CDP to liquidate because while you liquidate each CDP the RM and TCR will change and some of the included CDPs could end up being not liquidable. I don't know how much doable (how much it makes sense for gas cost) to do it onchain, so probably you should just document this scenario?\r\n\r\nI think the optimal way is to ultimately get rid of duplications and call the very same function in core logic and in all the helpers. Full simulation can be ok for one instrument, but an overkill for another, it can be differentiated provided with proper descriptions of the limitations.\r\n\r\n**BadgerDAO**: Agree with your point that it might be the best for integrator to have an exact/accurate \"simulation\" but it entails more work at this final stage before launch (e.g., we need to write new low-level functions to calculate the TCR with delta-change values instead using directly current collateral & debt in `ActivePool` as shown in `LiquityBase._getTCRWithSystemDebtAndCollShares()`). \r\n\r\nConsidering the original purpose of separating this sequential-liquidation feature from core `LiquidationLibrary` into a dedicated \"peripheral\" contract, we could document as suggested that it should be expected that the result might contain CDPs that may not be liquidatable (thus skipped in later liquidation execution). \r\n\r\nThe LiquidationSequencer's initial role is as a replacement to the `liquidateCdps(n)` function that was removed, because we use it throughout the testing suite. It is a periphery helper contract, and is intended for off-chain use. The points brought up are great, and it makes sense that a better method of simulating could be developed. As it's a periphery helper, this can be developed at another time.\r\n\r\n**Cantina:** I understand that because it won't perform actual liquidations (and update the state), the returned array could be bigger compared to the array of CDPs that will be actually liquidated. \r\n\r\nBut it should try at his best to select only what can be liquidated by applying all the selection filters, and the Grace Period is one of them.\r\n\r\nGiven how skilled you are, it could probably also make sense to release a python/typescript script (or foundry one) that simply forks the chain and really simulates the liquidation to select just the list of CDPs that can be liquidated. \r\n\r\n**BadgerDAO**: Considering moving to `<=` sign. Acknowledged.\r\n\r\n**Cantina:** Acknowledged.\r\n\r\n",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1733303393",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/32#issuecomment-1733303393",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/32",
    "id": 1733303393,
    "node_id": "IC_kwDOKBuOEs5nUBxh",
    "user": {
     "login": "rayeaster",
     "id": 1487283,
     "node_id": "MDQ6VXNlcjE0ODcyODM=",
     "avatar_url": "https://avatars.githubusercontent.com/u/1487283?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/rayeaster",
     "html_url": "https://github.com/rayeaster",
     "followers_url": "https://api.github.com/users/rayeaster/followers",
     "following_url": "https://api.github.com/users/rayeaster/following{/other_user}",
     "gists_url": "https://api.github.com/users/rayeaster/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/rayeaster/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/rayeaster/subscriptions",
     "organizations_url": "https://api.github.com/users/rayeaster/orgs",
     "repos_url": "https://api.github.com/users/rayeaster/repos",
     "events_url": "https://api.github.com/users/rayeaster/events{/privacy}",
     "received_events_url": "https://api.github.com/users/rayeaster/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/25/2023",
    "updated_at": "2023-09-26T11:58:38Z",
    "author_association": "COLLABORATOR",
    "body": "fixed in https://github.com/Badger-Finance/ebtc/pull/654\r\n\r\na related PR for `LiquidationSequencer` is at https://github.com/Badger-Finance/ebtc/pull/653",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1733303393/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1733711940",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/32#issuecomment-1733711940",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/32",
    "id": 1733711940,
    "node_id": "IC_kwDOKBuOEs5nVlhE",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/25/2023",
    "updated_at": "2023-09-25T13:54:18Z",
    "author_association": "COLLABORATOR",
    "body": "@rayeaster I don't understand why you don't want to include the check about the grace period inside the `LiquidationSequencer`. What's the reason? Could you elaborate? By not doing that, you are including in the array some CDP that should not be liquidated.\r\n\r\nAlso, right now the `LiquidationSequencer` is \"wasting\" gas because it's calculating every time the RM flag that is static for the whole loop. The same \"waste\" is done by re-calculating each time the `TCR` that is already calculated in `sequenceLiqToBatchLiqWithPrice`.\r\n\r\nProbably the best thing to do (to offer to the integrator) would be to \"simulate\" the liquidation of those CDPs and include only which are the \"correct\" CDP to liquidate because while you liquidate each CDP the RM and TCR will change and some of the included CDPs could end up being not liquidable. I don't know how much doable (how much it makes sense for gas cost) to do it onchain, so probably you should just document this scenario?\r\n\r\n@dmitriia what are your thoughts?",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1733711940/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1734985508",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/32#issuecomment-1734985508",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/32",
    "id": 1734985508,
    "node_id": "IC_kwDOKBuOEs5nacck",
    "user": {
     "login": "rayeaster",
     "id": 1487283,
     "node_id": "MDQ6VXNlcjE0ODcyODM=",
     "avatar_url": "https://avatars.githubusercontent.com/u/1487283?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/rayeaster",
     "html_url": "https://github.com/rayeaster",
     "followers_url": "https://api.github.com/users/rayeaster/followers",
     "following_url": "https://api.github.com/users/rayeaster/following{/other_user}",
     "gists_url": "https://api.github.com/users/rayeaster/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/rayeaster/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/rayeaster/subscriptions",
     "organizations_url": "https://api.github.com/users/rayeaster/orgs",
     "repos_url": "https://api.github.com/users/rayeaster/repos",
     "events_url": "https://api.github.com/users/rayeaster/events{/privacy}",
     "received_events_url": "https://api.github.com/users/rayeaster/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/26/2023",
    "updated_at": "2023-09-26T07:32:25Z",
    "author_association": "COLLABORATOR",
    "body": "> @rayeaster I don't understand why you don't want to include the check about the grace period inside the `LiquidationSequencer`. What's the reason? Could you elaborate? By not doing that, you are including in the array some CDP that should not be liquidated.\r\n> \r\n> Also, right now the `LiquidationSequencer` is \"wasting\" gas because it's calculating every time the RM flag that is static for the whole loop. The same \"waste\" is done by re-calculating each time the `TCR` that is already calculated in `sequenceLiqToBatchLiqWithPrice`.\r\n> \r\n> Probably the best thing to do (to offer to the integrator) would be to \"simulate\" the liquidation of those CDPs and include only which are the \"correct\" CDP to liquidate because while you liquidate each CDP the RM and TCR will change and some of the included CDPs could end up being not liquidable. I don't know how much doable (how much it makes sense for gas cost) to do it onchain, so probably you should just document this scenario?\r\n> \r\n> @dmitriia what are your thoughts?\r\n\r\n@StErMi agree with your point that it might be the best for integrator to have an exact/accurate \"simulation\" but it entails more work at this final stage before launch (e.g., we need to write new low-level functions to calculate the TCR with delta-change values instead using directly current collateral & debt in `ActivePool` as shown in `LiquityBase._getTCRWithSystemDebtAndCollShares()`). \r\n\r\nConsidering the original purpose of separating this sequential-liquidation feature from core `LiquidationLibrary` into a dedicated \"peripheral\" contract, we could document as suggested that it should be expected that the result might contain CDPs that may not be liquidatable (thus skipped in later liquidation execution). \r\n\r\n@dapp-whisperer what is your insight on this topic?",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1734985508/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1740023081",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/32#issuecomment-1740023081",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/32",
    "id": 1740023081,
    "node_id": "IC_kwDOKBuOEs5ntqUp",
    "user": {
     "login": "dapp-whisperer",
     "id": 69157701,
     "node_id": "MDQ6VXNlcjY5MTU3NzAx",
     "avatar_url": "https://avatars.githubusercontent.com/u/69157701?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/dapp-whisperer",
     "html_url": "https://github.com/dapp-whisperer",
     "followers_url": "https://api.github.com/users/dapp-whisperer/followers",
     "following_url": "https://api.github.com/users/dapp-whisperer/following{/other_user}",
     "gists_url": "https://api.github.com/users/dapp-whisperer/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/dapp-whisperer/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/dapp-whisperer/subscriptions",
     "organizations_url": "https://api.github.com/users/dapp-whisperer/orgs",
     "repos_url": "https://api.github.com/users/dapp-whisperer/repos",
     "events_url": "https://api.github.com/users/dapp-whisperer/events{/privacy}",
     "received_events_url": "https://api.github.com/users/dapp-whisperer/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/28/2023",
    "updated_at": "2023-09-28T21:22:38Z",
    "author_association": "COLLABORATOR",
    "body": "> tl;dr: Let's acknowledge the limitations of this sequencer \r\n\r\nThe LiquidationSequencer's initial role is as a replacement to the liquidateCdps(n) function that was removed, because we use it throughout the testing suite.\r\n\r\nIt is a periphery helper contract, and is intended for off-chain use.\r\n\r\nStermi brings up great points, and it makes sense that a better method of simulating could be developed.\r\n\r\nAs it's a periphery helper, this can be developed at another time.",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1740023081/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1740334702",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/32#issuecomment-1740334702",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/32",
    "id": 1740334702,
    "node_id": "IC_kwDOKBuOEs5nu2Zu",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/29/2023",
    "updated_at": "2023-09-29T05:28:28Z",
    "author_association": "COLLABORATOR",
    "body": "I understand that because it won't perform actual liquidations (and update the state), the returned array could be bigger compared to the array of CDPs that will be actually liquidated. \r\n\r\nBut it should try at his best to select only what can be liquidated by applying all the selection filters, and the Grace Period is one of them.\r\n\r\nGiven how skilled you are, it could probably also make sense to release a python/typescript script (or foundry one) that simply forks the chain and really simulates the liquidation to select just the list of CDPs that can be liquidated. ",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1740334702/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1742961692",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/32#issuecomment-1742961692",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/32",
    "id": 1742961692,
    "node_id": "IC_kwDOKBuOEs5n43wc",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/2/2023",
    "updated_at": "2023-10-02T12:53:40Z",
    "author_association": "COLLABORATOR",
    "body": "Let's chat about this today @dapp-whisperer ",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1742961692/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1743242337",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/32#issuecomment-1743242337",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/32",
    "id": 1743242337,
    "node_id": "IC_kwDOKBuOEs5n58Rh",
    "user": {
     "login": "dapp-whisperer",
     "id": 69157701,
     "node_id": "MDQ6VXNlcjY5MTU3NzAx",
     "avatar_url": "https://avatars.githubusercontent.com/u/69157701?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/dapp-whisperer",
     "html_url": "https://github.com/dapp-whisperer",
     "followers_url": "https://api.github.com/users/dapp-whisperer/followers",
     "following_url": "https://api.github.com/users/dapp-whisperer/following{/other_user}",
     "gists_url": "https://api.github.com/users/dapp-whisperer/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/dapp-whisperer/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/dapp-whisperer/subscriptions",
     "organizations_url": "https://api.github.com/users/dapp-whisperer/orgs",
     "repos_url": "https://api.github.com/users/dapp-whisperer/repos",
     "events_url": "https://api.github.com/users/dapp-whisperer/events{/privacy}",
     "received_events_url": "https://api.github.com/users/dapp-whisperer/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/2/2023",
    "updated_at": "2023-10-02T15:32:35Z",
    "author_association": "COLLABORATOR",
    "body": "considering moving to <= sign",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1743242337/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1745229665",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/32#issuecomment-1745229665",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/32",
    "id": 1745229665,
    "node_id": "IC_kwDOKBuOEs5oBhdh",
    "user": {
     "login": "dmitriia",
     "id": 6178977,
     "node_id": "MDQ6VXNlcjYxNzg5Nzc=",
     "avatar_url": "https://avatars.githubusercontent.com/u/6178977?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/dmitriia",
     "html_url": "https://github.com/dmitriia",
     "followers_url": "https://api.github.com/users/dmitriia/followers",
     "following_url": "https://api.github.com/users/dmitriia/following{/other_user}",
     "gists_url": "https://api.github.com/users/dmitriia/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/dmitriia/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/dmitriia/subscriptions",
     "organizations_url": "https://api.github.com/users/dmitriia/orgs",
     "repos_url": "https://api.github.com/users/dmitriia/repos",
     "events_url": "https://api.github.com/users/dmitriia/events{/privacy}",
     "received_events_url": "https://api.github.com/users/dmitriia/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/3/2023",
    "updated_at": "2023-10-03T15:35:58Z",
    "author_association": "COLLABORATOR",
    "body": "> @rayeaster I don't understand why you don't want to include the check about the grace period inside the `LiquidationSequencer`. What's the reason? Could you elaborate?\r\n> ... \r\n> @dmitriia what are your thoughts?\r\n\r\nI think the optimal way is to ultimately get rid of duplications and call the very same function in core logic and in all the helpers. Full simulation can be ok for one instrument, but an overkill for another, it can be differentiated provided with proper descriptions of the limitations. ",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1745229665/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/32/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#32"
 },
 {
  "id": 1910115535,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/31",
  "title": "Possible confusion between borrower and delegatee when `CdpUpdated` events are emitted",
  "created_by": "StErMi",
  "created_at": "9/24/2023",
  "body": "**Context:** [BorrowerOperations.sol#L466-L472](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/BorrowerOperations.sol#L466-L472), [BorrowerOperations.sol#L504C9-L504C9](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/BorrowerOperations.sol#L504C9-L504C9), [BorrowerOperations.sol#L531](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/BorrowerOperations.sol#L531), [BorrowerOperations.sol#L299](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/BorrowerOperations.sol#L299), [BorrowerOperations.sol#L366](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/BorrowerOperations.sol#L366)\r\n\r\n**Description:**\r\n\r\nThe delegation system allows a delegate to execute three operations:\r\n- Adjust CDP.\r\n- Open CDP.\r\n- Close CDP.\r\n\r\n**Open CDP**\r\n\r\nThis operation executes :\r\n\r\n```solidity\r\ncdpManager.initializeCdp(\r\n    _cdpId,\r\n    vars.debt,\r\n    _netCollAsShares,\r\n    _liquidatorRewardShares,\r\n    _borrower\r\n);\r\n```\r\n\r\nThat internally emit the event `CdpUpdated(_cdpId, _borrower, 0, 0, _debt, _coll, stake, CdpOperation.openCdp);`. In this case, the `_borrower` parameter of the event is the `_borrower` parameter passed as an input of the `_openCdp` function.\r\n\r\nIn this case, the event parameter seems to represent who's the final user that will own the CDP.\r\n\r\n**Close CDP**\r\n\r\nThis operation executes :\r\n\r\n```solidity\r\ncdpManager.syncAccounting(_cdpId);\r\n```\r\n\r\nThat internally **could** emit the event:\r\n\r\n```solidity\r\nemit CdpUpdated(\r\n    _cdpId,\r\n    ISortedCdps(sortedCdps).getOwnerAddress(_cdpId),\r\n    prevDebt,\r\n    prevColl,\r\n    _newDebt,\r\n    prevColl,\r\n    Cdps[_cdpId].stake,\r\n    CdpOperation.syncAccounting\r\n);\r\n```\r\n\r\nIn this case, the `_borrower` parameter of the event is **always** `ISortedCdps(sortedCdps).getOwnerAddress(_cdpId)`that represents the **owner** of the CDP and could be different compared to `msg.sender`. In this case, the event parameter represents the **owner** of the CDP.\r\n\r\nAt the end of the flow, the `closeCdp` function executes:\r\n\r\n```solidity\r\ncdpManager.closeCdp(_cdpId, msg.sender, debt, coll);\r\n```\r\n\r\nThat internally emit the event `CdpUpdated(_cdpId, _borrower, _debt, _coll, 0, 0, 0, CdpOperation.closeCdp)`. In this case, the `_borrower` parameter of the event is **always** `msg.sender`. In this case, the event parameter seems to represent who has provided the funds to repay the debt and close the CDP and **not** the owner of the CDP.\r\n\r\n**Adjust CDP**\r\n\r\nThis operation executes:\r\n\r\n```solidity\r\ncdpManager.syncAccounting(_cdpId);\r\n```\r\n\r\nThat internally **could** emit the event: \r\n\r\n```solidity\r\nemit CdpUpdated(\r\n    _cdpId,\r\n    ISortedCdps(sortedCdps).getOwnerAddress(_cdpId),\r\n    prevDebt,\r\n    prevColl,\r\n    _newDebt,\r\n    prevColl,\r\n    Cdps[_cdpId].stake,\r\n    CdpOperation.syncAccounting\r\n);\r\n```\r\n\r\nIn this case, the `_borrower` parameter of the event is **always** `ISortedCdps(sortedCdps).getOwnerAddress(_cdpId)`that represents the **owner** of the CDP and could be different compared to `msg.sender`. In this case, the event parameter represents the **owner** of the CDP.\r\n\r\nAt the end of the flow, the `_adjustCdpInternal` function executes:\r\n\r\n```solidity\r\ncdpManager.updateCdp(_cdpId, _borrower, vars.coll, vars.debt, vars.newColl, vars.newDebt);\r\n```\r\n\r\nThat internally emits the event:\r\n\r\n```solidity\r\nemit CdpUpdated(\r\n    _cdpId,\r\n    _borrower,\r\n    _debt,\r\n    _coll,\r\n    _newDebt,\r\n    _newColl,\r\n    stake,\r\n    CdpOperation.adjustCdp\r\n);\r\n```\r\n\r\nIn this case, the `_borrower` parameter of the event is the **owner** of the CDP retrieved by `_adjustCdpInternal` at the start of the flow by executing `sortedCdps.getOwnerAddress(_cdpId)`. In this case, the event parameter represents the owner of the CDP, even if the one that is adjusting the CDP (`msg.sender`) could be different from the owner.\r\n\r\n**Recommendation:**\r\n\r\nAs shown in the description above, the `_borrower` parameter of the event `CdpUpdated` does not assume always the same meaning, and it is not always the borrower (owner of the CDP).\r\n\r\nBadger should consider refactoring those function to always pass to the event the owner of the CDP, or otherwise provide a specific explanation on why in some cases it assumes a value that is different from the CDP's owner.\r\n\r\n**BadgerDAO:** A quick summary from above findings\r\n\r\n| operation   | `_borrower` parameter in event `CdpUpdated`|\r\n| --------       | ------- |\r\n| openCdp    | [CDP owner]  |\r\n| closeCdp    | `msg.sender` passed to `CdpManager.closeCdp()`|\r\n| adjustCdp   | [CDP owner] |\r\n\r\nNote that `CdpUpdated` emit by `CdpManager.syncAccounting()` **always** use [CDP owner] for `_borrower`.\r\n\r\nDo we agree that to make it consistent by replacing `msg.sender` in `BorrowerOperations.closeCdp()` with [CDP owner]?\r\n\r\n```diff\r\n-- cdpManager.closeCdp(_cdpId, msg.sender, debt, coll);\r\n++ cdpManager.closeCdp(_cdpId, _borrower, debt, coll);\r\n```\r\n\r\n`msg.sender` is better because we can get the `Owner` via theGraph binding in the event handler. Wisdom says just add both to the event.\r\n\r\nDoing CDP owner in [PR 688](https://github.com/ebtc-protocol/ebtc/pull/688).\r\n\r\nAcknowledged.\r\n\r\n**Cantina:** Acknowledged.\r\n",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1740340974",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/31#issuecomment-1740340974",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/31",
    "id": 1740340974,
    "node_id": "IC_kwDOKBuOEs5nu37u",
    "user": {
     "login": "rayeaster",
     "id": 1487283,
     "node_id": "MDQ6VXNlcjE0ODcyODM=",
     "avatar_url": "https://avatars.githubusercontent.com/u/1487283?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/rayeaster",
     "html_url": "https://github.com/rayeaster",
     "followers_url": "https://api.github.com/users/rayeaster/followers",
     "following_url": "https://api.github.com/users/rayeaster/following{/other_user}",
     "gists_url": "https://api.github.com/users/rayeaster/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/rayeaster/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/rayeaster/subscriptions",
     "organizations_url": "https://api.github.com/users/rayeaster/orgs",
     "repos_url": "https://api.github.com/users/rayeaster/repos",
     "events_url": "https://api.github.com/users/rayeaster/events{/privacy}",
     "received_events_url": "https://api.github.com/users/rayeaster/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/29/2023",
    "updated_at": "2023-09-29T05:40:55Z",
    "author_association": "COLLABORATOR",
    "body": "a quick summary from above findings\r\n\r\n| operation   | `_borrower` parameter in event `CdpUpdated`|\r\n| --------       | ------- |\r\n| openCdp    | [CDP owner]  |\r\n| closeCdp    | `msg.sender` passed to `CdpManager.closeCdp()`|\r\n| adjustCdp   | [CDP owner] |\r\n\r\nNote that `CdpUpdated` emit by `CdpManager.syncAccounting()` **always** use [CDP owner] for `_borrower`\r\n\r\n@dapp-whisperer do we agree that to make it consistent by replacing `msg.sender` in `BorrowerOperations.closeCdp()` with [CDP owner]?\r\n\r\n```diff\r\n-- cdpManager.closeCdp(_cdpId, msg.sender, debt, coll);\r\n++ cdpManager.closeCdp(_cdpId, _borrower, debt, coll);\r\n```\r\n",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1740340974/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1742958352",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/31#issuecomment-1742958352",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/31",
    "id": 1742958352,
    "node_id": "IC_kwDOKBuOEs5n428Q",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/2/2023",
    "updated_at": "2023-10-02T12:51:26Z",
    "author_association": "COLLABORATOR",
    "body": "@dapp-whisperer should ask Basado here\r\n\r\n2 cents are that msg.sender is better because we can get the Owner via theGraph binding in the event handler",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1742958352/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1742958691",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/31#issuecomment-1742958691",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/31",
    "id": 1742958691,
    "node_id": "IC_kwDOKBuOEs5n43Bj",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/2/2023",
    "updated_at": "2023-10-02T12:51:41Z",
    "author_association": "COLLABORATOR",
    "body": "Wisdom says just add both to the event",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1742958691/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1758436251",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/31#issuecomment-1758436251",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/31",
    "id": 1758436251,
    "node_id": "IC_kwDOKBuOEs5oz5ub",
    "user": {
     "login": "dapp-whisperer",
     "id": 69157701,
     "node_id": "MDQ6VXNlcjY5MTU3NzAx",
     "avatar_url": "https://avatars.githubusercontent.com/u/69157701?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/dapp-whisperer",
     "html_url": "https://github.com/dapp-whisperer",
     "followers_url": "https://api.github.com/users/dapp-whisperer/followers",
     "following_url": "https://api.github.com/users/dapp-whisperer/following{/other_user}",
     "gists_url": "https://api.github.com/users/dapp-whisperer/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/dapp-whisperer/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/dapp-whisperer/subscriptions",
     "organizations_url": "https://api.github.com/users/dapp-whisperer/orgs",
     "repos_url": "https://api.github.com/users/dapp-whisperer/repos",
     "events_url": "https://api.github.com/users/dapp-whisperer/events{/privacy}",
     "received_events_url": "https://api.github.com/users/dapp-whisperer/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/11/2023",
    "updated_at": "2023-10-11T19:56:02Z",
    "author_association": "COLLABORATOR",
    "body": "doing [CDP owner] ",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1758436251/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/31/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#31"
 },
 {
  "id": 1910115266,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/30",
  "title": "Governance can to end or extend the grace period even when a grace period is already ongoing",
  "created_by": "StErMi",
  "created_at": "9/24/2023",
  "body": "**Context:** [CdpManagerStorage.sol#L112-L124](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/CdpManagerStorage.sol#L112-L124)\r\n\r\n**Description:**\r\n\r\nThe `setGracePeriod` function allows an authed user to update the `recoveryModeGracePeriod` state variables that directly influence in real time the status of the grace period.\r\n\r\nBy allowing the user to change the duration of the grace period even when a grace period has already started, it allows the authed user to end the grace period earlier than expected or extend it more than it was expected once triggered.\r\n\r\n- Scenario 1: `recoveryModeGracePeriod = 60 minutes`, `lastGracePeriodStartTimestamp = 30 minutes ago`. If `setGracePeriod(5 minutes)` is executed, it allows the authed user to end the ongoing grace period before expected.\r\n- Scenario 2: `recoveryModeGracePeriod = 60 minutes`, `lastGracePeriodStartTimestamp = 59 minutes ago`. If `setGracePeriod(200 minutes)` is executed, it allows the authed user to extend the ongoing grace period even if it would have ended in `1 minute`.\r\n\r\n**Recommendation:**\r\n\r\nIf Badger considers the behavior correct, it should:\r\n1) document this behavior in the `setGracePeriod` natspec documentation\r\n2) document this behavior on their website/UI to let the user know of this possibility\r\n\r\nIf this behavior is not expected and there is an ongoing grace period event, the `newGracePeriod` duration should be saved in a temporary state variable and used only once the current grace period is ended (in order to not directly influence the ongoing grace period duration).\r\nIf no grace period has started yet but would be triggered by `syncGlobalAccountingAndGracePeriod`executed in `setGracePeriod`, Badger should probably consider updating `recoveryModeGracePeriod` before executing `syncGlobalAccountingAndGracePeriod` that otherwise would trigger the new grace period with the \"old\" duration.\r\n\r\n**BadgerDao:** I believe we should acknowledge this as it's a race condition that requires multiple external scenarios to happen.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1742933049",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/30#issuecomment-1742933049",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/30",
    "id": 1742933049,
    "node_id": "IC_kwDOKBuOEs5n4ww5",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/2/2023",
    "updated_at": "2023-10-02T12:33:59Z",
    "author_association": "COLLABORATOR",
    "body": "I believe we should ack this as it's a race condition that requires multiple external scenarios to happen",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1742933049/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1744271730",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/30#issuecomment-1744271730",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/30",
    "id": 1744271730,
    "node_id": "IC_kwDOKBuOEs5n93ly",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/3/2023",
    "updated_at": "2023-10-03T06:10:49Z",
    "author_association": "COLLABORATOR",
    "body": "Ack",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1744271730/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/30/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#30"
 },
 {
  "id": 1910115084,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/29",
  "title": "External entities could start/end the grace period, even when the grace period should not be started/ended",
  "created_by": "StErMi",
  "created_at": "9/24/2023",
  "body": "**Context:** [CdpManagerStorage.sol#L77-L87](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/CdpManagerStorage.sol#L77-L87)\r\n\r\n**Description:**\r\n\r\nThe `syncGracePeriod` in `CdpManagerStorage` allows anyone to synchronize the grace period based on the current system debt, collateral and price. The problem with the implementation is that it does not trigger the synchronization of the `stETH` index and the distribution of the splitting fees that could bring the system in `RM` or \"normal mode\" based on the new index value, the amount of fee split and the price of `stETH`:\r\n\r\n```solidity\r\nfunction syncGracePeriod() public {\r\n    uint256 price = priceFeed.fetchPrice();\r\n    uint256 tcr = _getTCR(price);\r\n    bool isRecoveryMode = _checkRecoveryModeForTCR(tcr);\r\n\r\n    if (isRecoveryMode) {\r\n        _startGracePeriod(tcr);\r\n    } else {\r\n        _endGracePeriod(tcr);\r\n    }\r\n}\r\n```\r\n\r\nBased on the status of the system and the status of the grace period, calling the function could reset the grace period when it should not be resetted or start a grace period when it should not be started.\r\n\r\n**Recommendation:**\r\n\r\nBadger should remove the function and move the logic of it directly inside `syncGlobalAccountingAndGracePeriod` (the only function that is directly calling it).\r\n\r\nExternal entities that want to only synchronize the grace period should be allowed to do so only via the execution of `syncGlobalAccountingAndGracePeriod`.\r\n\r\n\r\n**BadgerDao:** Addressed in [PR 667](https://github.com/ebtc-protocol/ebtc/pull/667).\r\n\r\n**Cantina:** The recommendations have been correctly implemented in [PR 667](https://github.com/ebtc-protocol/ebtc/pull/667).\r\n\r\n**BadgerDAO:** Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1740326046",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/29#issuecomment-1740326046",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/29",
    "id": 1740326046,
    "node_id": "IC_kwDOKBuOEs5nu0Se",
    "user": {
     "login": "rayeaster",
     "id": 1487283,
     "node_id": "MDQ6VXNlcjE0ODcyODM=",
     "avatar_url": "https://avatars.githubusercontent.com/u/1487283?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/rayeaster",
     "html_url": "https://github.com/rayeaster",
     "followers_url": "https://api.github.com/users/rayeaster/followers",
     "following_url": "https://api.github.com/users/rayeaster/following{/other_user}",
     "gists_url": "https://api.github.com/users/rayeaster/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/rayeaster/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/rayeaster/subscriptions",
     "organizations_url": "https://api.github.com/users/rayeaster/orgs",
     "repos_url": "https://api.github.com/users/rayeaster/repos",
     "events_url": "https://api.github.com/users/rayeaster/events{/privacy}",
     "received_events_url": "https://api.github.com/users/rayeaster/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/29/2023",
    "updated_at": "2023-09-29T05:15:39Z",
    "author_association": "COLLABORATOR",
    "body": "PR is here https://github.com/Badger-Finance/ebtc/pull/667",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1740326046/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1740330723",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/29#issuecomment-1740330723",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/29",
    "id": 1740330723,
    "node_id": "IC_kwDOKBuOEs5nu1bj",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/29/2023",
    "updated_at": "2023-09-29T05:23:00Z",
    "author_association": "COLLABORATOR",
    "body": "The recommendations have been correctly implemented in the PR https://github.com/Badger-Finance/ebtc/pull/667",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1740330723/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/29/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#29"
 },
 {
  "id": 1910114716,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/28",
  "title": "`PermitPositionManagerApproval` should use the correct type for the `status` parameter",
  "created_by": "StErMi",
  "created_at": "9/24/2023",
  "body": "**Context:** [BorrowerOperations.sol#L27-L30](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/BorrowerOperations.sol#L27-L30)\r\n\r\n**Description:**\r\n\r\nThe `status` parameter of the signature refers to the `enum PositionManagerApproval` value. The `Enum` type in Solidity can represent at max 256 values and are of type `uint8`.\r\n\r\nConsider to be consistent with the real type value of the `enum PositionManagerApproval` type, and change the `_PERMIT_POSITION_MANAGER_TYPEHASH` accordingly.\r\n\r\n**Recommendation:**\r\n\r\nBadger should consider updating the `_PERMIT_POSITION_MANAGER_TYPEHASH` to use `uint8` for the `status` signature parameter to match the native type of the `enum PositionManagerApproval`.\r\n\r\n**BadgerDao:** Agree with fixing this, nonce is `uint8`. Fixed in [commit 2ce7fe04 of `ebtc`](https://github.com/ebtc-protocol/ebtc/commit/2ce7fe044bc6452474c14ab0477dd709e4149de9). Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1742933704",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/28#issuecomment-1742933704",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/28",
    "id": 1742933704,
    "node_id": "IC_kwDOKBuOEs5n4w7I",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/2/2023",
    "updated_at": "2023-10-02T12:34:26Z",
    "author_association": "COLLABORATOR",
    "body": "Agree with fixing this, nonce is uint8",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1742933704/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1742956959",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/28#issuecomment-1742956959",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/28",
    "id": 1742956959,
    "node_id": "IC_kwDOKBuOEs5n42mf",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/2/2023",
    "updated_at": "2023-10-02T12:50:34Z",
    "author_association": "COLLABORATOR",
    "body": "Fixed here: https://github.com/Badger-Finance/ebtc/pull/668/commits/2ce7fe044bc6452474c14ab0477dd709e4149de9",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1742956959/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1744269566",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/28#issuecomment-1744269566",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/28",
    "id": 1744269566,
    "node_id": "IC_kwDOKBuOEs5n93D-",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/3/2023",
    "updated_at": "2023-10-03T06:08:30Z",
    "author_association": "COLLABORATOR",
    "body": "LGTM",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1744269566/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/28/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#28"
 },
 {
  "id": 1910114577,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/27",
  "title": "`LiquidationSequencer` is not synchronizing the platform when calculating the list of CDP",
  "created_by": "StErMi",
  "created_at": "9/24/2023",
  "body": "**Context:** [LiquidationSequencer.sol#L35-L87](https://github.com/Badger-Finance/ebtc/blob/feat/release-0.4/packages/contracts/contracts/LiquidationSequencer.sol#L35-L87)\r\n\r\n**Description:**\r\n\r\nThe current implementation of `LiquidationSequencer` is not executing the `syncGlobalAccountingAndGracePeriod` what would: \r\n- update the `stETH` indexes.\r\n- claim the splitting fees if needed (and remove them from the share amount of collateral).\r\n- start the Grace Period if needed.\r\n\r\nBy not doing that, the following values could be outdated and invalid (compared to the one later used by the `CdpManager.batchLiquidateCdps()`):\r\n- TCR.\r\n- Recover Mode/Normal Mode.\r\n- CDP's ICR that is calculated by calling `getICR` (and not `getSyncedICR`).\r\n\r\nBecause of this, the list of liquidable CDP returned by the function could include or exclude CDPs that instead should be excluded or included.\r\n\r\n**Recommendation:**\r\n\r\nBadger should follow the same logic, behavior and checks implemented by the `LiquidationLibrary.batchLiquidateCdps` function.\r\n\r\n**BadgerDao:** Fixed as suggested in [PR 653](https://github.com/ebtc-protocol/ebtc/pull/653).\r\n\r\n**Cantina:** Seems good to me. Please also consider the comments done in issue [\"The liquidation logic is not always using the same requirement when the system is in RM\"](https://github.com/cantinasec/review-badgerdao/issues/32).\r\n\r\n**BadgerDAO:** Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1733144240",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/27#issuecomment-1733144240",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/27",
    "id": 1733144240,
    "node_id": "IC_kwDOKBuOEs5nTa6w",
    "user": {
     "login": "rayeaster",
     "id": 1487283,
     "node_id": "MDQ6VXNlcjE0ODcyODM=",
     "avatar_url": "https://avatars.githubusercontent.com/u/1487283?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/rayeaster",
     "html_url": "https://github.com/rayeaster",
     "followers_url": "https://api.github.com/users/rayeaster/followers",
     "following_url": "https://api.github.com/users/rayeaster/following{/other_user}",
     "gists_url": "https://api.github.com/users/rayeaster/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/rayeaster/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/rayeaster/subscriptions",
     "organizations_url": "https://api.github.com/users/rayeaster/orgs",
     "repos_url": "https://api.github.com/users/rayeaster/repos",
     "events_url": "https://api.github.com/users/rayeaster/events{/privacy}",
     "received_events_url": "https://api.github.com/users/rayeaster/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/25/2023",
    "updated_at": "2023-09-25T08:14:18Z",
    "author_association": "COLLABORATOR",
    "body": "fixed as suggested in https://github.com/Badger-Finance/ebtc/pull/653",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1733144240/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1733725914",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/27#issuecomment-1733725914",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/27",
    "id": 1733725914,
    "node_id": "IC_kwDOKBuOEs5nVo7a",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/25/2023",
    "updated_at": "2023-09-25T13:34:55Z",
    "author_association": "COLLABORATOR",
    "body": "> fixed as suggested in [Badger-Finance/ebtc#653](https://github.com/Badger-Finance/ebtc/pull/653)\r\n\r\nSeems good to me. Please also consider the comments I've done here https://github.com/cantinasec/review-badgerdao/issues/32#issuecomment-1733711940",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1733725914/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/27/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#27"
 },
 {
  "id": 1846999497,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/26",
  "title": "[BCCR] Many TCR increasing operations will be blocked when TCR is between 125 and 135",
  "created_by": "dmitriia",
  "created_at": "8/11/2023",
  "body": "**Context:** [BorrowerOperations.sol#L404](https://github.com/Badger-Finance/ebtc/blob/46f8df604fe7e8b57cb0ac5ec2aca7530e87bfe0/packages/contracts/contracts/BorrowerOperations.sol#404), [BorrowerOperations.sol#L650](https://github.com/Badger-Finance/ebtc/blob/46f8df604fe7e8b57cb0ac5ec2aca7530e87bfe0/packages/contracts/contracts/BorrowerOperations.sol#L650)\r\n\r\n**Description:** It looks like after BCCR introduction some healthy TCR increasing openings and adjustments are now blocked.\r\n\r\nIf `oldTCR < newTCR`, but `ICR <= BCCR`, the operation can be denied if `TCR < BCCR`: \r\n\r\n- [BorrowerOperations.sol#L398-L413](https://github.com/Badger-Finance/ebtc/blob/46f8df604fe7e8b57cb0ac5ec2aca7530e87bfe0/packages/contracts/contracts/BorrowerOperations.sol#L398-L413)\r\n\r\n```solidity\r\nif (isRecoveryMode) {\r\n    _requireICRisAboveCCR(vars.ICR);\r\n} else {\r\n    _requireICRisAboveMCR(vars.ICR);\r\n    uint newTCR = _getNewTCRFromCdpChange(vars.netColl, true, vars.debt, true, vars.price); // bools: coll increase, debt increase\r\n    // See line below\r\n    if (vars.ICR <= BUFFERED_CCR) {\r\n        // Any open CDP is a debt increase so this check is safe\r\n\r\n        // If you're dragging TCR toward buffer or RM, we add an extra check for TCR\r\n        // Which forces you to raise TCR to 135+\r\n        _requireNewTCRisAboveBufferedCCR(newTCR);\r\n    } else {\r\n        _requireNewTCRisAboveCCR(newTCR);\r\n    }\r\n}\r\n```\r\n\r\nSimilarly, when it's ICR increasing collateral withdrawal coupled with debt repayment, or debt increasing coupled with collateral posting, i.e. when one adjusts, making position less risky in the process, it will be blocked when `newTCR < BCCR`: \r\n\r\n- [BorrowerOperations.sol#L634-L660](https://github.com/Badger-Finance/ebtc/blob/46f8df604fe7e8b57cb0ac5ec2aca7530e87bfe0/packages/contracts/contracts/BorrowerOperations.sol#L634-L660)\r\n\r\n```solidity\r\nif (_isRecoveryMode) {\r\n    // ...\r\n} else {\r\n    // if Normal Mode\r\n    _requireICRisAboveMCR(_vars.newICR);\r\n    _vars.newTCR = _getNewTCRFromCdpChange(\r\n        // ...\r\n    );\r\n       // See line below\r\n    if ((_isDebtIncrease || _collWithdrawal > 0) && _vars.newICR <= BUFFERED_CCR) {\r\n        // Adding debt or reducing coll has negative impact on TCR, do a stricter check\r\n\r\n        // If you're dragging TCR toward buffer or RM, we add an extra check for TCR\r\n        // Which forces you to raise TCR to 135+\r\n        _requireNewTCRisAboveBufferedCCR(_vars.newTCR);\r\n    } else {\r\n        // Other cases have a laxer check\r\n        _requireNewTCRisAboveCCR(_vars.newTCR);\r\n    }\r\n}\r\n```\r\n\r\nNote, error message in these cases will incorrectly say about *TCR decreasing*:\r\n\r\n- [BorrowerOperations.sol#L670-L675](https://github.com/Badger-Finance/ebtc/blob/46f8df604fe7e8b57cb0ac5ec2aca7530e87bfe0/packages/contracts/contracts/BorrowerOperations.sol#L670-L675)\r\n\r\n```solidity\r\nfunction _requireNewTCRisAboveBufferedCCR(uint _newTCR) internal pure {\r\n    require(\r\n        _newTCR >= BUFFERED_CCR,\r\n        // See line below\r\n        \"BorrowerOps: A TCR decreasing operation that would result in TCR < BUFFERED_CCR is not permitted\"\r\n    );\r\n}\r\n```\r\n\r\nPrevious to BCCR introduction this was true as both checks happen in non-RM state and if now it's RM the TCR has to be decreased indeed. But once logic becomes 2-tiered it not the case.\r\n\r\nIt looks like both conditions should involve `&& newTCR < oldTCR`, as if it's not then nothing bad is happening, the system health increases, just not by that much that it's desired, but it might be impossible to achieve for small CDPs in big TVL conditions, which isn't a good reason to block those as system health would have strictly improved.\r\n\r\nImpact: many CPD opening and, mostly importantly, CDP adjustment operations that makes the system healthier by increasing TCR will be denied. This is an issue both from UX perspective and protocol stability as the cumulative impact here is that such operations, mostly coming from small CDPs (which will constitute the bigger percentage of all accounts over time along with TVL growth) will not be carried out, so there will be a downward pressure on TCR compared to the situation before the change. I.e. some operations will be carried over with bigger funds brought in, but this will be less and less possible for an average CDP owner over time, and the bigger share of operations will be just cancelled. This will result in lower TCR.\r\n\r\nPer high likelihood and medium impact setting the severity to be high.\r\n\r\n**Recommendation:** Consider requiring the BCCR only when where was a decrease of TCR as a result of the operation, which was the initial rationale for buffer introduction, for example:\r\n\r\n- [BorrowerOperations.sol#L375-L413](https://github.com/Badger-Finance/ebtc/blob/46f8df604fe7e8b57cb0ac5ec2aca7530e87bfe0/packages/contracts/contracts/BorrowerOperations.sol#L375-L413)\r\n\r\n```diff\r\n- bool isRecoveryMode = _checkRecoveryModeForTCR(_getTCR(vars.price));\r\n+ uint oldTCR = _getTCR(vars.price);\r\n+ bool isRecoveryMode = _checkRecoveryModeForTCR(oldTCR);\r\n\r\n  vars.debt = _EBTCAmount;\r\n\r\n  // Sanity check\r\n  require(vars.netColl > 0, \"BorrowerOperations: zero collateral for openCdp()!\");\r\n\r\n  uint _netCollAsShares = collateral.getSharesByPooledEth(vars.netColl);\r\n  uint _liquidatorRewardShares = collateral.getSharesByPooledEth(LIQUIDATOR_REWARD);\r\n\r\n  // ICR is based on the net coll, i.e. the requested coll amount - fixed liquidator incentive gas comp.\r\n  vars.ICR = LiquityMath._computeCR(vars.netColl, vars.debt, vars.price);\r\n\r\n  // NICR uses shares to normalize NICR across CDPs opened at different pooled ETH / shares ratios\r\n  vars.NICR = LiquityMath._computeNominalCR(_netCollAsShares, vars.debt);\r\n\r\n  /**\r\n      In recovery move, ICR must be greater than CCR\r\n      CCR > MCR (125% vs 110%)\r\n\r\n      In normal mode, ICR must be greater thatn MCR\r\n      Additionally, the new system TCR after the CDPs addition must be >CCR\r\n  */\r\n  if (isRecoveryMode) {\r\n      _requireICRisAboveCCR(vars.ICR);\r\n  } else {\r\n      _requireICRisAboveMCR(vars.ICR);\r\n      uint newTCR = _getNewTCRFromCdpChange(vars.netColl, true, vars.debt, true, vars.price); // bools: coll increase, debt increase\r\n\r\n-     if (vars.ICR <= BUFFERED_CCR) {\r\n+     // When new TCR is worse than before, it has to be above the buffer\r\n+     if (vars.ICR <= BUFFERED_CCR && newTCR < oldTCR) {\r\n          // Any open CDP is a debt increase so this check is safe\r\n\r\n          // If you're dragging TCR toward buffer or RM, we add an extra check for TCR\r\n          // Which forces you to raise TCR to 135+\r\n          _requireNewTCRisAboveBufferedCCR(newTCR);\r\n      } else {\r\n          _requireNewTCRisAboveCCR(newTCR);\r\n      }\r\n  }\r\n```\r\n\r\nSimilarly for `_requireValidAdjustmentInCurrentMode()`, assuming that `_vars.oldTCR` was populated before just as above via `_vars.oldTCR = _getTCR(vars.price)`:\r\n\r\n- [BorrowerOperations.sol#L634-L660](https://github.com/Badger-Finance/ebtc/blob/46f8df604fe7e8b57cb0ac5ec2aca7530e87bfe0/packages/contracts/contracts/BorrowerOperations.sol#L634-L660)\r\n\r\n```diff\r\n  if (_isRecoveryMode) {\r\n      // ...\r\n  } else {\r\n      // if Normal Mode\r\n      _requireICRisAboveMCR(_vars.newICR);\r\n      _vars.newTCR = _getNewTCRFromCdpChange(\r\n          // ...\r\n      );\r\n-     if ((_isDebtIncrease || _collWithdrawal > 0) && _vars.newICR <= BUFFERED_CCR) {\r\n+     if ((_isDebtIncrease || _collWithdrawal > 0) && _vars.newTCR < _vars.oldTCR && _vars.newICR <= BUFFERED_CCR) {\r\n          // Adding debt or reducing coll has negative impact on TCR, do a stricter check\r\n\r\n          // If you're dragging TCR toward buffer or RM, we add an extra check for TCR\r\n          // Which forces you to raise TCR to 135+\r\n          _requireNewTCRisAboveBufferedCCR(_vars.newTCR);\r\n      } else {\r\n          // Other cases have a laxer check\r\n          _requireNewTCRisAboveCCR(_vars.newTCR);\r\n      }\r\n  }\r\n```\r\n\r\n**BadgerDao:** Personally not as concerned with this fix being added until the Economic Risks are fully modelled, I think this can make some setups cheaper given issue [\"[BCCR] CDP closing can be used for whale sniping\"](https://github.com/cantinasec/review-badgerdao/issues/23).\r\n\r\nThe change in logic was reverted (see [BorrowerOperations.sol#L790-L846](https://github.com/Badger-Finance/ebtc/blob/1b0a073075484670f24947e0f455031144d3a1e0/packages/contracts/contracts/BorrowerOperations.sol#L790-L846)).\r\n\r\n**Cantina:** Looks ok.\r\n\r\n**BadgerDAO:** Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1680151216",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/26#issuecomment-1680151216",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/26",
    "id": 1680151216,
    "node_id": "IC_kwDOKBuOEs5kJRKw",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/16/2023",
    "updated_at": "2023-08-16T08:05:34Z",
    "author_association": "COLLABORATOR",
    "body": "Personally not as concerned with this fix being added until the Economic Risks are fully modelled, I think this can make some setups cheaper given #23",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1680151216/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729340636",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/26#issuecomment-1729340636",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/26",
    "id": 1729340636,
    "node_id": "IC_kwDOKBuOEs5nE6Tc",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/21/2023",
    "updated_at": "2023-09-21T11:01:10Z",
    "author_association": "COLLABORATOR",
    "body": "The change in logic was reverted",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729340636/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729348853",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/26#issuecomment-1729348853",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/26",
    "id": 1729348853,
    "node_id": "IC_kwDOKBuOEs5nE8T1",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/21/2023",
    "updated_at": "2023-09-21T11:06:52Z",
    "author_association": "COLLABORATOR",
    "body": "https://github.com/Badger-Finance/ebtc/blob/1b0a073075484670f24947e0f455031144d3a1e0/packages/contracts/contracts/BorrowerOperations.sol#L790-L846",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729348853/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1730122665",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/26#issuecomment-1730122665",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/26",
    "id": 1730122665,
    "node_id": "IC_kwDOKBuOEs5nH5Op",
    "user": {
     "login": "dmitriia",
     "id": 6178977,
     "node_id": "MDQ6VXNlcjYxNzg5Nzc=",
     "avatar_url": "https://avatars.githubusercontent.com/u/6178977?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/dmitriia",
     "html_url": "https://github.com/dmitriia",
     "followers_url": "https://api.github.com/users/dmitriia/followers",
     "following_url": "https://api.github.com/users/dmitriia/following{/other_user}",
     "gists_url": "https://api.github.com/users/dmitriia/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/dmitriia/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/dmitriia/subscriptions",
     "organizations_url": "https://api.github.com/users/dmitriia/orgs",
     "repos_url": "https://api.github.com/users/dmitriia/repos",
     "events_url": "https://api.github.com/users/dmitriia/events{/privacy}",
     "received_events_url": "https://api.github.com/users/dmitriia/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/21/2023",
    "updated_at": "2023-09-21T18:49:06Z",
    "author_association": "COLLABORATOR",
    "body": "Looks ok",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1730122665/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/26/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#26"
 },
 {
  "id": 1846966147,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/25",
  "title": "Do not allow the `LeverageMacroBase` to override the `approval` for `eBTC/stETH` during the `_doSwap` execution",
  "created_by": "StErMi",
  "created_at": "8/11/2023",
  "body": "**Context:** [LeverageMacroBase.sol#L395-L398](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/LeverageMacroBase.sol#L395-L398), [LeverageMacroBase.sol#L417](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/LeverageMacroBase.sol#L417)\r\n\r\n**Description:** The `LeverageMacroReference` contracts that inherits from `LeverageMacroBase` executes some crucial approvals to allow the contract to repay the flashloan operations:\r\n\r\n```solidity\r\n// set allowance for flashloan lender/CDP open\r\nebtcToken.approve(_borrowerOperationsAddress, type(uint256).max);\r\nstETH.approve(_borrowerOperationsAddress, type(uint256).max);\r\nstETH.approve(_activePool, type(uint256).max);\r\n```\r\n\r\nThose approvals are done once and cannot be re-done by the `LeverageMacroReference`. \r\n\r\nThe `LeverageMacroBase._doSwap` allows the caller to specify both an arbitrary `tokenForSwap` token, `addressForApprove` address and `exactApproveAmount` that could allow the caller to override those approvals done during the `LeverageMacroReference` constructor.\r\n\r\nIf such an event happens, the `LeverageMacroReference` contract would not be able to repay any flashloan operation. Given that there is no way to re-do those initial approvals and that the flashloan operation is a hard requirement for the `doOperation` execution, it would mean that the `LeverageMacroReference` would probably not be able to execute any operation that involves the overridden token approval.\r\n\r\n**Recommendation:** BadgerDAO should consider reverting the `_doSwap` operation when\r\n\r\n- `tokenForSwap == ebtcToken` and `addressForApprove == borrowerOperationsAddress`.\r\n- `tokenForSwap == stETH` and `addressForApprove == borrowerOperationsAddress`.\r\n- `tokenForSwap == stETH` and `addressForApprove == activePool`.\r\n\r\n**BadgerDao:** Thinking this could be solved by granting temporary allowance just to repay the flashloan.\r\n\r\n**Cantina:** It could be an option which probably would be more security proof compared to giving max allowance.\r\nThe approval should be done **after** the execution of `_handleOperation` in `onFlashLoan` so you know for sure that any \"custom\" approval done by the `_doSwaps` in `_handleOperation` does not override the one done during the flashloan to repay the flashloan as soon as the context move back to `BorrowOperations` or `ActivePool`.\r\n\r\nProbably `_openCdpCallback`, `_closeCdpCallback` and `_adjustCdpCallback` have to also do custom approvals with the needed amounts of `eBTC` and `stETH` to perform the operation.\r\n\r\nTo recap; it could make sense but:\r\n\r\n1) you are going to increase gas for FL and eBTC interaction (open, adjust, close) because you have more calls to `approve`.\r\n2) probably it would need `approve(0)` at least for `stETH` because of rounding down after the transfer? (see [lido's \"Account's stETH balance getting lower on 1 or 2 wei due to rounding down integer math\" issue](https://github.com/lidofinance/lido-dao/issues/442)).\r\n\r\n**BadgerDao:** Wouldn't you agree with adding the approvals here at the end of `onFlashLoan`? We'd have the exact amount (amount + fee) to approve and it's always executed at the end of the Flashloan.\r\n\r\nOpted to add a simple function to reset approvals in the `LeverageMacroReference\r\n` (see [PR 579](https://github.com/ebtc-protocol/ebtc/pull/579)).\r\n\r\nAcknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1677140845",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/25#issuecomment-1677140845",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/25",
    "id": 1677140845,
    "node_id": "IC_kwDOKBuOEs5j9yNt",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/14/2023",
    "updated_at": "2023-08-14T11:21:59Z",
    "author_association": "COLLABORATOR",
    "body": "Thinking this could be solved by granting temporary allowance just to repay the flashloan",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1677140845/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1679016166",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/25#issuecomment-1679016166",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/25",
    "id": 1679016166,
    "node_id": "IC_kwDOKBuOEs5kE8Dm",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/15/2023",
    "updated_at": "2023-08-15T14:21:06Z",
    "author_association": "COLLABORATOR",
    "body": "> Thinking this could be solved by granting temporary allowance just to repay the flashloan\r\n\r\nIt could be an option which probably would be more security proof compared to giving max allowance.\r\nThe approval should be done **after** the execution of `_handleOperation` in `onFlashLoan` so you know for sure that any \"custom\" approval done by the `_doSwaps` in `_handleOperation` does not override the one done during the flashloan to repay the flashloan as soon as the context move back to `BorrowOperations` or `ActivePool`.\r\n\r\nProbably `_openCdpCallback`, `_closeCdpCallback` and `_adjustCdpCallback` have to also do custom approvals with the needed amounts of `eBTC` and `stETH` to perform the operation.\r\n\r\nTo recap: it could make sense but \r\n\r\n1) you are going to increase gas for FL and eBTC interaction (open, adjust, close) because you have more calls to `approve`\r\n2) probably it would need `approve(0)` at least for `stETH` because of rounding down after the transfer? (see https://github.com/lidofinance/lido-dao/issues/442)",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1679016166/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1679316074",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/25#issuecomment-1679316074",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/25",
    "id": 1679316074,
    "node_id": "IC_kwDOKBuOEs5kGFRq",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/15/2023",
    "updated_at": "2023-08-15T17:16:12Z",
    "author_association": "COLLABORATOR",
    "body": "<img width=\"683\" alt=\"Screenshot 2023-08-15 at 19 15 28\" src=\"https://github.com/cantinasec/review-badgerdao/assets/13383782/e379fe29-544c-4762-a696-8ac1d1f40d57\">\r\n\r\n@StErMi wouldn't you agree with adding the approvals here at the end of `onFlashLoan`?\r\nWe'd have the exact amount (amount + fee) to approve and it's always executed at the end of the Flashloan\r\n",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1679316074/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1679316878",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/25#issuecomment-1679316878",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/25",
    "id": 1679316878,
    "node_id": "IC_kwDOKBuOEs5kGFeO",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/15/2023",
    "updated_at": "2023-08-15T17:16:56Z",
    "author_association": "COLLABORATOR",
    "body": "I guess we could also add approvals before each operation as well",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1679316878/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1679317255",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/25#issuecomment-1679317255",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/25",
    "id": 1679317255,
    "node_id": "IC_kwDOKBuOEs5kGFkH",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/15/2023",
    "updated_at": "2023-08-15T17:17:15Z",
    "author_association": "COLLABORATOR",
    "body": "We could also just add a \"reset approvals\" function just in case",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1679317255/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1680079596",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/25#issuecomment-1680079596",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/25",
    "id": 1680079596,
    "node_id": "IC_kwDOKBuOEs5kI_rs",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/16/2023",
    "updated_at": "2023-08-16T07:09:26Z",
    "author_association": "COLLABORATOR",
    "body": "Opted to add a simple function to reset approvals in the LeverageMacroReference\r\nhttps://github.com/Badger-Finance/ebtc/pull/579\r\n",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1680079596/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/25/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#25"
 },
 {
  "id": 1846909084,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/24",
  "title": "Outdated comments, error messages, naming across the codebase",
  "created_by": "dmitriia",
  "created_at": "8/11/2023",
  "body": "**Context:** [CdpManagerStorage.sol#L160-L163](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/CdpManagerStorage.sol#L160-L163), [CdpManagerStorage.sol#L328-L331](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/CdpManagerStorage.sol#L328-L331), [CdpManagerStorage.sol#L500-L502](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/CdpManagerStorage.sol#L500-L502), [PriceFeed.sol#L783-L789](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/PriceFeed.sol#L783-L789), [LeverageMacroBase.sol#L26](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/LeverageMacroBase.sol#L26), [PriceFeed.sol#L789-L806](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/PriceFeed.sol#L789-L806), [BorrowerOperations.sol#L439-L442](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/BorrowerOperations.sol#L439-L442), [BorrowerOperations.sol#L81-L92)](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/BorrowerOperations.sol#L81-L92), [BorrowerOperations.sol#L162-L165](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/BorrowerOperations.sol#L162-L165), [BorrowerOperations.sol#L176-L178](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/BorrowerOperations.sol#L176-L178), [BorrowerOperations.sol#L189-L191](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/BorrowerOperations.sol#L189-L191), [BorrowerOperations.sol#L219-L223](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/BorrowerOperations.sol#L219-L223), [BorrowerOperations.sol#L605-L624](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/BorrowerOperations.sol#L605-L624)\r\n\r\n**Description:** Comments, error messages, naming can be corrected, per list below.\r\n\r\n**Recommendation:** `_closeCdpWithoutRemovingSortedCdps()` error message:\r\n\r\n- [CdpManagerStorage.sol#L160-L163](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/CdpManagerStorage.sol#L160-L163):\r\n\r\n```diff\r\n  require(\r\n      closedStatus != Status.nonExistent && closedStatus != Status.active,\r\n-     \"CdpManagerStorage: close non-exist or non-active CDP!\"\r\n+     \"CdpManagerStorage: close non-exist or active CDP!\"\r\n  );\r\n```\r\n\r\nCheck is already done in the only caller above, `_closeCdpWithoutRemovingSortedCdps()`:\r\n\r\n- [CdpManagerStorage.sol#L328-L331](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/CdpManagerStorage.sol#L328-L331):\r\n\r\n```diff\r\n- require(\r\n-      cdpStatus != Status.nonExistent && cdpStatus != Status.active,\r\n-     \"CdpManagerStorage: remove non-exist or non-active CDP!\"\r\n- );\r\n```\r\n\r\nNaming:\r\n\r\n- [CdpManagerStorage.sol#L500-L502](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/CdpManagerStorage.sol#L500-L502):\r\n\r\n```diff\r\n- function _requireMoreThanOneCdpInSystem(uint CdpOwnersArrayLength) internal view {\r\n+ function _requireMoreThanOneCdpInSystem(uint CdpIdsArrayLength) internal view {\r\n      require(\r\n-         CdpOwnersArrayLength > 1 && sortedCdps.getSize() > 1,\r\n+         CdpIdsArrayLength > 1 && sortedCdps.getSize() > 1,\r\n          // ...\r\n```\r\n\r\n`_formatClAggregateAnswer()` description can substitute `stETH:BTC` feed that aren't used with `stETH:ETH` one in `_stEthEthAnswer` and `_stEthEthDecimals` params:\r\n\r\n- [PriceFeed.sol#L783-L789](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/PriceFeed.sol#L783-L789):\r\n\r\n```solidity\r\n// @notice Returns the price of stETH:BTC in 18 decimals denomination\r\n// @param _ethBtcAnswer CL price retrieve from ETH:BTC feed\r\n// @param _stEthEthAnswer CL price retrieve from stETH:BTC feed\r\n// @param _ethBtcDecimals ETH:BTC feed decimals\r\n// @param _stEthEthDecimals stETH:BTC feed decimalss\r\n// @return The aggregated calculated price for stETH:BTC\r\nfunction _formatClAggregateAnswer(\r\n    // ...\r\n```\r\n\r\nLeverageMacroBase can implement `IERC3156FlashBorrower`:\r\n\r\n- [LeverageMacroBase.sol#L26](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/LeverageMacroBase.sol#L26)\r\n\r\n```solidity\r\ncontract LeverageMacroBase {\r\n    // ...\r\n```\r\n\r\n`_formatClAggregateAnswer()` logic can be simplified to:\r\n\r\n```solidity\r\n(uint256(_ethBtcAnswer) * uint256(_stEthEthAnswer) * LiquityMath.DECIMAL_PRECISION) /\r\n10 ** (_stEthEthDecimals + _ethBtcDecimals)\r\n```\r\n\r\nCurrent implementation is a bit more prone to overflows (can break when bigger decimals number exceeds `30`):\r\n\r\n- [PriceFeed.sol#L789-L806](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/PriceFeed.sol#L789-L806)\r\n\r\n```solidity\r\nfunction _formatClAggregateAnswer(\r\n    int256 _ethBtcAnswer,\r\n    int256 _stEthEthAnswer,\r\n    uint8 _ethBtcDecimals,\r\n    uint8 _stEthEthDecimals\r\n) internal view returns (uint256) {\r\n    uint256 _decimalDenominator = _stEthEthDecimals > _ethBtcDecimals\r\n        ? _stEthEthDecimals\r\n        : _ethBtcDecimals;\r\n    uint256 _scaledDecimal = _stEthEthDecimals > _ethBtcDecimals\r\n        ? 10 ** (_stEthEthDecimals - _ethBtcDecimals)\r\n        : 10 ** (_ethBtcDecimals - _stEthEthDecimals);\r\n    return\r\n        (_scaledDecimal *\r\n            uint256(_ethBtcAnswer) *\r\n            uint256(_stEthEthAnswer) *\r\n            LiquityMath.DECIMAL_PRECISION) / 10 ** (_decimalDenominator * 2);\r\n}\r\n```\r\n\r\nThese comments need to be removed or rewritten:\r\n\r\n`closeCdp()` description:\r\n\r\n- [BorrowerOperations.sol#L439-L442](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/BorrowerOperations.sol#L439-L442):\r\n\r\n```diff\r\n  /**\r\n- allows a borrower to repay all debt, withdraw all their collateral, and close their Cdp. Requires the borrower have a eBTC balance sufficient to repay their cdp's debt, excluding gas compensation - i.e. `(debt - 50)` eBTC.\r\n+ allows a borrower to repay all debt, withdraw all their collateral, and close their Cdp.\r\n  */\r\n  function closeCdp(bytes32 _cdpId) external override {\r\n      // ...\r\n```\r\n\r\n- [BorrowerOperations.sol#L81-L92](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/BorrowerOperations.sol#L81-L92)\r\n\r\n```solidity\r\nconstructor(\r\n    // ...\r\n) LiquityBase(_activePoolAddress, _priceFeedAddress, _collTokenAddress) {\r\n    // This makes impossible to open a cdp with zero withdrawn EBTC\r\n    // TODO: Re-evaluate this\r\n    // ...\r\n```\r\n\r\n- [BorrowerOperations.sol#L162-L165](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/BorrowerOperations.sol#L162-L165)\r\n\r\n```solidity\r\n/**\r\nWithdraws `_collWithdrawal` amount of collateral from the caller’s Cdp. Executes only if the user has an active Cdp, the withdrawal would not pull the user’s Cdp below the minimum collateralization ratio, and the resulting total collateralization ratio of the system is above 150%.\r\n*/\r\nfunction withdrawColl(\r\n    // ...\r\n```\r\n\r\n- [BorrowerOperations.sol#L176-L178](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/BorrowerOperations.sol#L176-L178)\r\n\r\n```solidity\r\n// ...\r\nIssues `_amount` of eBTC from the caller’s Cdp to the caller. Executes only if the Cdp's collateralization ratio would remain above the minimum, and the resulting total collateralization ratio is above 150%.\r\n */\r\nfunction withdrawEBTC(\r\n    // ...\r\n```\r\n\r\n- [BorrowerOperations.sol#L189-L191](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/BorrowerOperations.sol#L189-L191)\r\n\r\n```solidity\r\n// ...\r\nrepay `_amount` of eBTC to the caller’s Cdp, subject to leaving 50 debt in the Cdp (which corresponds to the 50 eBTC gas compensation).\r\n*/\r\nfunction repayEBTC(\r\n    // ...\r\n```\r\n\r\n- [BorrowerOperations.sol#L219-L223](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/BorrowerOperations.sol#L219-L223)\r\n\r\n```solidity\r\n/**\r\nenables a borrower to simultaneously change both their collateral and debt, subject to all the restrictions that apply to individual increases/decreases of each quantity with the following particularity: if the adjustment reduces the collateralization ratio of the Cdp, the function only executes if the resulting total collateralization ratio is above 150%. The borrower has to provide a `_maxFeePercentage` that he/she is willing to accept in case of a fee slippage, i.e. when a redemption transaction is processed first, driving up the issuance fee. The parameter is ignored if the debt is not increased with the transaction.\r\n*/\r\n// TODO optimization candidate\r\nfunction adjustCdpWithColl(\r\n// ...\r\n```\r\n\r\n- [BorrowerOperations.sol#L605-L624](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/BorrowerOperations.sol#L605-L624)\r\n\r\n```solidity\r\nfunction _requireValidAdjustmentInCurrentMode(\r\n    bool _isRecoveryMode,\r\n    uint _collWithdrawal,\r\n    bool _isDebtIncrease,\r\n    LocalVariables_adjustCdp memory _vars\r\n) internal view {\r\n    /*\r\n     *In Recovery Mode, only allow:\r\n     *\r\n     * - Pure collateral top-up\r\n     * - Pure debt repayment\r\n     * - Collateral top-up with debt repayment\r\n     * - A debt increase combined with a collateral top-up which makes the\r\n     * ICR >= 150% and improves the ICR (and by extension improves the TCR).\r\n     *\r\n     * In Normal Mode, ensure:\r\n     *\r\n     * - The new ICR is above MCR\r\n     * - The adjustment won't pull the TCR below CCR\r\n     */\r\n```\r\n\r\n**BadgerDao:** Some comments may still be off. Acknowledged.\r\n\r\n**Cantina:** Acknowledged.\r\n",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729340919",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/24#issuecomment-1729340919",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/24",
    "id": 1729340919,
    "node_id": "IC_kwDOKBuOEs5nE6X3",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/21/2023",
    "updated_at": "2023-09-21T11:01:25Z",
    "author_association": "COLLABORATOR",
    "body": "Some comments may still be off",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729340919/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/24/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#24"
 },
 {
  "id": 1846867329,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/23",
  "title": "[BCCR] CDP closing can be used for whale sniping",
  "created_by": "dmitriia",
  "created_at": "8/11/2023",
  "body": "**Context:** [BorrowerOperations.sol#L451-L475](https://github.com/Badger-Finance/ebtc/blob/46f8df604fe7e8b57cb0ac5ec2aca7530e87bfe0/packages/contracts/contracts/BorrowerOperations.sol#L451-L475)\r\n\r\n**Description:** After BCCR introduction on CDP closing only `newTCR > CCR` is required, a whale sniper like scenario looks to be possible with an attacker preliminary opening two big CDPs (each can be a set of CDPs for granularity): first a `good` well capitalized one, at `goodICR >> BCCR`, and then one `bad`, at `badICR = MCR + epsilon1`, which is possible as `good` first one drags TCR up above BCCR.\r\n\r\nNow, on observing any event that decreases the TCR, e.g. slashing (rare) or big enough oracle reading downtick (frequent enough), the attacker can front run the event transaction and remove `good` CDP (some combination of them), so that `newTCR = CCR + epsilon2`, and the event transaction triggers RM, which attacker back-runs with target liquidation.\r\n\r\nOverall this requires CDP prepositioning and index/price update transaction sandwiching. Since keeping the said CDPs has low risk, the total cost for the attacker is gas and the cost of the capital involved. It can be viable given big enough expected profit up to `10%` of the whale collateral.\r\n\r\n- [BorrowerOperations.sol#L451-L475](https://github.com/Badger-Finance/ebtc/blob/46f8df604fe7e8b57cb0ac5ec2aca7530e87bfe0/packages/contracts/contracts/BorrowerOperations.sol#L451-L475)\r\n\r\n```solidity\r\nfunction closeCdp(bytes32 _cdpId) external override {\r\n    // ...\r\n\r\n    uint newTCR = _getNewTCRFromCdpChange(\r\n        collateral.getPooledEthByShares(coll),\r\n        false,\r\n        debt,\r\n        false,\r\n        price\r\n    );\r\n    // See the line below\r\n    _requireNewTCRisAboveCCR(newTCR);\r\n\r\n    cdpManager.removeStake(_cdpId);\r\n    // ...\r\n```\r\n\r\nImpact: protocol manipulation in order to liquidate a specific CDP that isn't liquidatable by itself is possible via `closeCdp()`.\r\n\r\nPer medium likelihood and high principal funds loss impact for CDP owner setting the severity to be high.\r\n\r\n**Recommendation:** Since after BCCR introduction CDP adjusting is controlled at `135` TCR, while closing is at `125` TCR anyway (i.e. it's not a free exit), it might be reasonably to consider controlling it at `130` as a part of BCCR introduction. I.e. on the one hand it's not desirable to leave the surface open, on the another adding the very same control as for opening/adjusting might be too tight as closing is both more user sensitive operation and the cost and complexity of the attack is higher in this case.\r\n\r\n\r\n**BadgerDao:** Agree with the finding, we have mitigated by adding a Grace Period (15 minutes) before allowing Recovery Mode to trigger liquidations (see [CdpManagerStorage.sol#L21-L124](https://github.com/ebtc-protocol/ebtc/blob/1b0a073075484670f24947e0f455031144d3a1e0/packages/contracts/contracts/CdpManagerStorage.sol#L21-L124)).\r\n\r\n**Cantina:** Overall 15 minutes seems short as the only window for target whale borrower reaction in the whale sniping scenario. In the same time it is the period for which attacker bears the risk, so when this period is short it's both narrow window for possible target reaction and low enough risk for the attacker.\r\n\r\nOn the other hand, since infinite grace period means no liquidations in RM while `ICR >= MCR`, the max grace period is also due for `setGracePeriod()`.\r\n\r\nThe changes shown in [CdpManagerStorage.sol#L21-L124](https://github.com/ebtc-protocol/ebtc/blob/1b0a073075484670f24947e0f455031144d3a1e0/packages/contracts/contracts/CdpManagerStorage.sol#L21-L124) look ok. Somewhat higher lower boundary and an introduction of the upper one are suggested, i.e. the grace period can be bounded to `[1 hour, 2 days]`, as an example.\r\n\r\n**BadgerDAO:** Acknowledged.\r\n\r\n**Cantina:** Acknowledged.\r\n",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1680152988",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/23#issuecomment-1680152988",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/23",
    "id": 1680152988,
    "node_id": "IC_kwDOKBuOEs5kJRmc",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/16/2023",
    "updated_at": "2023-08-16T08:08:32Z",
    "author_association": "COLLABORATOR",
    "body": "## Proper Attack\r\n\r\n    They can always do it\r\n\r\n    -> Raise Up (so that they allow it to be safe to raise down)\r\n    -> Raise down (so that it's at RM + ε)\r\n\r\nExample:\r\n```python\r\nSAFE_COLL 300\r\nSAFE_DEBT 150.0\r\nrisky_coll 770\r\nrisky_debt 700.0\r\nget_cr(total_coll, total_debt) 125.88235294117646\r\nTo Raise to 135 add:\r\nExtra Coll for Setup 40 ## This is the extra cost of setup + the capital for attack which is part of the Liquity Model\r\n```\r\n\r\n\r\n## Script\r\n\r\n```python\r\ndef get_debt(coll, cr):\r\n    return coll / cr * 100\r\n\r\ndef get_cr(coll, debt):\r\n    return coll / debt * 100\r\n\r\nSAFE_COLL = 300\r\nSAFE_CR = 200\r\nSAFE_DEBT = get_debt(SAFE_COLL, SAFE_CR)\r\nprint(\"SAFE_COLL\", SAFE_COLL)\r\nprint(\"SAFE_DEBT\", SAFE_DEBT)\r\n\r\nRISKY_CR = 110\r\nSYSTEM_CR = 126\r\nBUFFER_CR = 135\r\n\r\ndef main():\r\n    total_coll = SAFE_COLL\r\n    total_debt = SAFE_DEBT\r\n    risky_coll = 0\r\n    risky_debt = 0\r\n\r\n\r\n    ## Get attacker CR\r\n    while get_cr(total_coll, total_debt) > SYSTEM_CR:\r\n        risky_coll += 10\r\n        risky_debt = get_debt(risky_coll, RISKY_CR)\r\n\r\n        total_coll = SAFE_COLL + risky_coll\r\n        total_debt = SAFE_DEBT + risky_debt\r\n\r\n    print(\"risky_coll\", risky_coll)\r\n    print(\"risky_debt\", risky_debt)\r\n    print(\"get_cr(total_coll, total_debt)\", get_cr(total_coll, total_debt))\r\n\r\n    print(\"To Raise to 135 add:\")\r\n    ## We allow COLL ONLY\r\n    ## Just deposit Coll until new CR is 135 instead of 125/126\r\n    safe_coll = 0\r\n    while (get_cr(total_coll, total_debt) < BUFFER_CR):\r\n        safe_coll += 10\r\n\r\n        total_coll = total_coll + safe_coll\r\n    \r\n    print(\"Extra Coll for Setup\", safe_coll)\r\n\r\nmain()\r\n```",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1680152988/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1680250785",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/23#issuecomment-1680250785",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/23",
    "id": 1680250785,
    "node_id": "IC_kwDOKBuOEs5kJpeh",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/16/2023",
    "updated_at": "2023-08-16T09:14:48Z",
    "author_association": "COLLABORATOR",
    "body": "The above shows that as demonstrated by the finding the mitigation is insufficient",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1680250785/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729341653",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/23#issuecomment-1729341653",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/23",
    "id": 1729341653,
    "node_id": "IC_kwDOKBuOEs5nE6jV",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/21/2023",
    "updated_at": "2023-09-21T11:01:51Z",
    "author_association": "COLLABORATOR",
    "body": "Agree with the finding, we have mitigated by adding a Grace Period (15 minutes) before allowing Recovery Mode to trigger liquidations",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729341653/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729349568",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/23#issuecomment-1729349568",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/23",
    "id": 1729349568,
    "node_id": "IC_kwDOKBuOEs5nE8fA",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/21/2023",
    "updated_at": "2023-09-21T11:07:15Z",
    "author_association": "COLLABORATOR",
    "body": "https://github.com/Badger-Finance/ebtc/blob/1b0a073075484670f24947e0f455031144d3a1e0/packages/contracts/contracts/CdpManagerStorage.sol#L21-L124",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729349568/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729809183",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/23#issuecomment-1729809183",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/23",
    "id": 1729809183,
    "node_id": "IC_kwDOKBuOEs5nGssf",
    "user": {
     "login": "dmitriia",
     "id": 6178977,
     "node_id": "MDQ6VXNlcjYxNzg5Nzc=",
     "avatar_url": "https://avatars.githubusercontent.com/u/6178977?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/dmitriia",
     "html_url": "https://github.com/dmitriia",
     "followers_url": "https://api.github.com/users/dmitriia/followers",
     "following_url": "https://api.github.com/users/dmitriia/following{/other_user}",
     "gists_url": "https://api.github.com/users/dmitriia/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/dmitriia/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/dmitriia/subscriptions",
     "organizations_url": "https://api.github.com/users/dmitriia/orgs",
     "repos_url": "https://api.github.com/users/dmitriia/repos",
     "events_url": "https://api.github.com/users/dmitriia/events{/privacy}",
     "received_events_url": "https://api.github.com/users/dmitriia/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/21/2023",
    "updated_at": "2023-09-21T15:25:13Z",
    "author_association": "COLLABORATOR",
    "body": "Still looking into the code, but overall `15 minutes` seems short as the only window for target whale borrower reaction in the whale sniping scenario. In the same time it is the period for which attacker bears the risk, so when this period is short it's both narrow window for possible target reaction and low enough risk for the attacker. ",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729809183/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1730170238",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/23#issuecomment-1730170238",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/23",
    "id": 1730170238,
    "node_id": "IC_kwDOKBuOEs5nIE1-",
    "user": {
     "login": "dmitriia",
     "id": 6178977,
     "node_id": "MDQ6VXNlcjYxNzg5Nzc=",
     "avatar_url": "https://avatars.githubusercontent.com/u/6178977?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/dmitriia",
     "html_url": "https://github.com/dmitriia",
     "followers_url": "https://api.github.com/users/dmitriia/followers",
     "following_url": "https://api.github.com/users/dmitriia/following{/other_user}",
     "gists_url": "https://api.github.com/users/dmitriia/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/dmitriia/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/dmitriia/subscriptions",
     "organizations_url": "https://api.github.com/users/dmitriia/orgs",
     "repos_url": "https://api.github.com/users/dmitriia/repos",
     "events_url": "https://api.github.com/users/dmitriia/events{/privacy}",
     "received_events_url": "https://api.github.com/users/dmitriia/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/21/2023",
    "updated_at": "2023-09-21T19:31:52Z",
    "author_association": "COLLABORATOR",
    "body": "On the other hand, since infinite grace period means no liquidations in RM while `ICR >= MCR`, the max grace period is also due for `setGracePeriod()`.",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1730170238/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1730175986",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/23#issuecomment-1730175986",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/23",
    "id": 1730175986,
    "node_id": "IC_kwDOKBuOEs5nIGPy",
    "user": {
     "login": "dmitriia",
     "id": 6178977,
     "node_id": "MDQ6VXNlcjYxNzg5Nzc=",
     "avatar_url": "https://avatars.githubusercontent.com/u/6178977?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/dmitriia",
     "html_url": "https://github.com/dmitriia",
     "followers_url": "https://api.github.com/users/dmitriia/followers",
     "following_url": "https://api.github.com/users/dmitriia/following{/other_user}",
     "gists_url": "https://api.github.com/users/dmitriia/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/dmitriia/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/dmitriia/subscriptions",
     "organizations_url": "https://api.github.com/users/dmitriia/orgs",
     "repos_url": "https://api.github.com/users/dmitriia/repos",
     "events_url": "https://api.github.com/users/dmitriia/events{/privacy}",
     "received_events_url": "https://api.github.com/users/dmitriia/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/21/2023",
    "updated_at": "2023-09-21T19:32:24Z",
    "author_association": "COLLABORATOR",
    "body": "> https://github.com/Badger-Finance/ebtc/blob/1b0a073075484670f24947e0f455031144d3a1e0/packages/contracts/contracts/CdpManagerStorage.sol#L21-L124\r\n\r\nLooks ok.\r\n\r\nSomewhat higher lower boundary and an introduction of the upper one are suggested, i.e. the grace period can be bounded to `[1 hour, 2 days]`, as an example.",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1730175986/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/23/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#23"
 },
 {
  "id": 1846832860,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/22",
  "title": "`LeverageMacroBase` does not allow the owner of the contract to perform CDP operations without performing a Flashloan",
  "created_by": "StErMi",
  "created_at": "8/11/2023",
  "body": "**Context:** [LeverageMacroBase.sol#L161](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/LeverageMacroBase.sol#L161)\r\n\r\n**Description:** The current implementation of `LeverageMacroBase` reverts if the `doOperation` does not execute a `stETH` or `eBTC` flashloan operation.\r\n\r\nThere could be cases for which the owner of the contract could want to be able to adjust or close the CDP without performing a flashloan.\r\n\r\n**Recommendation:** BadgerDAO should consider allowing the caller of `LeverageMacroBase.doOperation` to perform the `LeverageMacroOperation operation` without executing a flashloan.\r\n\r\n**BadgerDao:** Addressed in [PR 564](https://github.com/ebtc-protocol/ebtc/pull/564). Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1674868014",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/22#issuecomment-1674868014",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/22",
    "id": 1674868014,
    "node_id": "IC_kwDOKBuOEs5j1HUu",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/11/2023",
    "updated_at": "2023-08-11T14:51:33Z",
    "author_association": "COLLABORATOR",
    "body": "https://github.com/Badger-Finance/ebtc/pull/564",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1674868014/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/22/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#22"
 },
 {
  "id": 1846809158,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/21",
  "title": "`LeverageMacroBase.sweepToCaller` could transfer `stETH shares` instead of \"pure\" `stETH` to avoid leaving dust into the contract",
  "created_by": "StErMi",
  "created_at": "8/11/2023",
  "body": "**Context:** [LeverageMacroBase.sol#L226](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/LeverageMacroBase.sol#L226)\r\n\r\n**Description:** From the Lido official documentation about `stETH/wstETH` integration guide, there is a specific paragraph about [\"1-2 wei corner case\"](https://docs.lido.fi/guides/steth-integration-guide#1-2-wei-corner-case).\r\n\r\n> stETH balance calculation includes integer division, and there is a common case when the whole stETH balance can't be transferred from the account while leaving the last 1-2 wei on the sender's account. The same thing can actually happen at any transfer or deposit transaction. In the future, when the stETH/share rate will be greater, the error can become a bit bigger. To avoid it, one can use transferShares to be precise.\r\n\r\nLido itself suggests using `transferShares` instead of `transferFrom` to avoid this `1-2 wei corner case`.\r\n\r\n\r\n**Recommendation:** BadgerDAO could consider using `stETH.transferShares` instead of `stETH.transfer` in the `LeverageMacroBase.sweepToCaller` execution. If BadgerDAO decides to chose so, it should also update `collateralBal` value properly get the correct share balance of the contract by executing `stETH.sharesOf(address(this));`.\r\n\r\n**BadgerDAO:** Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1674869883",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/21#issuecomment-1674869883",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/21",
    "id": 1674869883,
    "node_id": "IC_kwDOKBuOEs5j1Hx7",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/11/2023",
    "updated_at": "2023-08-11T14:18:24Z",
    "author_association": "COLLABORATOR",
    "body": "https://github.com/Badger-Finance/ebtc/compare/fix-steth-shares?expand=1",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1674869883/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1674891803",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/21#issuecomment-1674891803",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/21",
    "id": 1674891803,
    "node_id": "IC_kwDOKBuOEs5j1NIb",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/11/2023",
    "updated_at": "2023-08-11T14:32:20Z",
    "author_association": "COLLABORATOR",
    "body": "> [Badger-Finance/ebtc@`fix-steth-shares`?expand=1 (compare)](https://github.com/Badger-Finance/ebtc/compare/fix-steth-shares?expand=1)\r\n\r\nWould you mind referencing all the instances? That link contains quite a few changes :D",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1674891803/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1674916700",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/21#issuecomment-1674916700",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/21",
    "id": 1674916700,
    "node_id": "IC_kwDOKBuOEs5j1TNc",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/11/2023",
    "updated_at": "2023-08-11T14:50:46Z",
    "author_association": "COLLABORATOR",
    "body": "https://github.com/Badger-Finance/ebtc/pull/568",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1674916700/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/21/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#21"
 },
 {
  "id": 1846755264,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/20",
  "title": "`EBTCToken.transferFrom` decrease the allowance of `(owner, spender)` even when the allowance is set to `type(uint256).max`",
  "created_by": "StErMi",
  "created_at": "8/11/2023",
  "body": "**Context:** [EBTCToken.sol#L142-L144](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/EBTCToken.sol#L142-L144)\r\n\r\n**Description:** While it's not defined in the [EIP-20](https://eips.ethereum.org/EIPS/eip-20), it's a common implementation (see both OpenZeppelin and Solmate) that the `transferFrom` function of an `ERC20` token does not decrease the allowance of the spender when such allowance has been set to the max value `type(uint256).max`.\r\n\r\nThe current implementation of `EBTCToken` does not follow this logic and decrease it by the `amount` transferred from the `sender` to the `recipient`\r\n\r\n```solidity\r\nunchecked {\r\n    _approve(sender, msg.sender, cachedAllowances - amount);\r\n}\r\n```\r\n\r\nThis behavior could create problems in contracts that are used to a more common behavior like the one used in OpenZeppelin/Solmate and have approved only once (without a way to update such value) the `EBTCToken`.\r\nThe result is that at some point in the future, the `transferFrom` operation will revert because the `spender` would not have enough allowance anymore.\r\n\r\nA contract that is already keen to this problem is `LeverageMacroReference`, an immutable contract that executes [`ebtcToken.approve(_borrowerOperationsAddress, type(uint256).max);`](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/LeverageMacroReference.sol#L39) only once when the constructor is executed.\r\n\r\nAt some point, an instance of the contract could not be able to perform operations like\r\n\r\n- Adjusting the CDP (by repaying some `eBTC` debt).\r\n- Close the CDP (by repaying all the CDP debt).\r\n- Repaying the `eBTC` flashloaned `amount + fee`.\r\n\r\n**Recommendation:** BadgerDAO should follow the same logic used by the OpenZeppelin/Solmate implementation of the ERC20 token: the `transferFrom` function should not update the `spender` allowance if such allowance is equal to `type(uint256).max`.\r\n\r\n**BadgerDao:** Addressed in [PR 567](https://github.com/Badger-Finance/ebtc/pull/567).\r\n\r\n**Cantina:** The recommendations have been implemented in [PR 567](https://github.com/Badger-Finance/ebtc/pull/567).\r\nA suggestion I could make is to move the check approval/update approval part of the code **before** `_transfer(sender, recipient, amount);`.\r\n\r\nFrom a logical/security point of the view `transferFrom` functions should follow these steps:\r\n\r\n1) verify that the spender has enough allowance.\r\n2) update the spender's allowance.\r\n3) transfer the tokens from `sender` to `receiver`.\r\n\r\n**BadgerDAO:** Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1674917145",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/20#issuecomment-1674917145",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/20",
    "id": 1674917145,
    "node_id": "IC_kwDOKBuOEs5j1TUZ",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/11/2023",
    "updated_at": "2023-08-11T14:51:05Z",
    "author_association": "COLLABORATOR",
    "body": "https://github.com/Badger-Finance/ebtc/pull/567/files",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1674917145/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1676046352",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/20#issuecomment-1676046352",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/20",
    "id": 1676046352,
    "node_id": "IC_kwDOKBuOEs5j5nAQ",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/12/2023",
    "updated_at": "2023-08-12T18:33:13Z",
    "author_association": "COLLABORATOR",
    "body": "The recommendations have been implemented in the PR https://github.com/Badger-Finance/ebtc/pull/567\r\n\r\n@GalloDaSballo a suggestion I could make is to move the check approval/update approval part of the code **before** `_transfer(sender, recipient, amount);`.\r\n\r\nFrom a logical/security point of the view `transferFrom` functions should follow these steps\r\n\r\n1) verify that the spender has enough allowance\r\n2) update the spender's allowance\r\n3) transfer the tokens from `sender` to `receiver`",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1676046352/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/20/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#20"
 },
 {
  "id": 1846064050,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/19",
  "title": "LeverageMacroBase's _doCheckValueType() condition looks to be incorrectly reverted",
  "created_by": "dmitriia",
  "created_at": "8/11/2023",
  "body": "**Context:** [LeverageMacroBase.sol#L236-L247](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/LeverageMacroBase.sol#L236-L247)\r\n\r\n**Description:** Given the usage, say for the `debt >= minDebt` check in:\r\n\r\n- [LeverageMacroBase.sol#L175-L176](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/LeverageMacroBase.sol#L175-L176)\r\n\r\n```solidity\r\n_doCheckValueType(cdpInfo.debt, checkParams.expectedDebt);\r\n_doCheckValueType(cdpInfo.coll, checkParams.expectedCollateral);\r\n```\r\n\r\nit looks like `_doCheckValueType()` needs to compare first argument against the second according to the operator type.\r\n\r\n**Recommendation:** Consider making the conditions reverted:\r\n\r\n- [LeverageMacroBase.sol#L236-L247](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/LeverageMacroBase.sol#L236-L247)\r\n\r\n```diff\r\n  /// @dev Assumes that\r\n  ///     >= you prob use this one\r\n  ///     <= if you don't need >= you go for lte\r\n  ///     And if you really need eq, it's third\r\n  function _doCheckValueType(uint256 valueToCheck, CheckValueAndType memory check) internal {\r\n      if (check.operator == Operator.skip) {\r\n          // Early return\r\n          return;\r\n      } else if (check.operator == Operator.gte) {\r\n-         require(check.value >= valueToCheck, \"!LeverageMacroReference: gte post check\");\r\n+         require(valueToCheck >= check.value, \"!LeverageMacroBase: gte post check\");\r\n      } else if (check.operator == Operator.lte) {\r\n-         require(check.value <= valueToCheck, \"!LeverageMacroReference: let post check\");\r\n+         require(valueToCheck <= check.value, \"!LeverageMacroBase: lte post check\");\r\n```\r\n\r\n**BadgerDao:** Addressed in [PR 573](https://github.com/ebtc-protocol/ebtc/pull/573).\r\n\r\n**Cantina:** The PR just switched the order of the inputs but has not changed the check (where the problem was). What the check should ensure is that the `valueToCheck` respects the validation and not the inverse.\r\n\r\n**BadgerDAO:** Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1676996396",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/19#issuecomment-1676996396",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/19",
    "id": 1676996396,
    "node_id": "IC_kwDOKBuOEs5j9O8s",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/14/2023",
    "updated_at": "2023-08-14T09:30:59Z",
    "author_association": "COLLABORATOR",
    "body": "https://github.com/Badger-Finance/ebtc/pull/573",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1676996396/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729746685",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/19#issuecomment-1729746685",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/19",
    "id": 1729746685,
    "node_id": "IC_kwDOKBuOEs5nGdb9",
    "user": {
     "login": "dmitriia",
     "id": 6178977,
     "node_id": "MDQ6VXNlcjYxNzg5Nzc=",
     "avatar_url": "https://avatars.githubusercontent.com/u/6178977?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/dmitriia",
     "html_url": "https://github.com/dmitriia",
     "followers_url": "https://api.github.com/users/dmitriia/followers",
     "following_url": "https://api.github.com/users/dmitriia/following{/other_user}",
     "gists_url": "https://api.github.com/users/dmitriia/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/dmitriia/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/dmitriia/subscriptions",
     "organizations_url": "https://api.github.com/users/dmitriia/orgs",
     "repos_url": "https://api.github.com/users/dmitriia/repos",
     "events_url": "https://api.github.com/users/dmitriia/events{/privacy}",
     "received_events_url": "https://api.github.com/users/dmitriia/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/21/2023",
    "updated_at": "2023-09-21T14:52:23Z",
    "author_association": "COLLABORATOR",
    "body": "It looks like the fix didn't changed the logic",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729746685/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729767407",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/19#issuecomment-1729767407",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/19",
    "id": 1729767407,
    "node_id": "IC_kwDOKBuOEs5nGifv",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/21/2023",
    "updated_at": "2023-09-21T15:03:12Z",
    "author_association": "COLLABORATOR",
    "body": "> It looks like the fix didn't changed the logic\r\n\r\nAgree with what @dmitriia said. The PR just switched the order of the inputs but has not changed the check (where the problem was).\r\n\r\nWhat the check should ensure is that the `valueToCheck` respects the validation and not the inverse.",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729767407/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/19/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#19"
 },
 {
  "id": 1846057139,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/18",
  "title": "EIP-3156 requires `flashFee()` and `maxFlashLoan()` to accommodate their logic to `flashLoansPaused` flag",
  "created_by": "dmitriia",
  "created_at": "8/11/2023",
  "body": "**Context:** [BorrowerOperations.sol#L816-L828](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/BorrowerOperations.sol#L816-L828), [ActivePool.sol#L311-L332](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/ActivePool.sol#L311-L332)\r\n\r\n**Description:** Per [ERC-3156](https://eips.ethereum.org/EIPS/eip-3156#lender-specification) `flashFee()` can revert, while `maxFlashLoan()` can return `0` when `flashLoansPaused == true`:\r\n\r\n\r\n> The maxFlashLoan function MUST return the maximum loan possible for token. If a token is not currently supported maxFlashLoan MUST return 0, instead of reverting.\r\n\r\n>The flashFee function MUST return the fee charged for a loan of amount token. If the token is not supported flashFee MUST revert.\r\n\r\n\r\nNow the flag is ignored in the logic:\r\n\r\n- [BorrowerOperations.sol#L816-L828](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/BorrowerOperations.sol#L816-L828)\r\n\r\n```solidity\r\n    function flashFee(address token, uint256 amount) public view override returns (uint256) {\r\n        require(token == address(ebtcToken), \"BorrowerOperations: EBTC Only\");\r\n\r\n        return (amount * feeBps) / MAX_BPS;\r\n    }\r\n\r\n    /// @dev Max flashloan, exclusively in ETH equals to the current balance\r\n    function maxFlashLoan(address token) public view override returns (uint256) {\r\n        if (token != address(ebtcToken)) {\r\n            return 0;\r\n        }\r\n        return type(uint112).max;\r\n    }\r\n```\r\n\r\nOn the same grounds as eBTC, `flashFee()` and `maxFlashLoan()` need to change their behavior when `flashLoansPaused == true` for ActivePool's stETH flash loans.\r\n\r\nImpact: in both cases flash loan logic do not comply with EIP-3156 when `flashLoansPaused` is on, which can break the integrations.\r\n\r\n**Recommendation:** `flashFee()` can revert, while `maxFlashLoan()` can return `0` when `flashLoansPaused == true` in both cases.\r\n\r\n**BadgerDao:** Addressed in [PR 574](https://github.com/ebtc-protocol/ebtc/pull/574).\r\n\r\n**Cantina:** The recommendations have been implemented in [PR 574](https://github.com/ebtc-protocol/ebtc/pull/574).\r\n\r\n**BadgerDAO:** Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1677139373",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/18#issuecomment-1677139373",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/18",
    "id": 1677139373,
    "node_id": "IC_kwDOKBuOEs5j9x2t",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/14/2023",
    "updated_at": "2023-08-14T11:20:44Z",
    "author_association": "COLLABORATOR",
    "body": "https://github.com/Badger-Finance/ebtc/pull/574",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1677139373/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1679019995",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/18#issuecomment-1679019995",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/18",
    "id": 1679019995,
    "node_id": "IC_kwDOKBuOEs5kE8_b",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/15/2023",
    "updated_at": "2023-08-15T14:23:42Z",
    "author_association": "COLLABORATOR",
    "body": "The recommendations have been implemented in the PR https://github.com/Badger-Finance/ebtc/pull/574\r\n\r\n@GalloDaSballo ping me when you merge the PR, so I can update the issue body+status",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1679019995/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1683561651",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/18#issuecomment-1683561651",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/18",
    "id": 1683561651,
    "node_id": "IC_kwDOKBuOEs5kWRyz",
    "user": {
     "login": "dapp-whisperer",
     "id": 69157701,
     "node_id": "MDQ6VXNlcjY5MTU3NzAx",
     "avatar_url": "https://avatars.githubusercontent.com/u/69157701?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/dapp-whisperer",
     "html_url": "https://github.com/dapp-whisperer",
     "followers_url": "https://api.github.com/users/dapp-whisperer/followers",
     "following_url": "https://api.github.com/users/dapp-whisperer/following{/other_user}",
     "gists_url": "https://api.github.com/users/dapp-whisperer/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/dapp-whisperer/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/dapp-whisperer/subscriptions",
     "organizations_url": "https://api.github.com/users/dapp-whisperer/orgs",
     "repos_url": "https://api.github.com/users/dapp-whisperer/repos",
     "events_url": "https://api.github.com/users/dapp-whisperer/events{/privacy}",
     "received_events_url": "https://api.github.com/users/dapp-whisperer/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/18/2023",
    "updated_at": "2023-08-18T08:33:24Z",
    "author_association": "COLLABORATOR",
    "body": "we're merging @StErMi ",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1683561651/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729694334",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/18#issuecomment-1729694334",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/18",
    "id": 1729694334,
    "node_id": "IC_kwDOKBuOEs5nGQp-",
    "user": {
     "login": "dmitriia",
     "id": 6178977,
     "node_id": "MDQ6VXNlcjYxNzg5Nzc=",
     "avatar_url": "https://avatars.githubusercontent.com/u/6178977?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/dmitriia",
     "html_url": "https://github.com/dmitriia",
     "followers_url": "https://api.github.com/users/dmitriia/followers",
     "following_url": "https://api.github.com/users/dmitriia/following{/other_user}",
     "gists_url": "https://api.github.com/users/dmitriia/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/dmitriia/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/dmitriia/subscriptions",
     "organizations_url": "https://api.github.com/users/dmitriia/orgs",
     "repos_url": "https://api.github.com/users/dmitriia/repos",
     "events_url": "https://api.github.com/users/dmitriia/events{/privacy}",
     "received_events_url": "https://api.github.com/users/dmitriia/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/21/2023",
    "updated_at": "2023-09-21T14:26:28Z",
    "author_association": "COLLABORATOR",
    "body": "Fix looks ok",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729694334/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729776681",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/18#issuecomment-1729776681",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/18",
    "id": 1729776681,
    "node_id": "IC_kwDOKBuOEs5nGkwp",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/21/2023",
    "updated_at": "2023-09-21T15:07:09Z",
    "author_association": "COLLABORATOR",
    "body": "LGTM",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729776681/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/18/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#18"
 },
 {
  "id": 1845445943,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/17",
  "title": "Leverage contracts should fetch the protocol contract addresses from `cdpManager` instead of being passed as constructor parameter ",
  "created_by": "StErMi",
  "created_at": "8/10/2023",
  "body": "**Context:** [LeverageMacroBase.sol#L51-L68](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/LeverageMacroBase.sol#L51-L68), [LeverageMacroDelegateTarget.sol#L41-L60](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/LeverageMacroDelegateTarget.sol#L41-L60), [LeverageMacroFactory.sol#L21-L35](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/LeverageMacroFactory.sol#L21-L35), [LeverageMacroReference.sol#L17-L42](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/LeverageMacroReference.sol#L17-L42)\r\n\r\n**Description:** All the `Leverage*` contracts (`LeverageMacroBase`, `LeverageMacroDelegateTarget`, `LeverageMacroFactory` and `LeverageMacroReference`) are initializing the `immutable` variables of `borrowerOperations`, `activePool`, `cdpManager`, `ebtcToken`, `sortedCdps` and `stETH` with the corresponding value passed down from the contract's `constructor`.\r\n\r\nTo reduce the human error and the possibility that the wrong value is passed to such `constructor`, BadgerDAO could consider to only passing the `cdpManager` contract into the `constructor` and then gathering all the other addresses by querying the `cdpManager` itself.\r\n\r\n- `borrowerOperations` can be fetched by calling `cdpManager.borrowerOperationsAddress()`.\r\n- `activePool` can be fetched by calling `cdpManager.activePool()`.\r\n- `ebtcToken` can be fetched by calling `cdpManager.ebtcToken()`.\r\n- `sortedCdps` can be fetched by calling `cdpManager.sortedCdps()`.\r\n- `stETH` can be fetched by calling `cdpManager.collateral()`.\r\n\r\n**Recommendation:** BadgerDAO should consider gathering the addresses needed to initialize `borrowerOperations`, `activePool`, `ebtcToken`, `sortedCdps` and `stETH` from the `cdpManager` instead of passing them down as `constructor` inputs.\r\n\r\nThis would reduce the possibility of human error or of a misconfiguration of the `Leverage*` contracts (`LeverageMacroBase`, `LeverageMacroDelegateTarget`, `LeverageMacroFactory` and `LeverageMacroReference`).\r\n\r\n**BadgerDao:** Acknowledging as the system is immutable, there's a chance of making a mistake initially but I don't think there's a risk.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1674901754",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/17#issuecomment-1674901754",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/17",
    "id": 1674901754,
    "node_id": "IC_kwDOKBuOEs5j1Pj6",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/11/2023",
    "updated_at": "2023-08-11T14:39:54Z",
    "author_association": "COLLABORATOR",
    "body": "Acknowledging as the system is immutable, there's a chance of making a mistake initially but I don't think there's a risk ",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1674901754/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/17/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#17"
 },
 {
  "id": 1845210807,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/16",
  "title": "Use the correct function \"State Mutability\" when needed",
  "created_by": "StErMi",
  "created_at": "8/10/2023",
  "body": "**Context:** [LeverageMacroBase.sol#L334](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/LeverageMacroBase.sol#L334), [LeverageMacroBase.sol#L423](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/LeverageMacroBase.sol#L423), [LeverageMacroBase.sol#L438](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/LeverageMacroBase.sol#L438), [LeverageMacroDelegateTarget.sol#L63](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/LeverageMacroDelegateTarget.sol#L63), [LeverageMacroReference.sol#L44](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/LeverageMacroReference.sol#L44)\r\n\r\n**Description:** Here's the list of the function that could be declared with a more specific and restrictive \"State Mutability\":\r\n\r\n- `LeverageMacroBase.decodeFLData` can be declared as `pure`.\r\n- `LeverageMacroBase._doSwapChecks` can be declared as `view`.\r\n- `LeverageMacroBase._ensureNotSystem` can be declared as `view`.\r\n- `LeverageMacroDelegateTarget.owner` can be declared as `view`.\r\n- `LeverageMacroReference.owner` can be declared as `view`.\r\n\r\n**Recommendation:** BadgerDAO should consider replacing the function \"state mutability\" property with the suggested one.\r\n\r\n**BadgerDao:** Thinking of keeping it as is to ensure any odd future compatibility since the functions are \"developer only\".\r\n\r\n**Cantina:** Could you elaborate it more? Those functions cannot be overridden because they are not `virtual` so I'm not understanding the \"odd future compatibility\" part.\r\n\r\n**BadgerDAO:** Acknowledging as of now to avoid having to change this in the future.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1677139979",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/16#issuecomment-1677139979",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/16",
    "id": 1677139979,
    "node_id": "IC_kwDOKBuOEs5j9yAL",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/14/2023",
    "updated_at": "2023-08-14T11:21:14Z",
    "author_association": "COLLABORATOR",
    "body": "Thinking of keeping it as is to ensure any odd future compatibility since the functions are \"developer only\"",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1677139979/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1677140221",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/16#issuecomment-1677140221",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/16",
    "id": 1677140221,
    "node_id": "IC_kwDOKBuOEs5j9yD9",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/14/2023",
    "updated_at": "2023-08-14T11:21:27Z",
    "author_association": "COLLABORATOR",
    "body": "@dapp-whisperer wdyt?",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1677140221/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1678997181",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/16#issuecomment-1678997181",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/16",
    "id": 1678997181,
    "node_id": "IC_kwDOKBuOEs5kE3a9",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/15/2023",
    "updated_at": "2023-08-15T14:08:58Z",
    "author_association": "COLLABORATOR",
    "body": "> Thinking of keeping it as is to ensure any odd future compatibility since the functions are \"developer only\"\r\n\r\nCould you elaborate it more? Those functions cannot be overridden because they are not `virtual` so I'm not understanding the \"odd future compatibility\" part",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1678997181/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729342786",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/16#issuecomment-1729342786",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/16",
    "id": 1729342786,
    "node_id": "IC_kwDOKBuOEs5nE61C",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "9/21/2023",
    "updated_at": "2023-09-21T11:02:37Z",
    "author_association": "COLLABORATOR",
    "body": "Acknowledging as of now to avoid having to change this in the future",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1729342786/reactions",
     "total_count": 1,
     "+1": 1,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/16/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#16"
 },
 {
  "id": 1845185902,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/15",
  "title": "Replace `.transfer`, `.transferFrom` and `.approve` with the corresponding ERC20 \"safe\" version of them",
  "created_by": "StErMi",
  "created_at": "8/10/2023",
  "body": "**Context:** [LeverageMacroBase.sol#L226](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/LeverageMacroBase.sol#L226), [LeverageMacroBase.sol#L395-L398](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/LeverageMacroBase.sol#L395-L398), [LeverageMacroBase.sol#L417](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/LeverageMacroBase.sol#L417), [LeverageMacroReference.sol#L40-L41](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/LeverageMacroReference.sol#L40-L41), [BorrowerOperations.sol#L533](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/BorrowerOperations.sol#L533), [ActivePool.sol#L276](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/ActivePool.sol#L276), [ActivePool.sol#L285](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/ActivePool.sol#L285), [ActivePool.sol#L288](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/ActivePool.sol#L288)\r\n\r\n**Description:** While it's true that `stETH` is following the `ERC20` standard and the `approve`, `transfer` and `transferFrom` on their token always returns `true` or reverts it's recommended to anyway, use the corresponding \"safe\" version of those function to be bullet-proof for the future. Lido could decide at some point to upgrade their `stETH` token to an implementation that does not follow the `ERC20` standard anymore.\r\n\r\nThe suggestion is even more highly recommended when such operations are performed on an external and arbitrary `ERC20` token.\r\n\r\nNote that the current implementation of `stETH` `.transferShares` and `.transferSharesFrom` do not return `bool` value, but instead the amount of `stETH` tokens that have been moved from the `sender` to the `recipient` account.\r\n\r\n**Recommendation:** BadgerDAO should consider replacing the `.transfer`, `.transferFrom` and `.approve` calls with the corresponding ERC20 \"safe\" version of them.\r\n\r\n**BadgerDAO:** Fixed in `LeverageProxy` (see [PR 565](https://github.com/ebtc-protocol/ebtc/pull/565)), but acknowledge the rest. Will follow up. Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1674869341",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/15#issuecomment-1674869341",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/15",
    "id": 1674869341,
    "node_id": "IC_kwDOKBuOEs5j1Hpd",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/11/2023",
    "updated_at": "2023-08-11T14:51:23Z",
    "author_association": "COLLABORATOR",
    "body": "https://github.com/Badger-Finance/ebtc/pull/565\r\n\r\nFixed in LeverageProxy but ack in rest, will follow up",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1674869341/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/15/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#15"
 },
 {
  "id": 1844774751,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/14",
  "title": "Allowing the creation of \"dust CDPs\" could lead redeemers/liquidators to be not profitable or not wanting to perform the operation",
  "created_by": "StErMi",
  "created_at": "8/10/2023",
  "body": "**Context:** [BorrowerOperations.sol#L324-L329](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/BorrowerOperations.sol#L324-L329), [LiquidationLibrary.sol#L365-L370](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/LiquidationLibrary.sol#L365-L370)\r\n\r\n**Description:** When `collateral.getPooledEthByShares(DECIMAL_PRECISION) < DECIMAL_PRECISION` both the `BorrowerOperations._adjustCdpInternal` and `LiquidationLibrary._liquidateCDPPartially` allow the `collateral` balance of the CDP to go below the constant `MIN_NET_COLL` value of `2 stETH`.\r\n\r\nThis allows the possibility (voluntarily or involuntarily) to generate (by adjusting or partially liquidating CDPs) \"dust CDPs\" where the collateral and debt amount of the CDP is very low (dust level).\r\n\r\nWhen those \"dust CDPs\" exists inside the protocol, the following scenarios could happen:\r\n\r\n- Redeemers (that, unlike liquidators, will not get the `LIQUIDATOR_REWARD` and can't directly choose the CDPs from which they want to redeem from) could incur in loss (collateral receives is less valuable than the gas cost of the operation) or simply decide that the operation is not worth the gas cost.\r\n- Liquidators, depending on `stETH share value` and gas cost, could incur in a loss or simply decide that the operation is not worth.\r\n\r\nLet's review how it's possible to create such \"dust CDPs\" and why redemptions and liquidations operations could not be profitable.\r\n\r\n**Create \"dust CDP\" by leveraging `BorrowerOperations._adjustCdpInternal`**\r\n\r\nIn this scenario, the user/attacker creates a \"dust CDP\" by using adjusting the CDP coll/debt via the `BorrowerOperations._adjustCdpInternal` operation.\r\n\r\nLet's set up an initial scenario just to showcase the test:\r\n\r\n- `1 BTC = 15 stETH <> 1 stETH = ~0,066666666 BTC`.\r\n- `1 stETH = 1 ETH`.\r\n- `1 stETH share = 1 stETH`.\r\n\r\n1) The protocol has some whale CDP opened with coll/debt ratio very high, this allows us to have `TCR >> CCR` just to be sure that we are in \"normal mode\" and that the next events do not trigger the \"recovery mode\".\r\n2) `Alice` creates a CDP with a coll/debt ratio equal to `~MMCR`. In our example, she creates a CDP with:\r\n\t1) `collateral = 10 stETH` (that is equal to `10 ether` of `stETH shares`).\r\n\t2) `debt = 0,606060606060606054 ether` of `eBTC`.\r\n3) Lido validators get slashed/incur penalties and `1 stETH shares = 1 stETH - 1 wei`. The share value has decreased of just `1 wei`.\r\n4) At this point `Alice` would be liquidable, but it is not relevant because she promptly performs the following action:\r\n\t1) She repays most of her debt, leaving only `0.0000001 ether` of debt in her CDP. This was just an example number, she could go further down as much as she wants.\r\n\t2) She withdraws as much of collateral as possible. The amount of collateral she can withdraw depends mostly on the debt she still has in her CDP because at the end of the operation the `ICR` must always be `> MCR`. \r\n\r\nAt the end of the scenario setup, Alice's CDP will be as follows:\r\n- `coll = 0,000001650000000002` of `stETH shares`.\r\n- `debt = 0,0000001` of eBTC.\r\n- `ICR = 1100000000000666655` that is still `~> MCR`.\r\n- Her CDP is **not liquidable** at this time.\r\n\r\nNote that it is also possible to create \"dust CDPs\" by executing a partial liquidation.\r\n\r\n**Consequences on Redemption**\r\n\r\nWhen user call `CdpManager.redeemCollateral` they specify the amount of `eBTC` that they want to redeem for `collateral`. The execution will iterate over all the CDPs that are **not liquidable** starting from the CDP with **lower** ICR but still `ICR >= MCR`.\r\n\r\nFor each CDP, the redeemer will receive an amount of collateral (in `stETH shares`) equal to `collateral.getSharesByPooledEth( (singleRedemption.eBtcToRedeem * DECIMAL_PRECISION ) / _redeemColFromCdp._price )`.\r\n\r\nThe redemption of the CDP can be **full** (CDP is closed) or **partial**, depending on the `CDP.debt` and the amount of remaining `eBTC` provided to redeem from the protocol.\r\n\r\nNote 1: As opposed to a liquidation operation, the redeemer will **not receive** the gas stipend and will need to **pay** a **fee** on top of the collateral received (min `0.5%`, max `100%`).\r\nNote 2: As opposed to a liquidation operation, the redeemer **cannot** specify which CDPs they want to redeem from, they will always redeem from the CDP with lower ICR that is still above MCR.\r\n\r\nIf the amount of `stETH shares` received by the redeemer is less than the gas spent to execute the redeem operation, there are two consequences:\r\n\r\n1) The redeemer will lose money on the operation.\r\n2) The redeemer won't perform the operation because it will lose money. The redeem operation is part of the soft-peg system of eBTC.\r\n\r\n**Can the redeem operation not be profitable?**\r\n\r\n@GalloDaSballo stated that the `redeemCollateral` operation should cost:\r\n- `138k` gas units on avg.\r\n- `256k` gas units on max.\r\n\r\nLet's assume the user calls `CdpManager.redeemCollateral` with an amount of eBTC enough just to redeem from the first available CDP to be redeemed from (we can generalize that more or less the cost to redeem fully 100 CDPs is equal to the same amount multiplied by 100).\r\n\r\nThe operation would cost:\r\n- avg gas used `138k`, `150 gwei` gas cost → `0,0207 ETH`.\r\n- max gas used `256k`, `150 gwei` gas cost  → `0,0384 ETH`.\r\n- avg gas used `138k`, `300 gwei` gas cost → `0,0414 ETH`.\r\n- max gas used `256k`, `300 gwei` gas cost  → `0,0768 ETH`.\r\n\r\nLet's assume that: \r\n- `1 BTC = 15 stETH <> 1 stETH = ~0,066666666 BTC`.\r\n- `1 stETH = 1 ETH`.\r\n- `stETH share` drops to `1 ether - 1 wei` just to simulate the scenario.\r\n- assume that Badger does not have a fee on redemption (just to simplify things). The fee would just make the situation for the redeemer worst, if we are not profitable without the fee, we would not be profitable with the fee as well.\r\n\r\nLet's use the data from the first scenario where to perform the operation we will use `138k gas` and that gas costs `~150 gwei`.\r\n\r\nTo be profitable (and probably it's not enough because after the redemption you want to do something with those shares like swapping them, repaying a flashloan and so on) the amount of `stETH` shares that you need to receive must be greater than `0,0207 ETH`. \r\n\r\nThis means that `collateral.getSharesByPooledEth(cdp.debt * DECIMAL_PRECISION / price)` → `collateral.getSharesByPooledEth(cdp.debt * 1 ether / ~0,066666666 ether)` must be `>= ~0,0207 ETH` of `stETH shares`\r\n\r\nJust to simply things, let's assume that Badger does not take a cut on that collateral (as we said, it takes a fee that goes from a min of `0.5%` to `100%`).\r\n\r\nTo be profitable (collateral received is greater than gas spent) the redeemer should need to receive at least `0,0207 ETH` so it would have to be able to redeem at least `0,0207 * 0,066666666` BTC of debt `== 0,00138 BTC`.\r\n\r\nIs it possible to adjust a CDP in a way that: \r\n- ICR is very near MCR (not liquidable, but will be selected first when redemptions happen).\r\n- Very low (dust level) amount of debt.\r\n\r\nIn the setup of the scenario, we have shown (and demonstrated in the foundry test at the very end) that it is possible to generate a \"dust CDP\" by executing adjusting the CDP balance. In the example, `Alice` was able to bring down the debt (and withdraw as much collateral as possible) to `0,0000001` of `eBTC` (note that she could have reduced even more the debt, aggravating the \"dust level\" of the CDP).\r\n\r\nThe result will be that the redeemer will pay (when gas is at `~150 gwei`) `~0,0207 ETH` to redeem `0,0000001 ether` of eBTC for `0,000001492499981999 ether` of `stETH shares`.\r\n\r\n**Consequences on Liquidation**\r\n\r\nThe liquidation process is less affected by the \"dust CDP\" situation for different reason, but it can anyway lead to situations where:\r\n- The liquidator does not yield any profit from the liquidation (neutral result or loss of funds because of gas cost).\r\n- The liquidator does not execute liquidation at all because there would be no profit (this is bad for the protocol).\r\n\r\nThe Liquidation scenario is less affected because:\r\n1) Liquidator does get a `GAS STIPEND` of `0.2 stETH` by fully liquidating the CDP. This `GAS STIPEND` is not rewarded if the liquidator performs a **partial liquidation**, and at this point we return to a situation similar to the redemption one.\r\n2) Liquidators can choose which CDP they want to liquidate by specifying a single CDP or an array of CDPs.\r\n\r\n**Can the liquidation operation not be profitable?**\r\n\r\nBecause the \"dust CDP\" has a tiny amount of collateral, it's safe to assume that the premium that the liquidator gets back from the liquidation process will not influence in the overall profitability of the operation.\r\n\r\nWe can state that the operation is not profitable when the `GAS STIPEND` is **not enough** to cover the gas cost of the transaction. This is influenced by two factors:\r\n\r\n1) The **real** value of the `GAS STIPEND`. When a user opens a CDP, he needs to \"pay\" an additional `GAS STIPEND` that is equal to `0.2 stETH`. Those `0.2 stETH` are converted to `stETH shares` when the CDP is opened. The **real** value of those shares could end up not being `0.2 stETH` when it's returned to the liquidator because it depends on the current (at liquidation time) value of those shares. If the value has decreased (because of slashing/penalties on Lido) compared to the value at the time of the creation of the CDP (involved in the liquidation process) the liquidator will receive less than `0.2 stETH`. We also need to take in consideration that `stETH` is not always perfectly pegged to `ETH` and there have been cases where `stETH` was worth less than `ETH` (~7% less).\r\n2) Gas price. Another factor to take in consideration is the gas price to execute the \"direct\" liquidation or the \"MEV\" liquidation (that could involve more complex operations like flashloaning, pre/post swaps, transfers and so on).\r\n\r\n**Liquidation Scenario 1: `stETH:BTC` price decrease, `stETH share` value remain the same**\r\n\r\nIn the first scenario, we reduce the `stETH:BTC` price by a tiny fraction just to make `Alice` CDP be liquidable. \r\n\r\n`Alice` CDP:\r\n- `coll = 0,000001650000000002` shares equal to `0,000001650000000001` of `stETH`.\r\n- `debt = 0,0000001` of `eBTC`.\r\n\r\nAfter the liquidation, the liquidator has collected `0,20000165 stETH`.\r\n\r\nIn this scenario, the `GAS STIPEND` rewarded to the liquidator is mostly the same as the one supplied by `Alice` at the CDP opening (share value has decreased by just `1 wei` in the meanwhile). This means that in this very specific case, the profitability of the operation depends on mostly by the gas cost of the execution itself.\r\n\r\nFrom an [analysis made by the Badger team](https://github.com/Badger-Finance/ebtc/issues/271), the gas consumption of a \"MEV Liquidation\" is around `650325 units of gas`.\r\n\r\n- with gas cost of `~150 gwei` the liquidation would cost `~0.1 ETH`.\r\n- with gas cost of `~300 gwei` the liquidation would cost `~0.2 ETH`.\r\n\r\nWith the gas cost of `~300 gwei`  we are at the very limit of not being cost neutral, and we are not taking in consideration that the `stETH:ETH` could not be pegged or that the general value of `stETH` in the market has decreased.\r\n\r\n**Liquidation Scenario 2: `stETH:BTC` remains the same, `stETH share` value decreases**\r\n\r\nIn this scenario, the `stETH share` value has decreased because of a slash/penalty event on Lido. `1 stETH share` is now worth `0.9 stETH`. The price of `stETH:BTC` remain the same.\r\n\r\nBecause of the decrease in the share value, we are in this situation:\r\n- `Alice` CDP `liquidatorRewardShares` **before** the slash was worth `~0.2 stETH`.\r\n- `Alice` CDP `liquidatorRewardShares` **after** the slash is worth `~0,18 stETH`.\r\n\r\nAt the end of the liquidation process, the `liquidator` has received `~0,180001485` of `stETH` (gas stipend + collateral liquidated).\r\n\r\nCompared to Scenario 1, in the Scenario 2 the gas price influences even more the profitability of the liquidation operation. If the gas cost to liquidate Alice's CDP is higher than `~0,180001485`  `stETH` the operation will only be a cost for the liquidator.\r\n\r\n**Test**\r\n\r\n```solidity\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\nimport \"forge-std/Test.sol\";\r\nimport {eBTCBaseInvariants} from \"./BaseInvariants.sol\";\r\n\r\ncontract FAdjustDustCDPTest is eBTCBaseInvariants {\r\n    uint256 public constant MCR = 1100000000000000000; // 110%\r\n    uint256 public constant DECIMAL_PRECISION = 1 ether;\r\n    uint256 public constant MIN_COLLAERAL_SIZE = 2 ether;\r\n    uint256 public constant GAS_STIPEND = 0.2 ether;\r\n\r\n    address user1;\r\n    address user2;\r\n    bytes32 cdp1;\r\n    bytes32 cdp2;\r\n\r\n    function setUp() public override {\r\n        super.setUp();\r\n\r\n        // current value of the shares on lido (more or less)\r\n        collateral.setEthPerShare(1 ether);\r\n        priceFeedMock.setPrice((1 ether * DECIMAL_PRECISION) / 15 ether);\r\n\r\n        connectCoreContracts();\r\n        connectLQTYContractsToCore();\r\n    }\r\n\r\n    /// @notice the scope of this funcion is to prepare the test scenario\r\n    /// 1) Warp at least 14 days to enable the redeem operation\r\n    /// 2) Create two users with funds to open CDPs\r\n    /// 3) First user open a CDP as a whale providing a lot of collateral to bring up TCR\r\n    /// 4) Second user open a CDP with ICR ~= MCR\r\n    /// 5) Eth Per Share goes from 1 ether -> 1 ether - 1 wei just to trigger the scenario\r\n    /// 6) Second user adjust it's CDP to create a \"dust CDP\"\r\n    function _createDustCDPFromAdjust(uint256 finalDustDebt) public {\r\n        vm.warp(block.timestamp + 30 days);\r\n\r\n        // let's say that I open a cdp with the minimum amount\r\n        address payable[] memory users;\r\n        users = _utils.createUsers(2);\r\n        user1 = users[0];\r\n        user2 = users[1];\r\n\r\n        vm.label(user1, \"user_1\");\r\n        vm.label(user2, \"user_2\");\r\n\r\n        _dealCollateralAndPrepForUse(user1);\r\n        _dealCollateralAndPrepForUse(user2);\r\n\r\n        // let's say that we have a big whale that open a CDP\r\n        // to bring the TCR high\r\n        vm.startPrank(user1);\r\n        uint256 borrowedAmount = _utils.calculateBorrowAmount(\r\n            100 ether,\r\n            priceFeedMock.fetchPrice(),\r\n            COLLATERAL_RATIO\r\n        );\r\n        cdp1 = borrowerOperations.openCdp(borrowedAmount, \"hint\", \"hint\", 400 ether + GAS_STIPEND);\r\n        vm.stopPrank();\r\n\r\n        // user2 open the CDP just abobe MCR\r\n        vm.startPrank(user2);\r\n        borrowedAmount = _utils.calculateBorrowAmount(\r\n            10 ether,\r\n            priceFeedMock.fetchPrice(),\r\n            MINIMAL_COLLATERAL_RATIO\r\n        );\r\n        cdp2 = borrowerOperations.openCdp(borrowedAmount, \"hint\", \"hint\", 10 ether + GAS_STIPEND);\r\n\r\n        // share value decrease sub 1 ether\r\n        collateral.setEthPerShare(1 ether - 1);\r\n\r\n        // redeem and withdraw the max possible amount\r\n        // how much do we want to leave as debt? the min possible?\r\n        (uint256 cdp2Debt, uint256 cdp2Coll, ) = cdpManager.getEntireDebtAndColl(cdp2);\r\n        uint256 removedDebt = cdp2Debt - finalDustDebt;\r\n        borrowerOperations.repayEBTC(cdp2, removedDebt, \"\", \"\");\r\n\r\n        (cdp2Debt, cdp2Coll, ) = cdpManager.getEntireDebtAndColl(cdp2);\r\n        uint256 maxWithdrawColl = maxWithdraw(cdp2Coll, cdp2Debt);\r\n        borrowerOperations.withdrawColl(cdp2, maxWithdrawColl, \"\", \"\");\r\n\r\n        vm.stopPrank();\r\n    }\r\n\r\n    function testLiquidationNotProfitable() public {\r\n        _createDustCDPFromAdjust(0.0000001 ether);\r\n\r\n        // let's try to just fully liquidate it\r\n        address liquidator = makeAddr(\"liquidator\");\r\n\r\n        (uint256 cdp2Debt, uint256 cdp2Coll, ) = cdpManager.getEntireDebtAndColl(cdp2);\r\n        // send to redeemer just what's needed to fully redeem cdp2\r\n        vm.prank(user1);\r\n        eBTCToken.transfer(liquidator, cdp2Debt);\r\n\r\n        ////////////////////////////////////////////////////////////////////////\r\n        ////////////////////////////////////////////////////////////////////////\r\n        // SUBSCENARIO 1: oracle price decrease, stETH share value does not decrease anymore\r\n        // In this scenario as long as gas price are lower than 310 gwei the\r\n        // operation should be still neutral/positive from a profit prospective\r\n        // This depends also on the stETH price and peg to ETH\r\n        // The Liquidator receive more or less ONLY the GAS STIPEND of ~0.2 stETH\r\n        ////////////////////////////////////////////////////////////////////////\r\n        ////////////////////////////////////////////////////////////////////////\r\n\r\n        uint256 snapshot = vm.snapshot();\r\n\r\n        // let's say that the price decrese just to make it liquidable\r\n        priceFeedMock.setPrice(priceFeedMock.fetchPrice() - 0.0000000000001 ether);\r\n\r\n        // In this case the liquidator is still profittable just because\r\n        CdpInfo memory cdp2Before = getCdpInfo(cdp2);\r\n        vm.prank(liquidator);\r\n        cdpManager.liquidate(cdp2);\r\n\r\n        CdpInfo memory cdp2After = getCdpInfo(cdp2);\r\n        UserBalance memory liquidatorAfter = getUserBalance(liquidator);\r\n\r\n        assertEq(liquidatorAfter.debt, 0);\r\n\r\n        // note that cdp2 stETH collateral was just ~0,000001650000000001 stETH\r\n        // that more or less are worth ~€0,002768007\r\n        assertApproxEqAbs(liquidatorAfter.coll, GAS_STIPEND + cdp2Before.collStETH, 1);\r\n\r\n        // Assert that cdp2 has been fully liquidated\r\n        assertEq(cdp2After.status, 3); // closedByLiquidation\r\n\r\n        vm.revertTo(snapshot);\r\n\r\n        ////////////////////////////////////////////////////////////////////////\r\n        ////////////////////////////////////////////////////////////////////////\r\n        // SUBSCENARIO 2: oracle price decrease, stETH share value decrease even more\r\n        // The main difference in this scenario is that the stETH shares\r\n        // (used by protocol for accounting) are worth less (compared to scenario 1)\r\n        // This influence not only how much is worth the collateral you are gaining from the liquidation\r\n        // but also the GAS STIPEND that you gain from the full liquidation\r\n        // The GAS STIPEND is equal to `0.2 stETH` but at the time that the CDP (liquidated) was opened\r\n        // if during this period the `stETH share` has decreased in value, also the GAS STIPEND\r\n        // (that is denominated in converted shares) has decreased in value\r\n        // This mean that the liquidator will receive less than `0.2 stETH` for the GAS STIPEND\r\n        ////////////////////////////////////////////////////////////////////////\r\n        ////////////////////////////////////////////////////////////////////////\r\n\r\n        // bring the stETH share value down more to prove our scenario\r\n        collateral.setEthPerShare(0.9 ether);\r\n\r\n        // Liquidation is much less profittable and gas cost to execute the transaction could\r\n        // be above the gas stipend (because now stETH share is less valuable)\r\n        cdp2Before = getCdpInfo(cdp2);\r\n        vm.prank(liquidator);\r\n        cdpManager.liquidate(cdp2);\r\n\r\n        cdp2After = getCdpInfo(cdp2);\r\n        liquidatorAfter = getUserBalance(liquidator);\r\n\r\n        // Assert that the profit from the liquidation is less than the GAS STIPEND\r\n        assertLt(liquidatorAfter.coll, GAS_STIPEND);\r\n\r\n        // Assert that cdp2 has been fully liquidated\r\n        assertEq(cdp2After.status, 3); // closedByLiquidation\r\n    }\r\n\r\n    function testRedeemNotProfitable() public {\r\n        _createDustCDPFromAdjust(0.0000001 ether);\r\n\r\n        // let's make things easier to track by having a separate redeemer user\r\n        // that holds 0 collateral and just the amount of eBTC needed to fully redeem CDP2\r\n        (uint256 cdp2Debt, uint256 cdp2Coll, ) = cdpManager.getEntireDebtAndColl(cdp2);\r\n\r\n        address redeemer = makeAddr(\"redeemer\");\r\n\r\n        // send to redeemer just what's needed to fully redeem cdp2\r\n        vm.prank(user1);\r\n        eBTCToken.transfer(redeemer, cdp2Debt);\r\n\r\n        // prepare variables for later asserts\r\n        UserBalance memory redeemerBefore = getUserBalance(redeemer);\r\n        CdpInfo memory cdp1Before = getCdpInfo(cdp1);\r\n\r\n        // perform the redeem of CDP2\r\n        vm.prank(redeemer);\r\n        cdpManager.redeemCollateral(cdp2Debt, bytes32(0), bytes32(0), bytes32(0), 0, 0, 1e18);\r\n\r\n        UserBalance memory redeemerAfter = getUserBalance(redeemer);\r\n        CdpInfo memory cdp1After = getCdpInfo(cdp1);\r\n\r\n        // CDP has not changed (redeem operation has only fullly redeemed CDP2)\r\n        assertEq(cdp1Before.debt, cdp1After.debt);\r\n        assertEq(cdp1Before.coll, cdp1After.coll);\r\n\r\n        // redeemer had only the amount of eBTC needed for the redemption\r\n        assertEq(redeemerBefore.debt, cdp2Debt);\r\n\r\n        // redeemer now has 0 eBTC (all of them used)\r\n        assertEq(redeemerAfter.debt, 0);\r\n\r\n        // redeemer had no collateral before the operation\r\n        assertEq(redeemerBefore.coll, 0);\r\n\r\n        // CDP2 has been closed\r\n        assertEq(cdpManager.getCdpStatus(cdp2), 4); // closedByRedemption\r\n\r\n        // print the final amount of stETH gained by the reedeemer\r\n        console.log(\"redeemerAfter.coll\", redeemerAfter.coll);\r\n\r\n        // in our test scenario gas cost for the operation is ~0,0207 ETH\r\n\r\n        // assert that it was not profitable\r\n        assertLt(redeemerAfter.coll, 0.0207 ether);\r\n    }\r\n\r\n    function calcStake(bytes32 cdpId) public view returns (uint256) {\r\n        (uint realDebt, uint realColl, uint pendingEBTCDebtReward) = cdpManager.getEntireDebtAndColl(\r\n            cdpId\r\n        );\r\n\r\n        return (realColl * cdpManager.totalStakesSnapshot()) / cdpManager.totalCollateralSnapshot();\r\n    }\r\n\r\n    function camputeICR(uint256 cdpCollShares, uint256 cdpDebt) public returns (uint256) {\r\n        uint256 price = priceFeedMock.fetchPrice();\r\n        uint256 coll = collateral.getPooledEthByShares(cdpCollShares);\r\n        return (coll * price) / cdpDebt;\r\n    }\r\n\r\n    function getMaxLiquidableDebt(uint256 cdpDebt) public returns (uint256) {\r\n        // needed for the check they are doing during partial liquidation\r\n        uint256 price = priceFeedMock.fetchPrice();\r\n        return cdpDebt - ((MIN_COLLAERAL_SIZE * price) / DECIMAL_PRECISION);\r\n    }\r\n\r\n    function maxWithdraw(uint256 cdpCollShares, uint256 cdpDebt) public returns (uint256) {\r\n        // how much collateral can I withdraw to still be above MCR with the new ICR?\r\n        uint256 price = priceFeedMock.fetchPrice();\r\n        uint256 coll = collateral.getPooledEthByShares(cdpCollShares);\r\n        uint256 maxWithdrawColl = coll - ((MCR * cdpDebt) / price);\r\n\r\n        // remove 1 wei for rounding errors\r\n        return maxWithdrawColl - 1;\r\n    }\r\n\r\n    function printSystem() public {\r\n        console.log(\"=== PRINT SYSTEM ===\");\r\n        uint256 price = priceFeedMock.fetchPrice();\r\n        uint256 tcr = cdpManager.getTCR(price);\r\n        console.log(\"L_EBTCDebt     ->\", cdpManager.L_EBTCDebt());\r\n        console.log(\"stFeePerUnitg  ->\", cdpManager.stFeePerUnitg());\r\n        console.log(\"TCR            ->\", tcr);\r\n        console.log(\"RM ?           ->\", tcr < CCR);\r\n\r\n        console.log(\"\");\r\n    }\r\n\r\n    function printCdp(bytes32 cdpId) public {\r\n        (uint256 realDebt, uint256 realColl, ) = cdpManager.getEntireDebtAndColl(cdpId);\r\n\r\n        uint256 price = priceFeedMock.fetchPrice();\r\n        console.log(\"=== PRINT CDP ===\");\r\n        uint256 tcr = cdpManager.getTCR(price);\r\n        uint256 icr = cdpManager.getCurrentICR(cdpId, price);\r\n        bool liquidable = icr < MINIMAL_COLLATERAL_RATIO || (tcr < CCR && icr < tcr);\r\n        uint256 coll = cdpManager.getCdpColl(cdpId);\r\n        uint256 debt = cdpManager.getCdpDebt(cdpId);\r\n\r\n        // try this\r\n        coll = realColl;\r\n        debt = realDebt;\r\n        // try this\r\n\r\n        uint collSt = collateral.getPooledEthByShares(coll);\r\n\r\n        console.log(\"status   ->\", cdpManager.getCdpStatus(cdpId));\r\n        console.log(\"stake    ->\", cdpManager.getCdpStake(cdpId));\r\n        console.log(\"coll     ->\", coll);\r\n        console.log(\"coll st  ->\", collSt);\r\n        console.log(\"debt     ->\", debt);\r\n        console.log(\"ICR      ->\", icr);\r\n        console.log(\"liq?     -> \", liquidable);\r\n        console.log(\"minColl? -> \", collSt < MIN_COLLAERAL_SIZE);\r\n        console.log(\"\");\r\n    }\r\n\r\n    function getCdpInfo(bytes32 cdpId) public view returns (CdpInfo memory) {\r\n        (uint realDebt, uint realColl, ) = cdpManager.getEntireDebtAndColl(cdpId);\r\n        return\r\n            CdpInfo(\r\n                cdpManager.getCdpStatus(cdpId),\r\n                realColl,\r\n                collateral.getPooledEthByShares(realColl),\r\n                realDebt\r\n            );\r\n    }\r\n\r\n    function getUserBalance(address user) public view returns (UserBalance memory) {\r\n        uint256 debt = eBTCToken.balanceOf(user);\r\n        uint256 coll = collateral.balanceOf(user);\r\n        return UserBalance(coll, debt);\r\n    }\r\n\r\n    struct CdpInfo {\r\n        uint status;\r\n        uint256 coll;\r\n        uint256 collStETH;\r\n        uint256 debt;\r\n    }\r\n\r\n    struct UserBalance {\r\n        uint256 coll;\r\n        uint256 debt;\r\n    }\r\n}\r\n```\r\n\r\n**Recommendation:**\r\n\r\n1. Badger should consider to **always** require, no matter what, that the CDP's collateral balance is **always** above the `MIN_NET_COLL` after the execution of `BorrowerOperations._adjustCdpInternal` and `LiquidationLibrary._liquidateCDPPartially`.\r\n\r\nIt looks like `_requirePartialLiqDebtSize()` and `_convertDebtDenominationToBtc()` functions will be no longer needed:\r\n\r\n- [LiquidationLibrary.sol#L960-L969](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/LiquidationLibrary.sol#L960-L969)\r\n\r\n```solidity\r\nfunction _requirePartialLiqDebtSize(\r\n    uint _partialDebt,\r\n    uint _entireDebt,\r\n    uint _price\r\n) internal view {\r\n    require(\r\n        (_partialDebt + _convertDebtDenominationToBtc(MIN_NET_COLL, _price)) <= _entireDebt,\r\n        \"LiquidationLibrary: Partial debt liquidated must be less than total debt\"\r\n    );\r\n}\r\n```\r\n\r\n- [LiquityBase.sol#L106-L111](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/Dependencies/LiquityBase.sol#L106-L111)\r\n\r\n```solidity\r\n// Convert debt denominated in ETH to debt denominated in BTC given that _price is ETH/BTC\r\n// _debt is denominated in ETH\r\n// _price is ETH/BTC\r\nfunction _convertDebtDenominationToBtc(uint _debt, uint _price) internal pure returns (uint) {\r\n    return (_debt * _price) / DECIMAL_PRECISION;\r\n}\r\n```\r\n\r\nand can be removed (there are no other usages):\r\n\r\n- [LiquidationLibrary.sol#L340-L348](https://github.com/Badger-Finance/ebtc/blob/1967a223c7948faf3a5711bd485061f51449c404/packages/contracts/contracts/LiquidationLibrary.sol#L340-L348)\r\n\r\n```diff\r\n  function _liquidateCDPPartially(\r\n      LocalVar_InternalLiquidate memory _partialState\r\n  ) private returns (uint256, uint256) {\r\n      bytes32 _cdpId = _partialState._cdpId;\r\n      uint _partialDebt = _partialState._partialAmount;\r\n\r\n      // calculate entire debt to repay\r\n      LocalVar_CdpDebtColl memory _debtAndColl = _getEntireDebtAndColl(_cdpId);\r\n-     _requirePartialLiqDebtSize(_partialDebt, _debtAndColl.entireDebt, _partialState._price);\r\n```\r\n\r\n2. Badger should also consider removing the dependency to `stETH` from the `LIQUIDATOR_REWARD` (gas stipend). By doing so, the reward for the liquidator will always be `0.2 ETH` without any influence from: \r\n- `stETH share value` at the moment of the liquidation.\r\n- `stETH` peg to `ETH`.\r\n- `stETH` value in the market.\r\n\r\n**BadgerDAO:** Let's enforce the check of 2 stETH size everywhere, smaller Cdps can still close but are prevented from levering up in general.\r\n\r\n**BadgerDAO:** Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1680080779",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/14#issuecomment-1680080779",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/14",
    "id": 1680080779,
    "node_id": "IC_kwDOKBuOEs5kI_-L",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/16/2023",
    "updated_at": "2023-08-16T07:10:28Z",
    "author_association": "COLLABORATOR",
    "body": "@dapp-whisperer Imo let's enforce the check of 2 stETH size everywhere, smaller Cdps can still close but are prevented from levering up in general\r\n\r\n",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1680080779/reactions",
     "total_count": 2,
     "+1": 2,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/14/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#14"
 },
 {
  "id": 1844700577,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/13",
  "title": "Chainlink `priceFeed.getRoundData(lastRoundId - 1)` could return a \"false broken\" answer, triggering the primary oracle broken path",
  "created_by": "StErMi",
  "created_at": "8/10/2023",
  "body": "**Context:** [PriceFeed.sol#L723-L753](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/PriceFeed.sol#L723-L753)\r\n\r\n**Description:**\r\n\r\nUseful links:\r\n\r\n- [ETH/USD Proxy Price Feed](https://etherscan.deth.net/address/0x5f4ec3df9cbd43714fe2740f5e3616155c5b8419)\r\n- [ETH/USD Price Aggregator used by the Proxy in this phase (phaseID 6)](https://etherscan.deth.net/address/0xE62B71cf983019BFf55bC83B48601ce8419650CC)\r\n- [Official Chainlink Documentation about \"Getting Historical Data\"](https://docs.chain.link/data-feeds/historical-data)\r\n\r\nWhen the `PriceFeed` contracts execute the `fetchPrice` function, it gathers the current Chainlink response and the previous one by executing \r\n\r\n```solidity\r\nint256 ethBtcAnswer;\r\n        int256 stEthEthAnswer;\r\n        try ETH_BTC_CL_FEED.getRoundData(_currentRoundEthBtcId - 1) returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256,\r\n            /* startedAt */\r\n            uint256 timestamp,\r\n            uint80 /* answeredInRound */\r\n        ) {\r\n            ethBtcAnswer = answer;\r\n            prevChainlinkResponse.roundEthBtcId = roundId;\r\n            prevChainlinkResponse.timestampEthBtc = timestamp;\r\n        } catch {\r\n            // If call to Chainlink aggregator reverts, return a zero response with success = false\r\n            return prevChainlinkResponse;\r\n        }\r\n\r\n        try STETH_ETH_CL_FEED.getRoundData(_currentRoundStEthEthId - 1) returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256,\r\n            /* startedAt */\r\n            uint256 timestamp,\r\n            uint80 /* answeredInRound */\r\n        ) {\r\n            stEthEthAnswer = answer;\r\n            prevChainlinkResponse.roundStEthEthId = roundId;\r\n            prevChainlinkResponse.timestampStEthEth = timestamp;\r\n        } catch {\r\n            // If call to Chainlink aggregator reverts, return a zero response with success = false\r\n            return prevChainlinkResponse;\r\n        }\r\n```\r\n\r\nThe `roundID` returned by `latestRoundData` and `getRoundData` is not the `roundID` of the Price Aggregator, but is the `roundID` of the Price Feed Proxy that internally will call the aggregator. \r\n\r\nThe \"`proxyRoundId`\" is a composed value that internally store two information:\r\n- `phaseID`: which was the `phaseId` when the query was made. By knowing the phase, we can understand which is the aggregator that has been used\r\n- `aggregatorRoundId`: which is the internal `roundId` from which the price comes from. This makes sense only for the aggregator used in the phase\r\n\r\nThere could be multiple cases where executing `priceFeed.getRoundData(currentProxyRoundId - 1)` will return an invalid answer\r\n- the proxy has switched to a new `PriceAggregator` and the `phaseId` inside the Proxy has increased\r\n- the `currentProxyRoundId - 1` would revert for underflow or return a wrong answer because `aggregatorRoundId` is equal to the first valid ID\r\n\r\nIf the `currentProxyRoundId - 1` produces an invalid `roundId`, the Price Feed Proxy will return an invalid answer, but this does not mean that the **real** previous data on the proxy does not exist or that a **real** error has occurred. \r\nIn those cases, the `eBTC Price Feed` will interpret it as an exception and will not trust the Chainlink oracle, falling back to the `FallbackOracle` if available or returning the `lastGoodPrice` that, as we already mentioned in other issues, could be a **stale price**.\r\n\r\n\r\n**Recommendation:**\r\n\r\nCurrently, there is not a clear way to easily and correctly retrieve the **safe** `previousRoundId`. \r\nBadgerDAO should monitor those reverts event to understand if the revert was **real** or because of a misscalculation of the `previousRoundId` ",
  "state": "closed",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1672806781",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/13#issuecomment-1672806781",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/13",
    "id": 1672806781,
    "node_id": "IC_kwDOKBuOEs5jtQF9",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/10/2023",
    "updated_at": "2023-08-10T08:41:39Z",
    "author_association": "COLLABORATOR",
    "body": "Note: I'm planning to talk to a Chainlink dev about this issue, but the meeting is scheduled in a couple of weeks. ",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1672806781/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1674750371",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/13#issuecomment-1674750371",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/13",
    "id": 1674750371,
    "node_id": "IC_kwDOKBuOEs5j0qmj",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/11/2023",
    "updated_at": "2023-08-11T12:59:46Z",
    "author_association": "COLLABORATOR",
    "body": "I'm thinking this is a valid latent risk, but it seems like this will cause DOS for one round if chainlink upgrades\r\n\r\nIt's worth figuring out if the DOS would be longer than a few hours and most importantly if the system would be able to recover from the DOS after the new set of RoundIDs are sequential",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1674750371/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1674771518",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/13#issuecomment-1674771518",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/13",
    "id": 1674771518,
    "node_id": "IC_kwDOKBuOEs5j0vw-",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/11/2023",
    "updated_at": "2023-08-11T13:09:40Z",
    "author_association": "COLLABORATOR",
    "body": "@GalloDaSballo I have moved the issue into the previous audit repository given that it was discovered and documented over there.\r\n\r\nIssue: https://github.com/spearbit-audits/review-badgerdao/issues/114\r\nGitHub Discussion I have created about `priceFeed.getRoundData`: https://github.com/spearbit-audits/review-badgerdao/discussions/110",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1674771518/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/13/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#13"
 },
 {
  "id": 1844565995,
  "url": "https://github.com/cantinasec/review-badgerdao/issues/12",
  "title": "Last CDP cannot be closed and user cannot recover `~2.2 stETH` from the CDP",
  "created_by": "StErMi",
  "created_at": "8/10/2023",
  "body": "**Context:** [CdpManagerStorage.sol#L500-L505](https://github.com/Badger-Finance/ebtc/blob/b2f641aa20615978544547e41a4c2be642252ade/packages/contracts/contracts/CdpManagerStorage.sol#L500-L505)\r\n\r\n**Description:** The system is designed to **not allow** the closure and removal of the last active CDP. This required and applied each time an operation (close, redeem, liquidate) tries to close a CDP.\r\n\r\nBecause of this check, that the last CDP can only be \"adjusted\" by the user. The user will be able to: \r\n\r\n- Repay at max `cdp.debt - 1 wei` of debt (repaying all the debt will revert the adjust operation).\r\n- Withdraw at max `cdp.coll - 2 ether` of collateral (withdrawing more than that would revert because of the TCR check or because of the `MIN_NET_COLL` check).\r\n\r\nThe result is that the user will not be able to withdraw the `MIN_NET_COLL` amount of collateral and the `LIQUIDATOR_REWARD` amount of collateral provided at the creation of the CDP for a total of `~2.2 stETH` (the final amount of `stETH` depends on the conversion between `stETH shares` and `stETH` at the moment of the operation):\r\n\r\n```solidity\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\nimport \"forge-std/Test.sol\";\r\nimport {eBTCBaseInvariants} from \"./BaseInvariants.sol\";\r\n\r\ncontract FastCloseTest is eBTCBaseInvariants {\r\n    uint256 public constant MCR = 1100000000000000000; // 110%\r\n    uint256 public constant DECIMAL_PRECISION = 1 ether;\r\n    uint256 public constant MIN_COLLAERAL_SIZE = 2 ether;\r\n    uint256 public constant GAS_STIPEND = 0.2 ether;\r\n\r\n    address user1;\r\n    address user2;\r\n    bytes32 cdp1;\r\n    bytes32 cdp2;\r\n\r\n    function setUp() public override {\r\n        super.setUp();\r\n\r\n        // current value of the shares on lido (more or less)\r\n        // collateral.setEthPerShare(1 ether);\r\n        // priceFeedMock.setPrice((1 ether * DECIMAL_PRECISION) / 15 ether);\r\n\r\n        connectCoreContracts();\r\n        connectLQTYContractsToCore();\r\n    }\r\n\r\n    function testCloseLastCdpRevert() public {\r\n        // Assume we are at a point where some users have opened the CDP, redempted, liquidated, closed and so on\r\n        // We are at a point where there is only a user with an open CDP\r\n        // The system is designed to revert always when a CDP is being closed but it's the last one active\r\n        // This mean that the last CDP cannot be closed and the user won't be able to remove the MIN_NET_COLL\r\n        // and LIQUIDATOR_REWARD for a total of ~2.2stETH (it depends on the share value at closing time)\r\n\r\n        // setup the test\r\n        address payable[] memory users;\r\n        users = _utils.createUsers(2);\r\n        user1 = users[0];\r\n        vm.label(user1, \"user_1\");\r\n        _dealCollateralAndPrepForUse(user1);\r\n\r\n        // user1 creates a CDP\r\n        uint256 borrowedAmount = _utils.calculateBorrowAmount(\r\n            100 ether,\r\n            priceFeedMock.fetchPrice(),\r\n            CCR\r\n        );\r\n        vm.prank(user1);\r\n        cdp1 = borrowerOperations.openCdp(borrowedAmount, \"hint\", \"hint\", 100 ether + GAS_STIPEND);\r\n\r\n        // user1 tries to close the CDP but it reverts\r\n        vm.prank(user1);\r\n        vm.expectRevert(\"CdpManager: Only one cdp in the system\");\r\n        borrowerOperations.closeCdp(cdp1);\r\n    }\r\n\r\n    function testAdjustLastCdpFundsLeftInProtocol() public {\r\n        // Assume we are at a point where some users have opened the CDP, redempted, liquidated, closed and so on\r\n        // We are at a point where there is only a user with an open CDP\r\n        // The system is designed to revert always when a CDP is being closed but it's the last one active\r\n        // This mean that the last CDP cannot be closed and the user won't be able to remove the MIN_NET_COLL\r\n        // and LIQUIDATOR_REWARD for a total of ~2.2stETH (it depends on the share value at closing time)\r\n\r\n        // setup the test\r\n        address payable[] memory users;\r\n        users = _utils.createUsers(2);\r\n        user1 = users[0];\r\n        vm.label(user1, \"user_1\");\r\n        _dealCollateralAndPrepForUse(user1);\r\n\r\n        // user1 creates a CDP\r\n        uint256 borrowedAmount = _utils.calculateBorrowAmount(\r\n            100 ether,\r\n            priceFeedMock.fetchPrice(),\r\n            CCR\r\n        );\r\n        vm.prank(user1);\r\n        cdp1 = borrowerOperations.openCdp(borrowedAmount, \"hint\", \"hint\", 100 ether + GAS_STIPEND);\r\n\r\n        // calculate the final amount of collateral and debt of the CDP\r\n        (uint256 debt, uint256 coll, ) = cdpManager.getEntireDebtAndColl(cdp1);\r\n\r\n        // the user cannot repay ALL the debt because otherwise it would revert\r\n        vm.prank(user1);\r\n        borrowerOperations.repayEBTC(cdp1, debt - 1, \"\", \"\");\r\n\r\n        // the user cannot withdraw all the collateral. at least MIN_NET_COLL must remain in the CDP\r\n        vm.prank(user1);\r\n        vm.expectRevert(\"BorrowerOperations: Cdp's net coll must be greater than minimum\");\r\n        borrowerOperations.withdrawColl(cdp1, coll - 2 ether + 1, \"\", \"\");\r\n\r\n        vm.prank(user1);\r\n        borrowerOperations.withdrawColl(cdp1, coll - 2 ether, \"\", \"\");\r\n\r\n        // user only have 1 wei of eBTC in the balance\r\n        assertEq(eBTCToken.balanceOf(user1), 1);\r\n\r\n        // active pool still have the remaining stETH of the user (MIN_NET_COLL + LIQUIDATOR_REWARD)\r\n        assertEq(collateral.balanceOf(address(activePool)), 2.2 ether);\r\n    }\r\n\r\n    function testDAOCDP() public {\r\n        // one possible solution would be to have a DAO CDP that allows the last user to close the CDP\r\n        // the problem with this DAO CDP is that it's just a \"normal\" CDP so at any point in time\r\n        // it could be liquidated or redeemed (and closed) and we would be again at the start of the problem\r\n\r\n        // setup the test\r\n        address payable[] memory users;\r\n        users = _utils.createUsers(2);\r\n        user1 = users[0];\r\n        address DAO = users[1];\r\n        vm.label(user1, \"user_1\");\r\n        vm.label(DAO, \"DAO\");\r\n        _dealCollateralAndPrepForUse(user1);\r\n        _dealCollateralAndPrepForUse(DAO);\r\n\r\n        // DAO creates a CDP\r\n        uint256 borrowedAmount = _utils.calculateBorrowAmount(\r\n            100 ether,\r\n            priceFeedMock.fetchPrice(),\r\n            CCR\r\n        );\r\n\r\n        console.log(\"DAO open CDP\");\r\n        vm.prank(DAO);\r\n        bytes32 cdpDAO = borrowerOperations.openCdp(\r\n            borrowedAmount,\r\n            \"hint\",\r\n            \"hint\",\r\n            100 ether + GAS_STIPEND\r\n        );\r\n\r\n        // user1 creates a CDP\r\n        borrowedAmount = _utils.calculateBorrowAmount(100 ether, priceFeedMock.fetchPrice(), CCR);\r\n        console.log(\"user1 open CDP\");\r\n        vm.prank(user1);\r\n        cdp1 = borrowerOperations.openCdp(borrowedAmount, \"hint\", \"hint\", 100 ether + GAS_STIPEND);\r\n\r\n        // user now can close it, the DAO CDP cannot be closed\r\n        vm.prank(user1);\r\n        borrowerOperations.closeCdp(cdp1);\r\n    }\r\n}\r\n```\r\n\r\n**Recommendation:** BadgerDAO could consider opening a healthy CDP to allow the last CDP (of the user) to be correctly closed. BadgerDAO needs to consider that this \"DAO CDP\" is anyway considered as a \"normal CDP\" and can be at any time liquidated or redeemed if the platform allows it. If this happens, we would return to the start of the scenario, where the last user won't be able to correctly close the CDP.\r\n\r\n**BadgerDAO:** We agree with the finding and will ensure the last CDP is provided by the DAO.\r\n\r\n**Cantina:** Just to be clear; you will \"plug in\" the last CDP only when it is needed, right? Because otherwise you have to maintain it during the whole life cycle of the protocol. By \"maintaining it\", I mean that you need to ensure that it's always healthy, and it does not get redeemed from (and closed).\r\n\r\n**BadgerDAO:** Acknowledged.\r\n\r\n**Cantina:** Acknowledged.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1680081340",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/12#issuecomment-1680081340",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/12",
    "id": 1680081340,
    "node_id": "IC_kwDOKBuOEs5kJAG8",
    "user": {
     "login": "GalloDaSballo",
     "id": 13383782,
     "node_id": "MDQ6VXNlcjEzMzgzNzgy",
     "avatar_url": "https://avatars.githubusercontent.com/u/13383782?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/GalloDaSballo",
     "html_url": "https://github.com/GalloDaSballo",
     "followers_url": "https://api.github.com/users/GalloDaSballo/followers",
     "following_url": "https://api.github.com/users/GalloDaSballo/following{/other_user}",
     "gists_url": "https://api.github.com/users/GalloDaSballo/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/GalloDaSballo/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/GalloDaSballo/subscriptions",
     "organizations_url": "https://api.github.com/users/GalloDaSballo/orgs",
     "repos_url": "https://api.github.com/users/GalloDaSballo/repos",
     "events_url": "https://api.github.com/users/GalloDaSballo/events{/privacy}",
     "received_events_url": "https://api.github.com/users/GalloDaSballo/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/16/2023",
    "updated_at": "2023-08-16T07:10:57Z",
    "author_association": "COLLABORATOR",
    "body": "We agree with the finding and will ensure the last CDP is provided by the DAO",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1680081340/reactions",
     "total_count": 2,
     "+1": 2,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   },
   {
    "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1744274499",
    "html_url": "https://github.com/cantinasec/review-badgerdao/issues/12#issuecomment-1744274499",
    "issue_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/12",
    "id": 1744274499,
    "node_id": "IC_kwDOKBuOEs5n94RD",
    "user": {
     "login": "StErMi",
     "id": 146166,
     "node_id": "MDQ6VXNlcjE0NjE2Ng==",
     "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
     "gravatar_id": "",
     "url": "https://api.github.com/users/StErMi",
     "html_url": "https://github.com/StErMi",
     "followers_url": "https://api.github.com/users/StErMi/followers",
     "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
     "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
     "organizations_url": "https://api.github.com/users/StErMi/orgs",
     "repos_url": "https://api.github.com/users/StErMi/repos",
     "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/StErMi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/3/2023",
    "updated_at": "2023-10-03T06:13:12Z",
    "author_association": "COLLABORATOR",
    "body": "@GalloDaSballo just to be clear: you will \"plugin\" the last CDP only when it is needed, right? Because otherwise you have to maintain it during the whole lifecycle of the protocol. For \"maintaining it\" I mean that you need to ensure that it's always healthy, and it does not get redeemed from (and closed)",
    "reactions": {
     "url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/comments/1744274499/reactions",
     "total_count": 0,
     "+1": 0,
     "-1": 0,
     "laugh": 0,
     "hooray": 0,
     "confused": 0,
     "heart": 0,
     "rocket": 0,
     "eyes": 0
    },
    "performed_via_github_app": null
   }
  ],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/12/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#12"
 },
 {
  "id": 1840340709,
  "url": "https://github.com/cantinasec/review-badgerdao/pull/11",
  "title": "PriceFeed,LiquityBase,LiquityMath",
  "created_by": "dmitriia",
  "created_at": "8/8/2023",
  "body": null,
  "state": "open",
  "comments": [],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/11/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#11"
 },
 {
  "id": 1838238577,
  "url": "https://github.com/cantinasec/review-badgerdao/pull/9",
  "title": "HintHelpers,SortedCdps,EBTCToken",
  "created_by": "dmitriia",
  "created_at": "8/6/2023",
  "body": null,
  "state": "open",
  "comments": [],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/9/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#9"
 },
 {
  "id": 1837993168,
  "url": "https://github.com/cantinasec/review-badgerdao/pull/8",
  "title": "CollSurplusPool,EBTCDeployer,Governor",
  "created_by": "dmitriia",
  "created_at": "8/6/2023",
  "body": null,
  "state": "open",
  "comments": [],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/8/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#8"
 },
 {
  "id": 1837828653,
  "url": "https://github.com/cantinasec/review-badgerdao/pull/7",
  "title": "ActivePool",
  "created_by": "dmitriia",
  "created_at": "8/5/2023",
  "body": null,
  "state": "open",
  "comments": [],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/7/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#7"
 },
 {
  "id": 1837825633,
  "url": "https://github.com/cantinasec/review-badgerdao/pull/6",
  "title": "LiquidationLibrary",
  "created_by": "dmitriia",
  "created_at": "8/5/2023",
  "body": null,
  "state": "open",
  "comments": [],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/6/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#6"
 },
 {
  "id": 1837823705,
  "url": "https://github.com/cantinasec/review-badgerdao/pull/5",
  "title": "CdpManagerStorage",
  "created_by": "dmitriia",
  "created_at": "8/5/2023",
  "body": null,
  "state": "open",
  "comments": [],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/5/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#5"
 },
 {
  "id": 1837823168,
  "url": "https://github.com/cantinasec/review-badgerdao/pull/4",
  "title": "CdpManager",
  "created_by": "dmitriia",
  "created_at": "8/5/2023",
  "body": null,
  "state": "open",
  "comments": [],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/4/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#4"
 },
 {
  "id": 1837820543,
  "url": "https://github.com/cantinasec/review-badgerdao/pull/3",
  "title": "BorrowerOperations",
  "created_by": "dmitriia",
  "created_at": "8/5/2023",
  "body": null,
  "state": "open",
  "comments": [],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/3/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#3"
 },
 {
  "id": 1837606355,
  "url": "https://github.com/cantinasec/review-badgerdao/pull/1",
  "title": "LeverageMacro* + SimplifiedDiamondLike",
  "created_by": "StErMi",
  "created_at": "8/5/2023",
  "body": null,
  "state": "open",
  "comments": [],
  "comments_url": "https://api.github.com/repos/cantinasec/review-badgerdao/issues/1/comments",
  "milestone": null,
  "quicklink": "cantinasec/review-badgerdao#1"
 }
]